{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NethServer Cockpit developer guide This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module. Guidelines Developer environment API guidelines UI guidelines References Application manifest Build Building RPM Building documentation Create new module If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project API Guidelines Read project UI Guidelines Prepare the Environment Scaffold your application","title":"Home"},{"location":"#nethserver-cockpit-developer-guide","text":"This guide describes how Cockpit is used inside NethServer and how to develop a new NethServer Cockpit module.","title":"NethServer Cockpit developer guide"},{"location":"#guidelines","text":"Developer environment API guidelines UI guidelines","title":"Guidelines"},{"location":"#references","text":"Application manifest","title":"References"},{"location":"#build","text":"Building RPM Building documentation","title":"Build"},{"location":"#create-new-module","text":"If you haven't used Cockpit before, be sure to check out the Cockpit Guide , as it explains Cockpit foundamentals. Once you're familiar with that process, you may proceed with this guide. To start the development of new NethServer Cockpit module: Read project API Guidelines Read project UI Guidelines Prepare the Environment Scaffold your application","title":"Create new module"},{"location":"api_guidelines/","text":"Design guidelines Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) The JavaScript controller uses the cockpit.spawn method to communicate with the backend. After spawning the process, the controller gather the standard output to track the task progress. At the end, the process exit code will raise an error or a success. Example: process = cockpit . spawn ( /usr/libexec/nethserver/system-status/read , { ... } Methods APIs should implement classical CRUD operations: create read update delete Extra operations: validate execute hints None of the above action is mandatory. create Create a new record and apply the configuration. It's used to handle new records inside databases to mimic a table behavior. The input should be a JSON esmith record . Example: system-hosts . read Read the current system status and configuration. It should return an object with status and configuration fields. JSON format: { status : { ... } configuration : { ... } } Example: system-openssh . update Update and existing record or a key inside the configuration database and apply the configuration. Example: system-openssh . delete Delete and existing record and apply the configuration. Example: system-hosts . validate Validate the given input. If validation fail, raise a validation error and exit 1. Otherwise return a success and exit 0. execute Execute a command in foreground or background. This type of operation can return raw output from underlying system. Example: system-backup hints Execute system checks and propose configuration tweaks. Check out the JSON format . Documentation When creating new helpers, remember to write the related documentation. Download the template and edit it Add the new document inside the docs/docs/api directory Add the new document inside the navigation menu Try to respect the following rules: always use a correct header level add examples to you documentation enable syntax highlighting for code See also building documementation .","title":"Design guidelines"},{"location":"api_guidelines/#design-guidelines","text":"Each cockpit module has its own helpers implementing a set API to read and write the configuration and to execute actions. All helpers are saved inside /usr/libexec/nethserver/api/ controller_name / directory. Each helper: must be an executable file, it can be written in any language depending on the task Example: /usr/libexec/nethserver/system-openssh/read . uses JSON format for input and output; the JSON can must be read as input from STDIN and printed to STDOUT can use other helpers to execute multiple actions, the helpers can be placed in the same directory (eg. /usr/libexec/nethserver/openssh/help1-read ) The JavaScript controller uses the cockpit.spawn method to communicate with the backend. After spawning the process, the controller gather the standard output to track the task progress. At the end, the process exit code will raise an error or a success. Example: process = cockpit . spawn ( /usr/libexec/nethserver/system-status/read , { ... }","title":"Design guidelines"},{"location":"api_guidelines/#methods","text":"APIs should implement classical CRUD operations: create read update delete Extra operations: validate execute hints None of the above action is mandatory.","title":"Methods"},{"location":"api_guidelines/#create","text":"Create a new record and apply the configuration. It's used to handle new records inside databases to mimic a table behavior. The input should be a JSON esmith record . Example: system-hosts .","title":"create"},{"location":"api_guidelines/#read","text":"Read the current system status and configuration. It should return an object with status and configuration fields. JSON format: { status : { ... } configuration : { ... } } Example: system-openssh .","title":"read"},{"location":"api_guidelines/#update","text":"Update and existing record or a key inside the configuration database and apply the configuration. Example: system-openssh .","title":"update"},{"location":"api_guidelines/#delete","text":"Delete and existing record and apply the configuration. Example: system-hosts .","title":"delete"},{"location":"api_guidelines/#validate","text":"Validate the given input. If validation fail, raise a validation error and exit 1. Otherwise return a success and exit 0.","title":"validate"},{"location":"api_guidelines/#execute","text":"Execute a command in foreground or background. This type of operation can return raw output from underlying system. Example: system-backup","title":"execute"},{"location":"api_guidelines/#hints","text":"Execute system checks and propose configuration tweaks. Check out the JSON format .","title":"hints"},{"location":"api_guidelines/#documentation","text":"When creating new helpers, remember to write the related documentation. Download the template and edit it Add the new document inside the docs/docs/api directory Add the new document inside the navigation menu Try to respect the following rules: always use a correct header level add examples to you documentation enable syntax highlighting for code See also building documementation .","title":"Documentation"},{"location":"api_libraries/","text":"Helper libraries The nethserver-cockpit RPM includes some simple libraries to ease the development of helpers. Usage of such libraries is not mandatory. PHP This library includes some classes from NethGUI framework to speed up the porting of existing code. PHP helper library is useful to quickly adapt validation code from old Server Manager. Include the library: ?php require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); Available functions readInput Read the JSON input and return a named array. Example: ?php $data = readInput (); print $data [ name ]; EsmithDatabase Access the Esmith database. Example: ?php $db = new EsmithDatabase ( configuration ); $policy = $db - getProp ( tls , policy ); $tls = $db - getKey ( tls ); $records = $db - getAll (); LegacyValidator Interface to old validator code. See below. Legacy validator When using the LegacyValidator class, you should follow some rules which ease the cut paste from legacy code. General workflow: Include the helper Read the input Create the validator (calling it $v ) Copy all declareParameter invocations from the old Module Parameters with ANYTHING validator could be omitted Replace all call to $this with $v Make sure the first parameter of declareParameter is the name of the prop inside the db (Optional) Remove the 3rd argument from declareParameter calls If present, copy validate function. It should be enough to copy the code inside if ($this- getRequest()- isMutation()) { condition. Replace all $this with $v Validate the input calling $v- validate() Invoke success() method if validate() returns true Otherwise invoke error($v) passing the validator object Full example: ?php # Include library require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); # Read input $data = readInput (); # Create the validator $v = new LegacyValidator ( $data [ props ]); # Declare all parameters $v - declareParameter ( PasswordAuthentication , Validate :: BOOLEAN ); # Validate the input if ( $v - validate ()) { success (); } else { error ( $v ); } Perl To write better code, always enable warnings and strict checks: use warnings ; use strict ; Include the library: require /usr/libexec/nethserver/api/lib/helper_functions.pl ; Available functions success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: - the error type (default: GenericError) - a message (default \"Generic error\") Example: error ( GenericError , System message failure ); readInput Read JSON input from STDIN Exit with InvalidInput error if JSON can't be decoded. Example: my $data = readInput (); print $data - { name }; hints Output an hint in JSON format. Takes 3 parameters: a general hint message an hashmap reference, the map must be in the form {\"prop1\" = \"hint1\", ... } an url to external doc Example of simple hint: hints ( , change_me ); Example of complex hint: hints ( ,{ TCPPort = change_default , status = status_should_be_enabled }, http://docs.nethserver.org ); General examples Output sshd key in json output: use JSON ; use esmith::db ; my $db = esmith::db - open ( configuration ); print to_json ( $db - prepare_json ( sshd ), { utf8 = 1 , pretty = 0 , allow_nonref = 1 }); Alternative implementation: use JSON ; use esmith::ConfigDB ; my $db = esmith::ConfigDB - open_ro (); my $record = $db - get ( sshd ); my %props = $record - props ; print encode_json ({ name = $record - key , type = $record - prop ( type ), props = \\ %props }); BASH BASH is useful when writing simple helpers. First, include the library: . /usr/libexec/nethserver/api/lib/helper_functions Available functions success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: the error type (default: GenericError) a message (default \"Generic error\") Example: error GenericError System failure message invalid_error Print an InvalidInput error and exit 1. hints Print am hint in JSON format. Takes 4 parameters: a general message a details map in json format the number of element inside the details map a link to an external doc Example of simple hint: hint one_or_more_dns_not_working Example of complex hint: hints { TCPPort : change_default_ssh_port } 1 General examples Read JSON from STDIN and set the record: cat /dev/stdin | /sbin/e-smith/config setjson - 2 /dev/null Output sshd key in json output: /sbin/e-smith/config getjson sshd","title":"Helper libraries"},{"location":"api_libraries/#helper-libraries","text":"The nethserver-cockpit RPM includes some simple libraries to ease the development of helpers. Usage of such libraries is not mandatory.","title":"Helper libraries"},{"location":"api_libraries/#php","text":"This library includes some classes from NethGUI framework to speed up the porting of existing code. PHP helper library is useful to quickly adapt validation code from old Server Manager. Include the library: ?php require_once ( /usr/libexec/nethserver/api/lib/Helpers.php );","title":"PHP"},{"location":"api_libraries/#available-functions","text":"readInput Read the JSON input and return a named array. Example: ?php $data = readInput (); print $data [ name ]; EsmithDatabase Access the Esmith database. Example: ?php $db = new EsmithDatabase ( configuration ); $policy = $db - getProp ( tls , policy ); $tls = $db - getKey ( tls ); $records = $db - getAll (); LegacyValidator Interface to old validator code. See below.","title":"Available functions"},{"location":"api_libraries/#legacy-validator","text":"When using the LegacyValidator class, you should follow some rules which ease the cut paste from legacy code. General workflow: Include the helper Read the input Create the validator (calling it $v ) Copy all declareParameter invocations from the old Module Parameters with ANYTHING validator could be omitted Replace all call to $this with $v Make sure the first parameter of declareParameter is the name of the prop inside the db (Optional) Remove the 3rd argument from declareParameter calls If present, copy validate function. It should be enough to copy the code inside if ($this- getRequest()- isMutation()) { condition. Replace all $this with $v Validate the input calling $v- validate() Invoke success() method if validate() returns true Otherwise invoke error($v) passing the validator object Full example: ?php # Include library require_once ( /usr/libexec/nethserver/api/lib/Helpers.php ); # Read input $data = readInput (); # Create the validator $v = new LegacyValidator ( $data [ props ]); # Declare all parameters $v - declareParameter ( PasswordAuthentication , Validate :: BOOLEAN ); # Validate the input if ( $v - validate ()) { success (); } else { error ( $v ); }","title":"Legacy validator"},{"location":"api_libraries/#perl","text":"To write better code, always enable warnings and strict checks: use warnings ; use strict ; Include the library: require /usr/libexec/nethserver/api/lib/helper_functions.pl ;","title":"Perl"},{"location":"api_libraries/#available-functions_1","text":"success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: - the error type (default: GenericError) - a message (default \"Generic error\") Example: error ( GenericError , System message failure ); readInput Read JSON input from STDIN Exit with InvalidInput error if JSON can't be decoded. Example: my $data = readInput (); print $data - { name }; hints Output an hint in JSON format. Takes 3 parameters: a general hint message an hashmap reference, the map must be in the form {\"prop1\" = \"hint1\", ... } an url to external doc Example of simple hint: hints ( , change_me ); Example of complex hint: hints ( ,{ TCPPort = change_default , status = status_should_be_enabled }, http://docs.nethserver.org );","title":"Available functions"},{"location":"api_libraries/#general-examples","text":"Output sshd key in json output: use JSON ; use esmith::db ; my $db = esmith::db - open ( configuration ); print to_json ( $db - prepare_json ( sshd ), { utf8 = 1 , pretty = 0 , allow_nonref = 1 }); Alternative implementation: use JSON ; use esmith::ConfigDB ; my $db = esmith::ConfigDB - open_ro (); my $record = $db - get ( sshd ); my %props = $record - props ; print encode_json ({ name = $record - key , type = $record - prop ( type ), props = \\ %props });","title":"General examples"},{"location":"api_libraries/#bash","text":"BASH is useful when writing simple helpers. First, include the library: . /usr/libexec/nethserver/api/lib/helper_functions","title":"BASH"},{"location":"api_libraries/#available-functions_2","text":"success Print a success JSON object and exit 0. error Print a JSON error and exit 1. Takes 2 arguments: the error type (default: GenericError) a message (default \"Generic error\") Example: error GenericError System failure message invalid_error Print an InvalidInput error and exit 1. hints Print am hint in JSON format. Takes 4 parameters: a general message a details map in json format the number of element inside the details map a link to an external doc Example of simple hint: hint one_or_more_dns_not_working Example of complex hint: hints { TCPPort : change_default_ssh_port } 1","title":"Available functions"},{"location":"api_libraries/#general-examples_1","text":"Read JSON from STDIN and set the record: cat /dev/stdin | /sbin/e-smith/config setjson - 2 /dev/null Output sshd key in json output: /sbin/e-smith/config getjson sshd","title":"General examples"},{"location":"api_protocol/","text":"Communication protocol The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects. As an exception, the execute operation can return RAW output instead of JSON. Esmith db records Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { name : keyname , type : typename , props : { FirstProp : FirstPropValue , ... } } Please note that name and type field are reserved. Example Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JSON notation: { name : goofy , type : local , props : { Description : Goofy workstation , IpAddress : 192.168.1.22 } } Events If invoked with -j option, the signal-event command outputs the event progress in JSON format. Example: { steps : 2 , pid : 17354 , args : , event : nethserver-lsm-save } { step : 1 , pid : 17354 , action : S05generic_template_expand , event : nethserver-lsm-save , state : running } { progress : 0.50 , time : 0.21036 , exit : 0 , event : nethserver-lsm-save , state : done , step : 1 , pid : 17354 , action : S05generic_template_expand } { step : 2 , pid : 17354 , action : S90adjust-services , event : nethserver-lsm-save , state : running } { progress : 1.00 , time : 0.685865 , exit : 0 , event : nethserver-lsm-save , state : done , step : 2 , pid : 17354 , action : S90adjust-services } { pid : 17354 , status : success , event : nethserver-lsm-save } Special fields: steps: set the total number of event actions step: identify the current running step progress: percentage of event completion status: can be success or failed in case of failure Success A successful response has no special requirements and is defined by the application needs. For instance, a success message could be an empty object {} or as simple as: { state : success } Errors If something goes wrong, APIs must output a JSON object which describes the error reason. For instance: { type : Error , message : Generic error reason , attributes : { output : output from the system } } The type field is mandatory. Its value is a string identifying the error type. See the \"Well-known errors\" section below. The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons. Well-known errors The list of well-known errors includes: validation event failure invalid input Validation Validation error: { type : NotValid , message : Validation failed , attributes : [ { parameter : name , value : test4 , error : valid_hostname_fqdn } ] } Event failure Event has failed: { type : EventFailed , message : See /var/log/messages } Invalid input Invalid JSON object input: { type : InvalidInput , message : No JSON data available } Hints Configuration suggestions displayed inside the UI. An hint must always contain the following fields: count : the count of hints for the module, 0 means no hints message : if the hint is not bounded to a specific field, a general message for the module link : a link to external documentation details : contains hints specific to one ore more property. Object format: prop_name : message Unused field should be set to null Example of simple hint: { count : 1 , details : null , message : must_configure_backup_data , link : http://docs.nethserver.org/en/v7/backup.html } Example of multiple hint: { count : 2 , details : { snmpd : service_not_consistent , smartd : service_not_consistent }, message : null , link : null }","title":"Communication protocol"},{"location":"api_protocol/#communication-protocol","text":"The API and the UI talk to each other using JSON and the communication protocol defines a set of a well-known objects. As an exception, the execute operation can return RAW output instead of JSON.","title":"Communication protocol"},{"location":"api_protocol/#esmith-db-records","text":"Objects passed to and returned by APIs must reflect esmith db format and respect the upper/lower case notation of property names: { name : keyname , type : typename , props : { FirstProp : FirstPropValue , ... } } Please note that name and type field are reserved.","title":"Esmith db records"},{"location":"api_protocol/#example","text":"Host goofy inside the hosts database. Original esmith db notation: goofy=local Description=Goofy workstation IpAddress=192.168.1.22 Equivalent JSON notation: { name : goofy , type : local , props : { Description : Goofy workstation , IpAddress : 192.168.1.22 } }","title":"Example"},{"location":"api_protocol/#events","text":"If invoked with -j option, the signal-event command outputs the event progress in JSON format. Example: { steps : 2 , pid : 17354 , args : , event : nethserver-lsm-save } { step : 1 , pid : 17354 , action : S05generic_template_expand , event : nethserver-lsm-save , state : running } { progress : 0.50 , time : 0.21036 , exit : 0 , event : nethserver-lsm-save , state : done , step : 1 , pid : 17354 , action : S05generic_template_expand } { step : 2 , pid : 17354 , action : S90adjust-services , event : nethserver-lsm-save , state : running } { progress : 1.00 , time : 0.685865 , exit : 0 , event : nethserver-lsm-save , state : done , step : 2 , pid : 17354 , action : S90adjust-services } { pid : 17354 , status : success , event : nethserver-lsm-save } Special fields: steps: set the total number of event actions step: identify the current running step progress: percentage of event completion status: can be success or failed in case of failure","title":"Events"},{"location":"api_protocol/#success","text":"A successful response has no special requirements and is defined by the application needs. For instance, a success message could be an empty object {} or as simple as: { state : success }","title":"Success"},{"location":"api_protocol/#errors","text":"If something goes wrong, APIs must output a JSON object which describes the error reason. For instance: { type : Error , message : Generic error reason , attributes : { output : output from the system } } The type field is mandatory. Its value is a string identifying the error type. See the \"Well-known errors\" section below. The message property should be used if an error is not caused by a specific attribute. On the other hand, there could be cases where the attributes object is empty, or undefined because the error condition does not depend on any of the attributes or attributes are not defined at all. Note that the same Error object could represent multiple failure reasons.","title":"Errors"},{"location":"api_protocol/#well-known-errors","text":"The list of well-known errors includes: validation event failure invalid input","title":"Well-known errors"},{"location":"api_protocol/#validation","text":"Validation error: { type : NotValid , message : Validation failed , attributes : [ { parameter : name , value : test4 , error : valid_hostname_fqdn } ] }","title":"Validation"},{"location":"api_protocol/#event-failure","text":"Event has failed: { type : EventFailed , message : See /var/log/messages }","title":"Event failure"},{"location":"api_protocol/#invalid-input","text":"Invalid JSON object input: { type : InvalidInput , message : No JSON data available }","title":"Invalid input"},{"location":"api_protocol/#hints","text":"Configuration suggestions displayed inside the UI. An hint must always contain the following fields: count : the count of hints for the module, 0 means no hints message : if the hint is not bounded to a specific field, a general message for the module link : a link to external documentation details : contains hints specific to one ore more property. Object format: prop_name : message Unused field should be set to null Example of simple hint: { count : 1 , details : null , message : must_configure_backup_data , link : http://docs.nethserver.org/en/v7/backup.html } Example of multiple hint: { count : 2 , details : { snmpd : service_not_consistent , smartd : service_not_consistent }, message : null , link : null }","title":"Hints"},{"location":"api_template/","text":"module-name Short module description read Output Describe JSON output here: { ... } validate Constraints Constraint 1 Constraint 2 ... Input Describe input here. Input example: { .... } Invocation example: echo ... | command update Update input description. Use subtitles to describe multiple update actions. delete Delete input description. create Create input description.","title":"module-name"},{"location":"api_template/#module-name","text":"Short module description","title":"module-name"},{"location":"api_template/#read","text":"","title":"read"},{"location":"api_template/#output","text":"Describe JSON output here: { ... }","title":"Output"},{"location":"api_template/#validate","text":"","title":"validate"},{"location":"api_template/#constraints","text":"Constraint 1 Constraint 2 ...","title":"Constraints"},{"location":"api_template/#input","text":"Describe input here. Input example: { .... } Invocation example: echo ... | command","title":"Input"},{"location":"api_template/#update","text":"Update input description. Use subtitles to describe multiple update actions.","title":"update"},{"location":"api_template/#delete","text":"Delete input description.","title":"delete"},{"location":"api_template/#create","text":"Create input description.","title":"create"},{"location":"application_manifest/","text":"Application manifest Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ; Format id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) external : this is a optional tag for applications that have only external link and not configuration settings release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id / directory. The url field should contain the URL to access the installed Web application. It should be empty, if the application doesn't have its own external Web interface start with / , if the application is hosted under the default virtualhost; example: /webtop contain a full URL if the application is hosted inside a dedicated virtual host, example: https://mattermost.nethserver.org . In this case, the application should take care to update is own application manifest using a template Example File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Application manifest"},{"location":"application_manifest/#application-manifest","text":"Applications are described by a JSON manifest inspired to AppData and NPM package.json formats. The manifest is used both for generating the \"Applications\" page and for a future App store. Manifest must be placed under /usr/share/cockpit/nethserver/applications directory and named with the application id like id .json ;","title":"Application manifest"},{"location":"application_manifest/#format","text":"id : this tag contains the unique identifier for this application (required) name : descriptive name of the application (required) summary : describe what is the purpose of the application in few words (required) description : include 2-3 paragraphs describing any important features. Each line should be an element of the array. Supports markdown format. (recommended) icon : name of the icon file; the icon should be 256x256px (recommended) screenshots : a list of screenshots; all screenshots should have a 16:9 aspect ratio, and should have a width that is no smaller than 620px (optional) url : link to local application installation. (required for web applications) homepage : this is a recommended tag for link project official site (optional) external : this is a optional tag for applications that have only external link and not configuration settings release : define the version and release date of this application (recommended) provides : list of provided RPM packages (optional) tags : list of keywords to help people discover content of the application (optional) license : license of the application, please pick one from SPDX list (recommended) bugs : the url of project's issue tracker and / or the email address to which issues should be reported (optional) author : the name of of the author with optional email and urls fields. (recommended) Images like screenshots and icons must be placed under /usr/share/cockpit/ application-id / directory. The url field should contain the URL to access the installed Web application. It should be empty, if the application doesn't have its own external Web interface start with / , if the application is hosted under the default virtualhost; example: /webtop contain a full URL if the application is hosted inside a dedicated virtual host, example: https://mattermost.nethserver.org . In this case, the application should take care to update is own application manifest using a template","title":"Format"},{"location":"application_manifest/#example","text":"File /usr/share/cockpit/nethserver/applications/nextcloud.json : { id : nethserver-netxtcloud , name : NextCloud , summary : Share your data , description : [ Access, **share** and protect your files, calendars, contacts, communication more at home and in your enterprise. , Nextcloud puts your data at your fingertips, under your control. ], icon : icon.png , screenshots : [ { caption : Login , image : login.png }, { caption : Share data , image : data.png } ], url : /nextcloud , homepage : http://www.nextcloud.org , provides : [ nextcloud , nethserver-nextcloud ], release : { version : 12.0.2 }, tags : [ cloud , files , share ], license : GPL-3.0 , bugs : { url : https://github.com/owner/project/issues , email : project@hostname.com }, author : { name : Nextcloud , url : https://nextcloud.com , email : info@nextcloud.com } }","title":"Example"},{"location":"authorizations/","text":"Authorizations Cockpit allows the login of any system users with a valid shell, that is the user shell must listed inside /etc/shells file. The web interface can be profiled using two different methods: the left most menu containing the main sections like \"System\" and \"Applications\" is part of the Cockpit project, and can be customized following the upstream documentation the inner menu inside \"System\" or \"Applications\" can be customized using nethserver-cockpit roles . UI sections The UI is split into 2 main sections: System : contains all modules shipped with nethserver-cockpit and available on any installation. Modules inside the system section can be used to configure the server basic behavior which is common to all modules. Some examples of system modules can be: the hostname, DNS configuration, account providers and so on. System modules are statically defined inside the /etc/nethserver/cockpit/authorization/system-routes.json and should not be modified Applications : contains all modules shipped with extra RPM packages. Each application is a complete set of features. Some examples of applications can be: the firewall module, nextcloud or the mail server. A user can be granted access to specific applications or system modules. Roles A role is composed by 2 parts: web routes: a list of modules accessible by the logged user APIs: a list of underlay scripts executable by the logged user using sudo Web routes Each role must be defined inside /etc/nethserver/cockpit/authorization/roles.json . A role is defined by: a name, a unique identifier for the role; a groups with the same name must exists inside the system an array of system modules inside the system key an array of applications inside the applications Only listed modules will be accessible by the user, except \"Dashboard\", \"Settings\" and \"About\" modules which are accessible by all users. Role example: { ... managers : { system : [ services , users-groups ], applications : [ ] } ... } APIs When accessing a web page, the interface calls some system APIs to display and edit data inside pages. To grant a role to a user, create a system group named like the role itself. Then grant to the group the ability to execute APIs calls using sudo configuration. Please note also that each page could call multiple APIs. Default roles The root user can always read and write everything, it can't be overridden. Pre-defined roles are: admins : same privileges as root, it can be customized managers : access only user ad groups, services and disk-usage, it can be customized To activate a role, create a group named like the role itself using the web interface or groupadd command, then add one or more user to it. Creating new roles Follow these steps to create a new role. Add a new object inside the roles.json file. Example: ... auditors : { system : [ ssh ], applications : [ nethserver-cgp ] } ... Create a new group. Using the account provider: echo { action : group-create , name : auditors1 } | /usr/libexec/nethserver/api/system-users/create Configure sudo. Example, `visudo -f /etc/sudoers.d/30_cockpit_auditors: Cmnd_Alias MANAGER = /usr/libexec/nethserver/api/system-ssh/* %auditors ALL=NOPASSWD: MANAGER # server-manager does not require a tty Defaults:%managers !requiretty","title":"Authorizations"},{"location":"authorizations/#authorizations","text":"Cockpit allows the login of any system users with a valid shell, that is the user shell must listed inside /etc/shells file. The web interface can be profiled using two different methods: the left most menu containing the main sections like \"System\" and \"Applications\" is part of the Cockpit project, and can be customized following the upstream documentation the inner menu inside \"System\" or \"Applications\" can be customized using nethserver-cockpit roles .","title":"Authorizations"},{"location":"authorizations/#ui-sections","text":"The UI is split into 2 main sections: System : contains all modules shipped with nethserver-cockpit and available on any installation. Modules inside the system section can be used to configure the server basic behavior which is common to all modules. Some examples of system modules can be: the hostname, DNS configuration, account providers and so on. System modules are statically defined inside the /etc/nethserver/cockpit/authorization/system-routes.json and should not be modified Applications : contains all modules shipped with extra RPM packages. Each application is a complete set of features. Some examples of applications can be: the firewall module, nextcloud or the mail server. A user can be granted access to specific applications or system modules.","title":"UI sections"},{"location":"authorizations/#roles","text":"A role is composed by 2 parts: web routes: a list of modules accessible by the logged user APIs: a list of underlay scripts executable by the logged user using sudo","title":"Roles"},{"location":"authorizations/#web-routes","text":"Each role must be defined inside /etc/nethserver/cockpit/authorization/roles.json . A role is defined by: a name, a unique identifier for the role; a groups with the same name must exists inside the system an array of system modules inside the system key an array of applications inside the applications Only listed modules will be accessible by the user, except \"Dashboard\", \"Settings\" and \"About\" modules which are accessible by all users. Role example: { ... managers : { system : [ services , users-groups ], applications : [ ] } ... }","title":"Web routes"},{"location":"authorizations/#apis","text":"When accessing a web page, the interface calls some system APIs to display and edit data inside pages. To grant a role to a user, create a system group named like the role itself. Then grant to the group the ability to execute APIs calls using sudo configuration. Please note also that each page could call multiple APIs.","title":"APIs"},{"location":"authorizations/#default-roles","text":"The root user can always read and write everything, it can't be overridden. Pre-defined roles are: admins : same privileges as root, it can be customized managers : access only user ad groups, services and disk-usage, it can be customized To activate a role, create a group named like the role itself using the web interface or groupadd command, then add one or more user to it.","title":"Default roles"},{"location":"authorizations/#creating-new-roles","text":"Follow these steps to create a new role. Add a new object inside the roles.json file. Example: ... auditors : { system : [ ssh ], applications : [ nethserver-cgp ] } ... Create a new group. Using the account provider: echo { action : group-create , name : auditors1 } | /usr/libexec/nethserver/api/system-users/create Configure sudo. Example, `visudo -f /etc/sudoers.d/30_cockpit_auditors: Cmnd_Alias MANAGER = /usr/libexec/nethserver/api/system-ssh/* %auditors ALL=NOPASSWD: MANAGER # server-manager does not require a tty Defaults:%managers !requiretty","title":"Creating new roles"},{"location":"build_doc/","text":"Building documentation This guide has been built using MkDocs and Material for MKDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve Publish to GitHub pages To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Building documentation"},{"location":"build_doc/#building-documentation","text":"This guide has been built using MkDocs and Material for MKDocs . Follow mkdocs installation instructions , or just use: pip install --user mkdocs mkdocs-material To serve the documentation during the development use: cd docs mkdocs serve","title":"Building documentation"},{"location":"build_doc/#publish-to-github-pages","text":"To build and public the documentation directly to GitHub pages: cd docs mkdocs gh-deploy","title":"Publish to GitHub pages"},{"location":"build_rpm/","text":"Building RPM Automatic builds The package is automatically built using Travis Build are started when: a new PR has been created one or more commit have been pushed to the master branch Note: due to Travis limits, the package should have a new tag every 50 commits. The tag avoids the upload of a testing package inside the sable repository. Locally Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms Upstream RPMs The upstream project provides packages for EPEL. To install it from the upstream repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Building RPM"},{"location":"build_rpm/#building-rpm","text":"","title":"Building RPM"},{"location":"build_rpm/#automatic-builds","text":"The package is automatically built using Travis Build are started when: a new PR has been created one or more commit have been pushed to the master branch Note: due to Travis limits, the package should have a new tag every 50 commits. The tag avoids the upload of a testing package inside the sable repository.","title":"Automatic builds"},{"location":"build_rpm/#locally","text":"Move to the root directory of cloned repository and use standard make-rpms NethServer tool: ./prep-sources make-rpms","title":"Locally"},{"location":"build_rpm/#upstream-rpms","text":"The upstream project provides packages for EPEL. To install it from the upstream repository: wget https://copr.fedorainfracloud.org/coprs/g/cockpit/cockpit-preview/repo/epel-7/group_cockpit-cockpit-preview-epel-7.repo -O /etc/yum.repos.d/cockpit.repo yum install nethserver-cockpit*rpm","title":"Upstream RPMs"},{"location":"environment/","text":"Development environment Index Install requirements Code style Build API and US Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where Cockpit is running Install UI requirements Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Enter inside the cloned repository and install all ui dependencies: cd nethserver-cockpit/ui npm install Build the UI Note : during the development, the UI must run on the NethServer server. Running the UI on the developer machine will not work due to Cockpit CORS limitations. Note : Requirements: nodejs = 10 Enter UI directory and build using npm : cd ui/ ./prep-sources Make sure to create the /root/.local/share/cockpit/nethserver directory inside your NethServer. You can do it using this command, assuming the NethServer has IP 192.168.1.20 : ssh root@192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver Sync API and UI Files can be copied using rsync. To copy the APIs, use the following command: cd api/ rsync -avz --delete ./* root@192.168.1.20:/usr/libexec/nethserver/api/ Before copying the UI, make sure to compile it as explained in the paragraph above. To copy the UI, use the following command: cd ui/ rsync -avz --delete dist/* root@192.168.1.20:~/.local/share/cockpit/nethserver/ Code style Please use configuration from EditorConfig .","title":"Development environment"},{"location":"environment/#development-environment","text":"Index Install requirements Code style Build API and US Sync API and UI The development environment can be prepared on a Fedora or CentOS 7 machine. Follow these steps: prepare the environment do your modification to API or UI sync your modification to the server where Cockpit is running","title":"Development environment"},{"location":"environment/#install-ui-requirements","text":"Prepare the development environment: Install developer tools: npm and git On Fedora: dnf install npm git On CentOS: yum install npm git Clone the repository: git clone git@github.com:NethServer/nethserver-cockpit Enter inside the cloned repository and install all ui dependencies: cd nethserver-cockpit/ui npm install","title":"Install UI requirements"},{"location":"environment/#build-the-ui","text":"Note : during the development, the UI must run on the NethServer server. Running the UI on the developer machine will not work due to Cockpit CORS limitations. Note : Requirements: nodejs = 10 Enter UI directory and build using npm : cd ui/ ./prep-sources Make sure to create the /root/.local/share/cockpit/nethserver directory inside your NethServer. You can do it using this command, assuming the NethServer has IP 192.168.1.20 : ssh root@192.168.1.20 mkdir -p ~/.local/share/cockpit/nethserver","title":"Build the UI"},{"location":"environment/#sync-api-and-ui","text":"Files can be copied using rsync. To copy the APIs, use the following command: cd api/ rsync -avz --delete ./* root@192.168.1.20:/usr/libexec/nethserver/api/ Before copying the UI, make sure to compile it as explained in the paragraph above. To copy the UI, use the following command: cd ui/ rsync -avz --delete dist/* root@192.168.1.20:~/.local/share/cockpit/nethserver/","title":"Sync API and UI"},{"location":"environment/#code-style","text":"Please use configuration from EditorConfig .","title":"Code style"},{"location":"i18n/","text":"Translations The UI uses a simple JSON file format to handle translations. The JSON format is described by the Transifex JSON format documentation page. Translators have to access Transifex to localize the messages. Developers have to follow the rules described by the next section. See also the Internationalization section in the Developer manual. Developer rules The source code repository must have the messages source strings already localized in English (US) and saved according the above JSON format. The JSON source code path, depends on many factors. A typical example for simple projects could be project root /ui/i18n/language.json , whilst a Vue.js project can use project root /ui/public/i18n/language.json . The resulting runtime URL, relative to the application base URL must be ./i18n/language.json . That URL is required by the nethserver.fetchTranslatedStrings() method. To obtain this, the application RPM must install the language.json source catalog as /usr/share/cockpit/ APPDIR /i18n/language.json . For instance APPDIR can be nethserver-myapp . Prerequisites create a personal Transifex account associated to the nethserver organization install the Transifex Client (command tx ) ensure the repository root dir has a .tx/config file For instance, for the \"MyApp\" application .tx/config must have something like: [nethserver.CockpitMyApp] source_file = ui/i18n/language.json source_lang = en type = KEYVALUEJSON Note the mandatory nethserver.Cockpit* prefix for the strings catalog \"slug\" name. Simple workflow When a new string in source code has to be translated, add it to the language.json file, Commit changes to git When the changes are ready for the release send the strings to Transifex for the translation by running tx push -s in the repository root directory Translations packages The localized strings are periodically downloaded from Transifex and added to the nethserver-lang repository . They are packed in separate RPMs at a later time. The UI application developer must list his JSON traslation files in nethserver-lang/.tx/config ; following the example above, the corresponding resource specification is: [nethserver.CockpitMail] file_filter = ui/nethserver-myapp/language. lang .json source_file = ui/nethserver-myapp/language.json source_lang = en type = KEYVALUEJSON The developer can open a Pull Request to merge his code in nethserver-lang . Translations API See the \"UI guidelines\" section.","title":"Translations"},{"location":"i18n/#translations","text":"The UI uses a simple JSON file format to handle translations. The JSON format is described by the Transifex JSON format documentation page. Translators have to access Transifex to localize the messages. Developers have to follow the rules described by the next section. See also the Internationalization section in the Developer manual.","title":"Translations"},{"location":"i18n/#developer-rules","text":"The source code repository must have the messages source strings already localized in English (US) and saved according the above JSON format. The JSON source code path, depends on many factors. A typical example for simple projects could be project root /ui/i18n/language.json , whilst a Vue.js project can use project root /ui/public/i18n/language.json . The resulting runtime URL, relative to the application base URL must be ./i18n/language.json . That URL is required by the nethserver.fetchTranslatedStrings() method. To obtain this, the application RPM must install the language.json source catalog as /usr/share/cockpit/ APPDIR /i18n/language.json . For instance APPDIR can be nethserver-myapp .","title":"Developer rules"},{"location":"i18n/#prerequisites","text":"create a personal Transifex account associated to the nethserver organization install the Transifex Client (command tx ) ensure the repository root dir has a .tx/config file For instance, for the \"MyApp\" application .tx/config must have something like: [nethserver.CockpitMyApp] source_file = ui/i18n/language.json source_lang = en type = KEYVALUEJSON Note the mandatory nethserver.Cockpit* prefix for the strings catalog \"slug\" name.","title":"Prerequisites"},{"location":"i18n/#simple-workflow","text":"When a new string in source code has to be translated, add it to the language.json file, Commit changes to git When the changes are ready for the release send the strings to Transifex for the translation by running tx push -s in the repository root directory","title":"Simple workflow"},{"location":"i18n/#translations-packages","text":"The localized strings are periodically downloaded from Transifex and added to the nethserver-lang repository . They are packed in separate RPMs at a later time. The UI application developer must list his JSON traslation files in nethserver-lang/.tx/config ; following the example above, the corresponding resource specification is: [nethserver.CockpitMail] file_filter = ui/nethserver-myapp/language. lang .json source_file = ui/nethserver-myapp/language.json source_lang = en type = KEYVALUEJSON The developer can open a Pull Request to merge his code in nethserver-lang .","title":"Translations packages"},{"location":"i18n/#translations-api","text":"See the \"UI guidelines\" section.","title":"Translations API"},{"location":"tutorial/","text":"Tutorial This document describes how to create a new application from scratch. A NethServer Cockpit module is composed by 5 parts: UI: a mix of HTML and CSS which presents data loaded using JavaScript (Cockpit API or NethServer API) API: a list of helpers to do actions: read - validate - update Package files: manifest and RPM spec file to create an installable package Translation files (optional) An applicatin manifest Install required tools Let's assume you've already prepared your own development environment . git clone git@github.com:NethServer/nethserver-cockpit-empty.git your-own-module cd your-own-module . \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 read \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 validate \u251c\u2500\u2500 COPYING \u251c\u2500\u2500 createlinks \u251c\u2500\u2500 nethserver-cockpit-empty.json \u251c\u2500\u2500 nethserver-cockpit-empty.spec \u251c\u2500\u2500 prep-sources \u251c\u2500\u2500 README.md \u2514\u2500\u2500 ui \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 dev \u2502 \u251c\u2500\u2500 cockpit.min.js \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2514\u2500\u2500 patternfly.css \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 language.json \u251c\u2500\u2500 index.html \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 app.js \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sammy.js \u2502 \u2514\u2500\u2500 sammy.template.js \u251c\u2500\u2500 logo.png \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 override.json \u2514\u2500\u2500 views \u251c\u2500\u2500 about.html \u251c\u2500\u2500 dashboard.html \u251c\u2500\u2500 item1.html \u2514\u2500\u2500 logs.html 8 directories, 26 files Build NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module: Change occurencies Sobsitute all nethserver-cockpit-empty and NethServer Cockpit Empty occurencies with your-own-module and Your Own Module , to check all occurencies: grep -Rn nethserver-cockpit-empty * grep -Rn NethServer Cockpit Empty * Rename also nethserver-cockpit-empty-json and nethserver-cockpit-empty-spec with your-own-module.json and your-own-module.spec . Build the module: ./prep-sources make-rpms your-own-module.spec Then you have rpm builded inside the directory, install it, inside NethServer machine with scp your - own - module - x . y . z - t . ns7 . noarch . rpm root @192.168.1.20 : ssh root @192.168.1.20 yum install your - own - module - x . y . z - t . ns7 . noarch . rpm You can see the module in action by accessing Cockpit: https:// your_server :9090 , in the Applications section. If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit Customize Edit all application metadata inside the manifest: your-own-module.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, contains the navbar left menu with 3 base sections: Dashboard Item 1 (can be customizable) Logs About css/style.css : application stylesheet, customize your custom CSS but always follow UI guidelines js/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines views/*.html : contains views for each routes defined in app.js You can ignore manifest.json and override.json files which are used for Cockpit internals (change only name inside with your-own-module ). The module UI will be installed inside /usr/share/cockpit/ project directory. The module API will be installed inside /usr/libexec/nethserver/api/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the Applications page. JavaScript frameworks The module provides a very small and easy routing system and javascipt API but in case you really want to pick a JavaScript framework, just include it inside index.html . AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script Save your work The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This document describes how to create a new application from scratch. A NethServer Cockpit module is composed by 5 parts: UI: a mix of HTML and CSS which presents data loaded using JavaScript (Cockpit API or NethServer API) API: a list of helpers to do actions: read - validate - update Package files: manifest and RPM spec file to create an installable package Translation files (optional) An applicatin manifest","title":"Tutorial"},{"location":"tutorial/#install-required-tools","text":"Let's assume you've already prepared your own development environment . git clone git@github.com:NethServer/nethserver-cockpit-empty.git your-own-module cd your-own-module . \u251c\u2500\u2500 api \u2502 \u251c\u2500\u2500 read \u2502 \u251c\u2500\u2500 update \u2502 \u2514\u2500\u2500 validate \u251c\u2500\u2500 COPYING \u251c\u2500\u2500 createlinks \u251c\u2500\u2500 nethserver-cockpit-empty.json \u251c\u2500\u2500 nethserver-cockpit-empty.spec \u251c\u2500\u2500 prep-sources \u251c\u2500\u2500 README.md \u2514\u2500\u2500 ui \u251c\u2500\u2500 css \u2502 \u2514\u2500\u2500 style.css \u251c\u2500\u2500 dev \u2502 \u251c\u2500\u2500 cockpit.min.js \u2502 \u251c\u2500\u2500 jquery.min.js \u2502 \u2514\u2500\u2500 patternfly.css \u251c\u2500\u2500 i18n \u2502 \u2514\u2500\u2500 language.json \u251c\u2500\u2500 index.html \u251c\u2500\u2500 js \u2502 \u251c\u2500\u2500 app.js \u2502 \u2514\u2500\u2500 lib \u2502 \u251c\u2500\u2500 sammy.js \u2502 \u2514\u2500\u2500 sammy.template.js \u251c\u2500\u2500 logo.png \u251c\u2500\u2500 manifest.json \u251c\u2500\u2500 override.json \u2514\u2500\u2500 views \u251c\u2500\u2500 about.html \u251c\u2500\u2500 dashboard.html \u251c\u2500\u2500 item1.html \u2514\u2500\u2500 logs.html 8 directories, 26 files","title":"Install required tools"},{"location":"tutorial/#build","text":"NethServer provides a set of tool for building RPMs under CentOS or Fedora. Prepare the build environment , then create the RPM for your module:","title":"Build"},{"location":"tutorial/#change-occurencies","text":"Sobsitute all nethserver-cockpit-empty and NethServer Cockpit Empty occurencies with your-own-module and Your Own Module , to check all occurencies: grep -Rn nethserver-cockpit-empty * grep -Rn NethServer Cockpit Empty * Rename also nethserver-cockpit-empty-json and nethserver-cockpit-empty-spec with your-own-module.json and your-own-module.spec .","title":"Change occurencies"},{"location":"tutorial/#build-the-module","text":"./prep-sources make-rpms your-own-module.spec Then you have rpm builded inside the directory, install it, inside NethServer machine with scp your - own - module - x . y . z - t . ns7 . noarch . rpm root @192.168.1.20 : ssh root @192.168.1.20 yum install your - own - module - x . y . z - t . ns7 . noarch . rpm You can see the module in action by accessing Cockpit: https:// your_server :9090 , in the Applications section. If some JavaScript or HTML part doesn't load correctly, execute: systemctl restart cockpit","title":"Build the module:"},{"location":"tutorial/#customize","text":"Edit all application metadata inside the manifest: your-own-module.json It's now time to start implementing some nice feature, you just need to know HTML, CSS and some JavaScript basics: there is no need to learn a new framework, use whatever you like. The source code must be placed inside the app directory: index.html : main HTML template, contains the navbar left menu with 3 base sections: Dashboard Item 1 (can be customizable) Logs About css/style.css : application stylesheet, customize your custom CSS but always follow UI guidelines js/app.js : JavaScript logic goes here. If you need to develop complex API, take a loot to API guidelines views/*.html : contains views for each routes defined in app.js You can ignore manifest.json and override.json files which are used for Cockpit internals (change only name inside with your-own-module ). The module UI will be installed inside /usr/share/cockpit/ project directory. The module API will be installed inside /usr/libexec/nethserver/api/ project directory. Metadata will be copied inside /usr/share/nethserver/applications directory. A new application card named as your project will be added to the Applications page.","title":"Customize"},{"location":"tutorial/#javascript-frameworks","text":"The module provides a very small and easy routing system and javascipt API but in case you really want to pick a JavaScript framework, just include it inside index.html . AngularJS (https://angularjs.org/): html ng-app ... script src= https://ajax.googleapis.com/ajax/libs/angularjs/1.5.6/angular.min.js /script Vue (https://vuejs.org/): script src= https://unpkg.com/vue /script React (https://reactjs.org/): script crossorigin src = https://unpkg.com/react@16/umd/react.production.min.js / script script crossorigin src = https://unpkg.com/react-dom@16/umd/react-dom.production.min.js / script","title":"JavaScript frameworks"},{"location":"tutorial/#save-your-work","text":"The code should always be kept under a version control system for tracking changes. NethServer build system assumes you're using git , so commit everything on a git repository: git init git add * git commit -a -m First import Always consider to share your code, take a look at GitHub .","title":"Save your work"},{"location":"ui_guidelines/","text":"UI guidelines Index UI design Left menu Applications Forms Notifications Accessibility Translations UI design The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\" Left menu The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\". Applications The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format. Forms A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables. Notifications NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 3 seconds. error : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event . Example // success - hide notifications after 3 seconds parent . ns . $children [ 0 ]. notifications . success . show = true ; parent . ns . $children [ 0 ]. notifications . success . message = Your success message ; setTimeout ( function () { parent . ns . $children [ 0 ]. notifications . success . show = false ; }, 3000 ); // error parent . ns . $children [ 0 ]. notifications . error . show = true ; parent . ns . $children [ 0 ]. notifications . error . message = Your error message ; // event parent . ns . $children [ 0 ]. notifications . event . show = true ; parent . ns . $children [ 0 ]. notifications . event . name = Your event name ; parent . ns . $children [ 0 ]. notifications . event . message = Your action-name ; parent . ns . $children [ 0 ]. notifications . event . progress = 50 ; /* */ Call API Using Cockpit API you can easily call NethServer API or your own module API in this way: // Definition parent . ns . exec ( [ api-name / action ], // action can be: read | validate | update null , // used for input in JSON format - { key : value } null , // used for strem output, for actions the print on STDOUT function ( success ) { success = JSON . parse ( success ); return success ; }, function ( error ) { return error ; }, true // set to `false` if you do not want to launch the API with the sudo command ); // Example // define method function validate ( obj , callback ) { parent . ns . exec ( [ your-own-module/validate ], obj , null , function ( success ) { var success = JSON . parse ( success ); callback ( success ); }, function ( error , data ) { var errorData = JSON . parse ( data ); callback ( errorData ); }, false ); } // call it var validateObj = {} validate ( validateObj , function ( result ) { // check errors // if(result) { ... } // if no errors // update value // ... }); Modals Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases. Help on forms There are many ways to provide additional help to users when filling forms. The UI can display inline documentation or add links to external documentation. Pop-over The field should have the help icon as described in PatternFly . On click, a pop-over can give context about the field or describe the syntax. Pop-over can contain HTML syntax but it should be avoided to ease the string translation. HTML5 placeholder can be used to suggest actions like: \"Type a word to start searching\". External link A link pointing to external documentation should be added on complex sections which requires a general explanation. Some use cases are: wizards where the user should be guided to make a decision, like the backup configuration sections using NethServer-related terminology, like the \"Trusted network\" page Accessibility We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts. Translations nethserver.fetchTranslatedStrings(callback) Start an asynchronous call that fetches the localized strings. The current Cockpit language is automatically detected from the current session settings. If the remote call completes successfully callback is invoked. Return value a jQuery jqXHR object. Arguments callback(data) , a function that accepts an argument data containing the language.json file contents The actual localization is performed by the Cockpit server process, according to its content-negotiation rules. See also https://cockpit-project.org/guide/latest/packages.html#package-minified Examples In a VueJS main.js , using vue-i18n plugin: Vue . use ( VueI18n ) const i18n = new VueI18n (); ... nethserver . fetchTranslatedStrings ( function ( data , lang ) { i18n . setLocaleMessage ( cockpit , data ); i18n . locale = cockpit ; app . $mount ( #app ); // Start VueJS application after language strings are loaded })","title":"UI guidelines"},{"location":"ui_guidelines/#ui-guidelines","text":"Index UI design Left menu Applications Forms Notifications Accessibility Translations","title":"UI guidelines"},{"location":"ui_guidelines/#ui-design","text":"The whole web UI is designed following PatternFly patterns. Please, read carefully PatternFly documentation before starting the design of a new web page. The main goal is to have a consistent design and behavior across all modules. All web page should guide the user to well-defined and specific task like: bad task example: \"The user must choose the correct account provider\" good task example: \"The user must choose Active Directory provider if ACLs on shared folders are a functional requirements\"","title":"UI design"},{"location":"ui_guidelines/#left-menu","text":"The left menu should be considered fixed: modules shouldn't add items inside the left menu. When a module needs to add a new feature, the web page should be added inside exiting sections like \"System\".","title":"Left menu"},{"location":"ui_guidelines/#applications","text":"The Applications page is a container of each new module which implements new features, like mail server, nextcloud, etc. Each new application web page should display: the status of the application status on the top a list of common actions just below the status all configuration parameters (forms, table, etc.) in the center On first run, the application must display a modal wizard if the module can't be configured with a reasonable defaults. Also the web page should display suggestions to help the user to follow best practices. For example, inside the \"Certificate page\", the interface should display a suggestion to enable Let's Encrypt if a self-signed certificate is used as default. Each application must be described by a JSON manifest inspired to AppData freedesktop.org format.","title":"Applications"},{"location":"ui_guidelines/#forms","text":"A configuration form should always display the minimum number of fields needed to configure the feature. Extra parameters should be hidden inside an Advanced panel with reasonable defaults. For example, when creating a user you need at least the user name, the full name and the password; but you could hide extra details like street address or phone number. Also it is a good practice to add a \"Description\" when creating records inside tables.","title":"Forms"},{"location":"ui_guidelines/#notifications","text":"NethServer Cockpit provides multiple toast notification . Each notification can have one of these states: success : everything is ok. Transient: it stays on the screen for 3 seconds. error : something went wrong. Not transient: it stays on the screen until the user explicitly close it. May require an action link. Finally there also is a task notification, it stays on the screen until the task has been completed. This kind of notification can be created only by signal-event .","title":"Notifications"},{"location":"ui_guidelines/#example","text":"// success - hide notifications after 3 seconds parent . ns . $children [ 0 ]. notifications . success . show = true ; parent . ns . $children [ 0 ]. notifications . success . message = Your success message ; setTimeout ( function () { parent . ns . $children [ 0 ]. notifications . success . show = false ; }, 3000 ); // error parent . ns . $children [ 0 ]. notifications . error . show = true ; parent . ns . $children [ 0 ]. notifications . error . message = Your error message ; // event parent . ns . $children [ 0 ]. notifications . event . show = true ; parent . ns . $children [ 0 ]. notifications . event . name = Your event name ; parent . ns . $children [ 0 ]. notifications . event . message = Your action-name ; parent . ns . $children [ 0 ]. notifications . event . progress = 50 ; /* */","title":"Example"},{"location":"ui_guidelines/#call-api","text":"Using Cockpit API you can easily call NethServer API or your own module API in this way: // Definition parent . ns . exec ( [ api-name / action ], // action can be: read | validate | update null , // used for input in JSON format - { key : value } null , // used for strem output, for actions the print on STDOUT function ( success ) { success = JSON . parse ( success ); return success ; }, function ( error ) { return error ; }, true // set to `false` if you do not want to launch the API with the sudo command ); // Example // define method function validate ( obj , callback ) { parent . ns . exec ( [ your-own-module/validate ], obj , null , function ( success ) { var success = JSON . parse ( success ); callback ( success ); }, function ( error , data ) { var errorData = JSON . parse ( data ); callback ( errorData ); }, false ); } // call it var validateObj = {} validate ( validateObj , function ( result ) { // check errors // if(result) { ... } // if no errors // update value // ... });","title":"Call API"},{"location":"ui_guidelines/#modals","text":"Modal overlay should be provided any time the user needs to enter data on a form and press \"Save\" button to change system configuration. See also Modal Overlay for extra use cases.","title":"Modals"},{"location":"ui_guidelines/#help-on-forms","text":"There are many ways to provide additional help to users when filling forms. The UI can display inline documentation or add links to external documentation.","title":"Help on forms"},{"location":"ui_guidelines/#pop-over","text":"The field should have the help icon as described in PatternFly . On click, a pop-over can give context about the field or describe the syntax. Pop-over can contain HTML syntax but it should be avoided to ease the string translation. HTML5 placeholder can be used to suggest actions like: \"Type a word to start searching\".","title":"Pop-over"},{"location":"ui_guidelines/#external-link","text":"A link pointing to external documentation should be added on complex sections which requires a general explanation. Some use cases are: wizards where the user should be guided to make a decision, like the backup configuration sections using NethServer-related terminology, like the \"Trusted network\" page","title":"External link"},{"location":"ui_guidelines/#accessibility","text":"We need to evaluate how PatternFly copes with people suffering of low vision, who need to access most features using the keyboard shortcuts.","title":"Accessibility"},{"location":"ui_guidelines/#translations","text":"","title":"Translations"},{"location":"ui_guidelines/#nethserverfetchtranslatedstringscallback","text":"Start an asynchronous call that fetches the localized strings. The current Cockpit language is automatically detected from the current session settings. If the remote call completes successfully callback is invoked.","title":"nethserver.fetchTranslatedStrings(callback)"},{"location":"ui_guidelines/#return-value","text":"a jQuery jqXHR object.","title":"Return value"},{"location":"ui_guidelines/#arguments","text":"callback(data) , a function that accepts an argument data containing the language.json file contents The actual localization is performed by the Cockpit server process, according to its content-negotiation rules. See also https://cockpit-project.org/guide/latest/packages.html#package-minified","title":"Arguments"},{"location":"ui_guidelines/#examples","text":"In a VueJS main.js , using vue-i18n plugin: Vue . use ( VueI18n ) const i18n = new VueI18n (); ... nethserver . fetchTranslatedStrings ( function ( data , lang ) { i18n . setLocaleMessage ( cockpit , data ); i18n . locale = cockpit ; app . $mount ( #app ); // Start VueJS application after language strings are loaded })","title":"Examples"},{"location":"api/system-accounts-provider/","text":"system-accounts-provider Configures the system accounts provider. Supported use cases are: Local AD: configure, install, uninstall, change DC IP Remote AD: configure, bind, unbind Local LDAP: install, uninstall, upgrade to AD Remote LDAP: configure, bind, unbind read Gathers information that helps to configure the system accounts provider Gives back the current system configuration A JSON input object is mandatory with this schema: { action : action } The allowed action values are described below. dump Input: { action : dump } Output: { ValidHostname : 0 , BindDN : , LdapURI : ldap://127.0.0.1 , DiscoverDcType : dns , StartTls : , port : 389 , host : 127.0.0.1 , isAD : , isLdap : , UserDN : dc=edo,dc=nethesis,dc=it , GroupDN : dc=edo,dc=nethesis,dc=it , BindPassword : , BaseDN : dc=edo,dc=nethesis,dc=it , NsdcIp : 1.2.3.4 , IsLocal : 1 , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit } See perldoc NethServer::SSSD for attributes description. The NsdcIp can be empty if local AD is not installed. The ValidHostname check if the current host name is good enough for an account provider installation. The host name is checked against myhostname system validator, also it should not contain the localhost keywork and should be at least a 3rd level domain. probel-dap Tries to contact a remote LDAP server and retrieve as much information as possible with a root DSE query. Input: { action : probe-ldap , port : 389 , server : remote.ldap.org } The port attribute is optional, can be entirely omitted or set to NULL Output: { BindDN : , LdapURI : ldap://192.168.5.59 , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : 192.168.5.59 , isAD : , Provider : ldap , isLdap : 1 , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit , BaseDN : dc=directory,dc=nh } StartTls is a boolean condition that can be the empty string \"\" (false) or non-empty string \"1\" (true). probe-ad Input: { action : probe-ad , realm : adnethesis.it , server : 192.168.5.59 } The server attribute is optional, can be entirely omitted or set to NULL. If it has not been given, the action uses the system DNS to probe the AD configuration Ignore warnings and error messages sent to standard error, check the exit code only Output: { BindDN : user@adnethesis.it , LdapURI : ldap://w2k12.adnethesis.it , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : w2k12.adnethesis.it , isAD : 1 , isLdap : , Provider : ad , UserDN : DC=adnethesis,DC=it , GroupDN : DC=adnethesis,DC=it , Realm : ADNETHESIS.IT , LdapUriDn : ldap:///dc%3Dadnethesis%2Cdc%3Dit , BaseDN : DC=adnethesis,DC=it , BindPassword : ***** } BindDN and BindPassword fields are dummy values probe-workgroup Suggest the best workgroup based on realm name. Input: { action : probeworkgroup , realm : adnethesis.it , } Output: { Workgroup : AD } default-ad Suggest Realm and NetBIOS name based on machine name. Input: { action : default-ad , } Output: { Workgroup : ADNETHSERVER , Realm : ad.adnethserver.org } validate Constraints The action must be specified inside the JSON action field. Example: { action : remote-ldap , ... } Valid actions: remote-ldap local-ad remote-ad change-ad-ip Constraints for remote-ldap : StartTls: can be enabled or disabled Credentials are validate using ldap-credentials system validator Constraints for local-ad : Realm: must be a FQDN, validated using also dcrealm system validator IpAddress: a valid free IP address, validated using also dcipaddr system validator Workgroup: a simple hostname, maximum 15 chars Constraints for change-ad-ip : - IpAddress: a valid free IP address, validated using also dcipaddr system validator Constraints for remote-ad : AdDns: must be a valid IP address or empty, checked also using ad-dns system validator AdRealm: must be a FQDN, checked also using ad-dns system validator AdUsername and AdPassword: not empty, check if credentials are valid Input remote-ldap Example: { BindDN : cn=ldapservice,dc=directory,dc=nh , LdapURI : ldaps://192.168.1.1 , DiscoverDcType : dns , StartTls : disabled , Provider : ldap , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : xxxxxxxxxxxxxxxx , BaseDN : dc=directory,dc=nh , action : remoteldap } BindDN and BindPassword password can be left empty if the bind is anonymous. local-ad Input example: { action : local-ad , Realm : ad.local.neth.eu , Workgroup : LOCAL , IpAddress : 192.168.1.35 } change-ad-ip Input example: { action : change-ad-ip , IpAddress : 192.168.1.35 } remote-ad Input example: { action : remote-ad , AdRealm : adnethserver.org , AdDns : 192.168.1.1 , AdUsername : administrator@adnethserver.org , AdPassword : mypassword } update It takes an action argument, supported actions are: remove-provider local-ldap Input example: { action : remove-provider } local-ldap Install local LDAP server. Return the output of pkgaction in json format. Output example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Downloading - lm_sensors-libs-3.4.0-4.20160601gitf9185e5.el7.x86_64.rpm } ... { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } Error example: { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } ... { status : failed , message : [InstallError] No package(s) available to install , steps : -1 , event : null } remote-ldap Configure all the properties for remote LDAP binding, then fire nethserver-sssd-save event. remove-provider Remove the installed local account provider using nethserver-sssd-remove-provider to track the progress. local-ad Install nethserver-dc, it uses the same input from validate. Return the output of pkgaction in json format. change-ad-ip Change nsdc container IP address. remote-ad Try to join the domain, if the join fails, rollback to previous state. Output the state of all executed events and of netherver-dc package installation (see localldap for the output).","title":"system-accounts-provider"},{"location":"api/system-accounts-provider/#system-accounts-provider","text":"Configures the system accounts provider. Supported use cases are: Local AD: configure, install, uninstall, change DC IP Remote AD: configure, bind, unbind Local LDAP: install, uninstall, upgrade to AD Remote LDAP: configure, bind, unbind","title":"system-accounts-provider"},{"location":"api/system-accounts-provider/#read","text":"Gathers information that helps to configure the system accounts provider Gives back the current system configuration A JSON input object is mandatory with this schema: { action : action } The allowed action values are described below.","title":"read"},{"location":"api/system-accounts-provider/#dump","text":"Input: { action : dump } Output: { ValidHostname : 0 , BindDN : , LdapURI : ldap://127.0.0.1 , DiscoverDcType : dns , StartTls : , port : 389 , host : 127.0.0.1 , isAD : , isLdap : , UserDN : dc=edo,dc=nethesis,dc=it , GroupDN : dc=edo,dc=nethesis,dc=it , BindPassword : , BaseDN : dc=edo,dc=nethesis,dc=it , NsdcIp : 1.2.3.4 , IsLocal : 1 , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit } See perldoc NethServer::SSSD for attributes description. The NsdcIp can be empty if local AD is not installed. The ValidHostname check if the current host name is good enough for an account provider installation. The host name is checked against myhostname system validator, also it should not contain the localhost keywork and should be at least a 3rd level domain.","title":"dump"},{"location":"api/system-accounts-provider/#probel-dap","text":"Tries to contact a remote LDAP server and retrieve as much information as possible with a root DSE query. Input: { action : probe-ldap , port : 389 , server : remote.ldap.org } The port attribute is optional, can be entirely omitted or set to NULL Output: { BindDN : , LdapURI : ldap://192.168.5.59 , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : 192.168.5.59 , isAD : , Provider : ldap , isLdap : 1 , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : , LdapUriDn : ldap:///dc%3Dedo%2Cdc%3Dnethesis%2Cdc%3Dit , BaseDN : dc=directory,dc=nh } StartTls is a boolean condition that can be the empty string \"\" (false) or non-empty string \"1\" (true).","title":"probel-dap"},{"location":"api/system-accounts-provider/#probe-ad","text":"Input: { action : probe-ad , realm : adnethesis.it , server : 192.168.5.59 } The server attribute is optional, can be entirely omitted or set to NULL. If it has not been given, the action uses the system DNS to probe the AD configuration Ignore warnings and error messages sent to standard error, check the exit code only Output: { BindDN : user@adnethesis.it , LdapURI : ldap://w2k12.adnethesis.it , DiscoverDcType : dns , StartTls : 1 , port : 389 , host : w2k12.adnethesis.it , isAD : 1 , isLdap : , Provider : ad , UserDN : DC=adnethesis,DC=it , GroupDN : DC=adnethesis,DC=it , Realm : ADNETHESIS.IT , LdapUriDn : ldap:///dc%3Dadnethesis%2Cdc%3Dit , BaseDN : DC=adnethesis,DC=it , BindPassword : ***** } BindDN and BindPassword fields are dummy values","title":"probe-ad"},{"location":"api/system-accounts-provider/#probe-workgroup","text":"Suggest the best workgroup based on realm name. Input: { action : probeworkgroup , realm : adnethesis.it , } Output: { Workgroup : AD }","title":"probe-workgroup"},{"location":"api/system-accounts-provider/#default-ad","text":"Suggest Realm and NetBIOS name based on machine name. Input: { action : default-ad , } Output: { Workgroup : ADNETHSERVER , Realm : ad.adnethserver.org }","title":"default-ad"},{"location":"api/system-accounts-provider/#validate","text":"","title":"validate"},{"location":"api/system-accounts-provider/#constraints","text":"The action must be specified inside the JSON action field. Example: { action : remote-ldap , ... } Valid actions: remote-ldap local-ad remote-ad change-ad-ip Constraints for remote-ldap : StartTls: can be enabled or disabled Credentials are validate using ldap-credentials system validator Constraints for local-ad : Realm: must be a FQDN, validated using also dcrealm system validator IpAddress: a valid free IP address, validated using also dcipaddr system validator Workgroup: a simple hostname, maximum 15 chars Constraints for change-ad-ip : - IpAddress: a valid free IP address, validated using also dcipaddr system validator Constraints for remote-ad : AdDns: must be a valid IP address or empty, checked also using ad-dns system validator AdRealm: must be a FQDN, checked also using ad-dns system validator AdUsername and AdPassword: not empty, check if credentials are valid","title":"Constraints"},{"location":"api/system-accounts-provider/#input","text":"","title":"Input"},{"location":"api/system-accounts-provider/#remote-ldap","text":"Example: { BindDN : cn=ldapservice,dc=directory,dc=nh , LdapURI : ldaps://192.168.1.1 , DiscoverDcType : dns , StartTls : disabled , Provider : ldap , UserDN : ou=People,dc=directory,dc=nh , GroupDN : ou=Groups,dc=directory,dc=nh , BindPassword : xxxxxxxxxxxxxxxx , BaseDN : dc=directory,dc=nh , action : remoteldap } BindDN and BindPassword password can be left empty if the bind is anonymous.","title":"remote-ldap"},{"location":"api/system-accounts-provider/#local-ad","text":"Input example: { action : local-ad , Realm : ad.local.neth.eu , Workgroup : LOCAL , IpAddress : 192.168.1.35 }","title":"local-ad"},{"location":"api/system-accounts-provider/#change-ad-ip","text":"Input example: { action : change-ad-ip , IpAddress : 192.168.1.35 }","title":"change-ad-ip"},{"location":"api/system-accounts-provider/#remote-ad","text":"Input example: { action : remote-ad , AdRealm : adnethserver.org , AdDns : 192.168.1.1 , AdUsername : administrator@adnethserver.org , AdPassword : mypassword }","title":"remote-ad"},{"location":"api/system-accounts-provider/#update","text":"It takes an action argument, supported actions are: remove-provider local-ldap Input example: { action : remove-provider }","title":"update"},{"location":"api/system-accounts-provider/#local-ldap","text":"Install local LDAP server. Return the output of pkgaction in json format. Output example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Downloading - lm_sensors-libs-3.4.0-4.20160601gitf9185e5.el7.x86_64.rpm } ... { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } Error example: { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } ... { status : failed , message : [InstallError] No package(s) available to install , steps : -1 , event : null }","title":"local-ldap"},{"location":"api/system-accounts-provider/#remote-ldap_1","text":"Configure all the properties for remote LDAP binding, then fire nethserver-sssd-save event.","title":"remote-ldap"},{"location":"api/system-accounts-provider/#remove-provider","text":"Remove the installed local account provider using nethserver-sssd-remove-provider to track the progress.","title":"remove-provider"},{"location":"api/system-accounts-provider/#local-ad_1","text":"Install nethserver-dc, it uses the same input from validate. Return the output of pkgaction in json format.","title":"local-ad"},{"location":"api/system-accounts-provider/#change-ad-ip_1","text":"Change nsdc container IP address.","title":"change-ad-ip"},{"location":"api/system-accounts-provider/#remote-ad_1","text":"Try to join the domain, if the join fails, rollback to previous state. Output the state of all executed events and of netherver-dc package installation (see localldap for the output).","title":"remote-ad"},{"location":"api/system-aliases/","text":"system-alias Read and write system DNS system alias. read List current configured aliases. Output The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] } validate Validate a collection of alias records. Constraints the alias name must be a valid FQDN Input Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate update All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified. Input The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"system-alias"},{"location":"api/system-aliases/#system-alias","text":"Read and write system DNS system alias.","title":"system-alias"},{"location":"api/system-aliases/#read","text":"List current configured aliases.","title":"read"},{"location":"api/system-aliases/#output","text":"The configuration contains an array of alias records (type self from hosts db). Output example: { status : , configuration : [ { props : { Description : }, name : alias1.neth.loc , type : self } ] }","title":"Output"},{"location":"api/system-aliases/#validate","text":"Validate a collection of alias records.","title":"validate"},{"location":"api/system-aliases/#constraints","text":"the alias name must be a valid FQDN","title":"Constraints"},{"location":"api/system-aliases/#input","text":"Use the read output as input. Each record must have the type set to self , the Description field is currently not used. Example: { configuration : [ { props : { Description : }, name : test3.nethserver.org , type : self }, { props : { Description : }, name : test2.nethserver.org , type : self } ] } Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.nethserver.org , type : self }, { props :{ Description : }, name : test2.nethserver.org , type : self }]} | ./validate","title":"Input"},{"location":"api/system-aliases/#update","text":"All alias are destroyed and recreated on update. The helper should be invoked once, after all alias has been modified.","title":"update"},{"location":"api/system-aliases/#input_1","text":"The same from validate helper. Invocation example: echo { configuration : [{ props :{ Description : }, name : test3.neth.eu , type : self }, { props :{ Description : }, name : test2.neth.eu , type : self }]} | ./update","title":"Input"},{"location":"api/system-apps/","text":"system-apps Return information about installed NethServer apps (or modules). read The action field must have one of the following values: list : list all available applications. The list contains only the applications accessible to user running the script. Also legacy installed applications are listed. info : retrieve information of the given application Each application object contains 2 special fields: editable : is set to 1 if the running user is root, 0 otherwise shortcut : is set to 1 if application is inside the shortcut list, 0 otherwise The id field is the name of the RPM package. Input list Example: { action : list } info Example: { action : info , name : nethserver-firewall } Output list Example: [ { icon : icon.png , author : { email : Author s email of NethServer Firewall , url : https://github.com/NethServer/nethserver-firewall , name : Author s name of NethServer Firewall } , bugs : { url : https://github.com/NethServer/dev/issues } , summary : Short description of NethServer Firewall , url : nethserver-firewall , id : nethserver-firewall , name : NethServer Firewall , release : { version : 1.0.0 } , description : Very very very very very long description of NethServer Firewall , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ] , homepage : https://github.com/NethServer/nethserver-firewall , provides : [ nethserver-firewall ] , editable : 1 , screenshots : [ { caption : Login , image : http://my.screenshot.org/login.png } , { caption : Share data , image : http://my.screenshot.org/data.png } ] , shortcut : 1 , legacy : 0 , } , { icon : legacy.png , name : Fail2ban , release : { version : - } , description : - , legacy : 1 , editable : 0 , url : Fail2Ban , id : nethserver-fail2ban , shortcut : 0 } , ... ] info Example: { icon : icon.png , author : { email : Author s email of NethServer Firewall , url : https://github.com/NethServer/nethserver-firewall , name : Author s name of NethServer Firewall }, bugs : { url : https://github.com/NethServer/dev/issues }, summary : Short description of NethServer Firewall , url : nethserver-firewall , id : nethserver-firewall , name : NethServer Firewall , release : { version : 1.0.0 }, description : Very very very very very long description of NethServer Firewall , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ], homepage : https://github.com/NethServer/nethserver-firewall , provides : [ nethserver-firewall ], editable : 1 , screenshots : [ { caption : Login , image : http://my.screenshot.org/login.png }, { caption : Share data , image : http://my.screenshot.org/data.png } ], shortcut : 1 } update Take an action field. Valid actions are: add-shortcut : add given application to left menu remove-shortcut : remove given application form the left menu Input add-shortcut Example: { action : add-shortcut , name : nethserver-firewall } remove-shortcut Example: { action : remove-shortcut , name : nethserver-firewall } Output Each actions return a standard success or error object.","title":"system-apps"},{"location":"api/system-apps/#system-apps","text":"Return information about installed NethServer apps (or modules).","title":"system-apps"},{"location":"api/system-apps/#read","text":"The action field must have one of the following values: list : list all available applications. The list contains only the applications accessible to user running the script. Also legacy installed applications are listed. info : retrieve information of the given application Each application object contains 2 special fields: editable : is set to 1 if the running user is root, 0 otherwise shortcut : is set to 1 if application is inside the shortcut list, 0 otherwise The id field is the name of the RPM package.","title":"read"},{"location":"api/system-apps/#input","text":"","title":"Input"},{"location":"api/system-apps/#list","text":"Example: { action : list }","title":"list"},{"location":"api/system-apps/#info","text":"Example: { action : info , name : nethserver-firewall }","title":"info"},{"location":"api/system-apps/#output","text":"","title":"Output"},{"location":"api/system-apps/#list_1","text":"Example: [ { icon : icon.png , author : { email : Author s email of NethServer Firewall , url : https://github.com/NethServer/nethserver-firewall , name : Author s name of NethServer Firewall } , bugs : { url : https://github.com/NethServer/dev/issues } , summary : Short description of NethServer Firewall , url : nethserver-firewall , id : nethserver-firewall , name : NethServer Firewall , release : { version : 1.0.0 } , description : Very very very very very long description of NethServer Firewall , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ] , homepage : https://github.com/NethServer/nethserver-firewall , provides : [ nethserver-firewall ] , editable : 1 , screenshots : [ { caption : Login , image : http://my.screenshot.org/login.png } , { caption : Share data , image : http://my.screenshot.org/data.png } ] , shortcut : 1 , legacy : 0 , } , { icon : legacy.png , name : Fail2ban , release : { version : - } , description : - , legacy : 1 , editable : 0 , url : Fail2Ban , id : nethserver-fail2ban , shortcut : 0 } , ... ]","title":"list"},{"location":"api/system-apps/#info_1","text":"Example: { icon : icon.png , author : { email : Author s email of NethServer Firewall , url : https://github.com/NethServer/nethserver-firewall , name : Author s name of NethServer Firewall }, bugs : { url : https://github.com/NethServer/dev/issues }, summary : Short description of NethServer Firewall , url : nethserver-firewall , id : nethserver-firewall , name : NethServer Firewall , release : { version : 1.0.0 }, description : Very very very very very long description of NethServer Firewall , license : GPL-3.0 , tags : [ tag1 , tag2 , tag3 ], homepage : https://github.com/NethServer/nethserver-firewall , provides : [ nethserver-firewall ], editable : 1 , screenshots : [ { caption : Login , image : http://my.screenshot.org/login.png }, { caption : Share data , image : http://my.screenshot.org/data.png } ], shortcut : 1 }","title":"info"},{"location":"api/system-apps/#update","text":"Take an action field. Valid actions are: add-shortcut : add given application to left menu remove-shortcut : remove given application form the left menu","title":"update"},{"location":"api/system-apps/#input_1","text":"","title":"Input"},{"location":"api/system-apps/#add-shortcut","text":"Example: { action : add-shortcut , name : nethserver-firewall }","title":"add-shortcut"},{"location":"api/system-apps/#remove-shortcut","text":"Example: { action : remove-shortcut , name : nethserver-firewall }","title":"remove-shortcut"},{"location":"api/system-apps/#output_1","text":"Each actions return a standard success or error object.","title":"Output"},{"location":"api/system-authorization/","text":"system-authorization Read the list of modules accessible by the user. read Output It returns the list of enabled modules for the user. isRoot ('1' or '0'), validate that the user is root . isAdmin('1' or '0'), validate that the user is member of the group domain admins (root returns '1'). Example: { system : [ storage , disk-usage , certificates , dns , services , users-groups , network , ssh , tls-policy , trusted-networks , logs , wizard , applications , software-center ], status : { isRoot : 1 , isAdmin : 1 }, applications : [ nethserver-nextcloud ] } validate Check if a user has access to a given module. Constraints the user must belong to a group with permission to access the module action field can be check-system or check-app Input Valid actions are listed below. check-system Check if the user can access given system module. Example: { action : check-system , name : dns } check-app Check if the user can access given application. Example: { action : check-app , name : nethserver-nextcloud }","title":"system-authorization"},{"location":"api/system-authorization/#system-authorization","text":"Read the list of modules accessible by the user.","title":"system-authorization"},{"location":"api/system-authorization/#read","text":"","title":"read"},{"location":"api/system-authorization/#output","text":"It returns the list of enabled modules for the user. isRoot ('1' or '0'), validate that the user is root . isAdmin('1' or '0'), validate that the user is member of the group domain admins (root returns '1'). Example: { system : [ storage , disk-usage , certificates , dns , services , users-groups , network , ssh , tls-policy , trusted-networks , logs , wizard , applications , software-center ], status : { isRoot : 1 , isAdmin : 1 }, applications : [ nethserver-nextcloud ] }","title":"Output"},{"location":"api/system-authorization/#validate","text":"Check if a user has access to a given module.","title":"validate"},{"location":"api/system-authorization/#constraints","text":"the user must belong to a group with permission to access the module action field can be check-system or check-app","title":"Constraints"},{"location":"api/system-authorization/#input","text":"Valid actions are listed below.","title":"Input"},{"location":"api/system-authorization/#check-system","text":"Check if the user can access given system module. Example: { action : check-system , name : dns }","title":"check-system"},{"location":"api/system-authorization/#check-app","text":"Check if the user can access given application. Example: { action : check-app , name : nethserver-nextcloud }","title":"check-app"},{"location":"api/system-backup/","text":"system-backup Manage configuration and data backup. read Input The read API requires an action field. Valid actions: backup-info list-disks last-log running-info remapping-backup-config Example: { action : list-disks } backup-info Return status and configuration of all backups. Example: { action : backup-info } list-disks List attached disks which can be used for the backup. Example: { action : list-disks } last-log Return the content of most recent log of the given log. The name field must contain the backup name. Example: { action : last-log , name : local119 } running-info Check if there are backups running in background. Example: { action : running-info } remapping-backup-config Check if the backup to be restored needs network remapping. The data backup can contain multiple information based on the mode field. The mode field can be: url : retrieve the backup from given url. The data field contains a valid HTTP url. file : retrieve the backup from the uploaded file. The data field contains the uploaded file in base64 format. backup : retrieve the backup from local configuration backup history. The data field contains the name of the backup, like c00 . Example: { action : restore-backup-config , mode : backup , data : c00 } Output backup-info The output is composed by configuration and status fields. Both fields contain backup-data and backup-config fields. The ready field is set to 1 if the backup is configured and ready to be executed. Output example { status : { backup-config : [ ... { push_ts : 1539015800 , original_ts : 1539015799 , disk_ts : 1539015800 , description : @18:23 , size : 31264 , Release : final , Version : 7.5.1804 , type : cron , id : c02 , ProductName : NethServer }, ... ], backup-data : [ ... { id : local119sftp , log : /var/log/backup/backup-local119sftp-201807050800.log , last-run : 1539088300 , result : success , destination : { used : 2472765161472 , percentage : 83 , total : 2948785504256 } } ... ] }, configuration : { backup-config : { HistoryLength : 3 }, backup-data : { backups : [ ... { custom-excludes : [], props : { SftpDirectory : /mnt/local119sftp , NotifyFrom : , VFSType : sftp , SftpHost : 192.168.1.119 , status : disabled , NotifyTo : root@localhost , CleanupOlderThan : default , SftpPort : 22 , Notify : error , SftpUser : root , type : rsync , BackupTime : 0 8 * * * }, custom-includes : [ /root ], name : local119sftp , ready : 1 , type : backup } ... ], defaults : { IncludeLogs : enabled , custom-excludes : [], custom-includes : [ ... /var/spool/anacron/cron.daily ... ], excludes : [ ... /var/lib/nethserver/db , ... ], includes : [ ... /var/spool/anacron/cron.daily , ... ] } } } } Fields explanation for status section: backup-config : list of all available configuration backups backup-data : list of all executed data backup, result field can be success , fail or unknown Fields explanation for configuration section: backup-config : contains only HistoryLength , number of configuration backups to be kept backup-data : contains 2 fields backups : list of esmith records from backups database, extra fields custom-excludes and custom-includes contains the list of exclude and include from /etc/backup-data/ backup_name .exclude and /etc/backup-data/ backup_name .include defaults : list of custom-excludes , custom-includes , excludes , includes common to all backups list-disks List all disks without a mounted partition. If the disk alredy has a formatted partition, the formatted flag is set to 1, othwerise is set to 0. Example: [ { formatted : 1 , model : Flash Disk , name : sdb , partitions : [ { label : backup , fstype : ext3 , size : 2011426304 } ], size : 2013265920 , vendor : Generic } ] last-log Example: { data : Backup: local119\\nBackup started at .... } running-info It indicates if there are background jobs (restore-data or backup-data) started by the UI. Example: { restore-data : 0 , backup-data : 1 } remapping-backup-config The remap field is set to 1 if remap is needed, 0 otherwise. The current field contains the list of ethernet interfaces present inside the system, while restore field contains the list of ethernet interfaces from the backup. Example: { remap : 1 , current : [ { nslabel : , name : enp0s3 , role : bridged , ipaddr : } ], restore : [ { nslabel : , name : eth0 , role : green , ipaddr : 1.2.3.4 } ] } validate Constraints The request must contain an action field. Valid actions are: create-backup-data update-backup-data update-backup-config sftp-credentials b2-credentials s3-credentials nfs-credentials cifs-credentials webdav-credentials disk-access Constraints for create-backup-data : name: should be a unique simple identifier like a unix username status and IncludeLogs: can be enabled or disabled VFSType: can be nfs , cifs , usb , b2 , s3 , sftp engine: can be restic , duplicity or rsync Notify: can be error , always or never BackupTime: should be non-empty, a valid time for crontab (only limited validation has been implemented) Prune (only if engine is restic ): can be always or a day of week number between 0 (Sunday) and 7 (Saturday) Type (only if engine is duplicity ): can be full or incremental FullDay (only if engine is duplicity ): day of week number between 0 (Sunday) and 7 (Saturday) VolSize (only if engine is duplicity ): must be a number greater than 1 CleanupOlderThan: can be never , 7D , 14D , 28D , 56D , 168D , 364D USBLabel (only if VFSType is usb ): not empty SMBShare (only if VFSType is cifs ): not empty SMBHost (only if VFSType is cifs ): an IP or a host name SMBLogin, SMBPassword (only if VFSType is cifs ): anything NFSShare (only if VFSType is `nfs): not empty NFSHost (only if VFSType is nfs ): an IP or a host name SftpDirectory, SftpUser, SftpPassword (only if VFSType is sftp ): not empty SftpHost (only if VFSType is sftp ): an IP or a host name SftpPort (only if VFSType is sftp ): TCP port number S3AccessKey, S3Bucket, S3SecretKey, S3Host (only if VFSType is s3 ): not empty B2AccountId, B2AccountKey, B2Bucket (only if VFSType is b3 ): not empty Constraints for update-backup-data : same constraints from create-backup , but the name must be an existing record Constraints for update-backup-config : HistoryLength: integer between 1 and 32 Constraints for sftp-credentials SftpDirectory, SftpUser, SftpPassword, SftpHost, SftpPort: not empty Constraints for b2-credentials : B2AccountId, B2AccountKey, B2Bucket: not empty Constraints for s3-credentials : 3AccessKey, S3Bucket, S3SecretKey, S3Host: not empty Constraints for nfs-credentials : NFSShare: not empty NFSHost: an IP or a host name Constraints for cifs-credentials : SMBShare: not empty SMBHost: an IP or a host name SMBLogin, SMBPassword: anything Constraints for webdav-credentials : WebDAVUrl: not empty WebDAVLogin, WebDAVPassword: anything Constraints for disk-access : USBLabel: not empty Input create-backup-data Example: { action : create-backup , name : test , engine : duplicity , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : nfs , SMBShare : mybackup , SMBHost : 192.168.1.1 , SMBLogin : mybackupuser , SMBPassord : password , Type : incremental , FullDay : 0 , VolSize : 250 , CleanupOlderThan : 28D } Invocation example with sftp and rsync: echo { action : create-backup-data , name : test3 , engine : rsync , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : sftp , SftpHost : 192.168.5.229 , SftpUser : root , SftpPassword : Nethesis,1234 , SftpDirectory : /tmp/test , SftpPort :22} | /usr/libexec/nethserver/api/system-backup/create update-backup-data Same as create-backup-data update-backup-config Example: { action : update-backup-config , HistoryLength : 4 } sftp-credentials Example: { action : sftp-credentials , SftpHost : my.remote.host , SftpPort : 22 , SftpUser : backupuser , SftpPassword : MyPassw0rd , SftpDirectory : /srv/backup } b2-credentials Example: { action : b2-credentials , B2AccountId : xxxxxxxxxxxxxxxxxxxxxxxxx , B2AccountKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , B2Bucket : mybackup } s3-credentials Example: { action : s3-credentials , S3AccessKey : xxxxxxxxxxxxxxxxxxxx , S3Bucket : mybackup , S3SecretKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , S3Host : s3.amazonaws.com } nfs-credentials Example: { action : nfs-credentials , NFSHost : 192.168.1.1 , NFSShare : /mybackup } cifs-credentials Example: { action : cifs-credentials , SMBHost : 192.168.1.1 , SMBShare : mybackup , SMBLogin : myuser , SMBPassword : mypass } webdav-credentials Example: { action : webdav-credentials , WebDAVLogin : myuser , WebDAVPassword : mypass , WebDAVUrl : https//nextcloud.nethserver.org/nextcloud/remote.php/webdav/ } disk-access Example: { action : disk-access , USBLabel : backup } update update-backup-data Use the same input from validate. update-backup-config Use the same input from validate. backup-data-contents Change include and execludes of all data backups. Input example: { action : backup-data-contents , custom-includes : [ file1 , file2 ], custom-excludes : [ file1 , file2 ], IncludeLogs : enabled } create create-backup-data Use the same input from validate. delete Available actions are: backup-config backup-data backup-config Delete the archive of given configuration backup. The name field must contain the backup id. Input example: { action : backup-config , name : c00 } backup-data Delete the configuration of given backup data. The name field must contain the backup name. Input example: { action : backup-data , name : mybackup } execute This is a special API which executes system commands and displays the raw (non-JSON) output. Available actions: format-disk run-backup-data run-backup-config download-backup-config restore-backup-config restore-backup-data Input format-disk Format the given disk. The name field must contain the disk name. Example: { action : format-disk , name : sdb } Invocation example: echo { action : format-disk , name : sdb } | /usr/libexec/nethserver/api/system-backup/execute run-backup-data Execute the given backup. The name field must contain the backup name. Example: { action : run-backup-data , name : mybackup } run-backup-config Execute a configuration backup. The name field should contain a description for the backup; the field is mandatory but can be empty. Example: { action : run-backup-config , name : mybackup } download-backup-config Download the selected configuration backup from local history. The name field should contain the name of the backup. Example: { action : download-backup-config , name : c00 } restore-backup-config Execute a configuration restore. The InstallPackages field can be enabled or disabled . The data backup can contain multiple information based on the mode field. The mode field can be: url : retrieve the backup from given url. The data field contains a valid HTTP url. file : retrieve the backup from the uploaded file. The data field contains the uploaded file in base64 format. backup : retrieve the backup from local configuration backup history. The data field contains the name of the backup, like c00 . The remap field can contain a map of network interfaces to remap at the end of the restore. Example: { action : restore-backup-config , InstallPackages : enabled , mode : backup , remap : { eth0 : enp0s1 } data : c00 } restore-backup-data Execute a data restore in background using a systemd unit. The name field should contain the name of data backup to restore. Example: { action : restore-backup-data , name : mybackup } Output format-disk Raw output from paritioning and formatting tools. run-backup-data No relevant output. The backup is started using a systemd transient unit. run-backup-config No output. restore-backup-config Mimic event output. restore-backup-data No output.","title":"system-backup"},{"location":"api/system-backup/#system-backup","text":"Manage configuration and data backup.","title":"system-backup"},{"location":"api/system-backup/#read","text":"","title":"read"},{"location":"api/system-backup/#input","text":"The read API requires an action field. Valid actions: backup-info list-disks last-log running-info remapping-backup-config Example: { action : list-disks }","title":"Input"},{"location":"api/system-backup/#backup-info","text":"Return status and configuration of all backups. Example: { action : backup-info }","title":"backup-info"},{"location":"api/system-backup/#list-disks","text":"List attached disks which can be used for the backup. Example: { action : list-disks }","title":"list-disks"},{"location":"api/system-backup/#last-log","text":"Return the content of most recent log of the given log. The name field must contain the backup name. Example: { action : last-log , name : local119 }","title":"last-log"},{"location":"api/system-backup/#running-info","text":"Check if there are backups running in background. Example: { action : running-info }","title":"running-info"},{"location":"api/system-backup/#remapping-backup-config","text":"Check if the backup to be restored needs network remapping. The data backup can contain multiple information based on the mode field. The mode field can be: url : retrieve the backup from given url. The data field contains a valid HTTP url. file : retrieve the backup from the uploaded file. The data field contains the uploaded file in base64 format. backup : retrieve the backup from local configuration backup history. The data field contains the name of the backup, like c00 . Example: { action : restore-backup-config , mode : backup , data : c00 }","title":"remapping-backup-config"},{"location":"api/system-backup/#output","text":"","title":"Output"},{"location":"api/system-backup/#backup-info_1","text":"The output is composed by configuration and status fields. Both fields contain backup-data and backup-config fields. The ready field is set to 1 if the backup is configured and ready to be executed. Output example { status : { backup-config : [ ... { push_ts : 1539015800 , original_ts : 1539015799 , disk_ts : 1539015800 , description : @18:23 , size : 31264 , Release : final , Version : 7.5.1804 , type : cron , id : c02 , ProductName : NethServer }, ... ], backup-data : [ ... { id : local119sftp , log : /var/log/backup/backup-local119sftp-201807050800.log , last-run : 1539088300 , result : success , destination : { used : 2472765161472 , percentage : 83 , total : 2948785504256 } } ... ] }, configuration : { backup-config : { HistoryLength : 3 }, backup-data : { backups : [ ... { custom-excludes : [], props : { SftpDirectory : /mnt/local119sftp , NotifyFrom : , VFSType : sftp , SftpHost : 192.168.1.119 , status : disabled , NotifyTo : root@localhost , CleanupOlderThan : default , SftpPort : 22 , Notify : error , SftpUser : root , type : rsync , BackupTime : 0 8 * * * }, custom-includes : [ /root ], name : local119sftp , ready : 1 , type : backup } ... ], defaults : { IncludeLogs : enabled , custom-excludes : [], custom-includes : [ ... /var/spool/anacron/cron.daily ... ], excludes : [ ... /var/lib/nethserver/db , ... ], includes : [ ... /var/spool/anacron/cron.daily , ... ] } } } } Fields explanation for status section: backup-config : list of all available configuration backups backup-data : list of all executed data backup, result field can be success , fail or unknown Fields explanation for configuration section: backup-config : contains only HistoryLength , number of configuration backups to be kept backup-data : contains 2 fields backups : list of esmith records from backups database, extra fields custom-excludes and custom-includes contains the list of exclude and include from /etc/backup-data/ backup_name .exclude and /etc/backup-data/ backup_name .include defaults : list of custom-excludes , custom-includes , excludes , includes common to all backups","title":"backup-info"},{"location":"api/system-backup/#list-disks_1","text":"List all disks without a mounted partition. If the disk alredy has a formatted partition, the formatted flag is set to 1, othwerise is set to 0. Example: [ { formatted : 1 , model : Flash Disk , name : sdb , partitions : [ { label : backup , fstype : ext3 , size : 2011426304 } ], size : 2013265920 , vendor : Generic } ]","title":"list-disks"},{"location":"api/system-backup/#last-log_1","text":"Example: { data : Backup: local119\\nBackup started at .... }","title":"last-log"},{"location":"api/system-backup/#running-info_1","text":"It indicates if there are background jobs (restore-data or backup-data) started by the UI. Example: { restore-data : 0 , backup-data : 1 }","title":"running-info"},{"location":"api/system-backup/#remapping-backup-config_1","text":"The remap field is set to 1 if remap is needed, 0 otherwise. The current field contains the list of ethernet interfaces present inside the system, while restore field contains the list of ethernet interfaces from the backup. Example: { remap : 1 , current : [ { nslabel : , name : enp0s3 , role : bridged , ipaddr : } ], restore : [ { nslabel : , name : eth0 , role : green , ipaddr : 1.2.3.4 } ] }","title":"remapping-backup-config"},{"location":"api/system-backup/#validate","text":"","title":"validate"},{"location":"api/system-backup/#constraints","text":"The request must contain an action field. Valid actions are: create-backup-data update-backup-data update-backup-config sftp-credentials b2-credentials s3-credentials nfs-credentials cifs-credentials webdav-credentials disk-access Constraints for create-backup-data : name: should be a unique simple identifier like a unix username status and IncludeLogs: can be enabled or disabled VFSType: can be nfs , cifs , usb , b2 , s3 , sftp engine: can be restic , duplicity or rsync Notify: can be error , always or never BackupTime: should be non-empty, a valid time for crontab (only limited validation has been implemented) Prune (only if engine is restic ): can be always or a day of week number between 0 (Sunday) and 7 (Saturday) Type (only if engine is duplicity ): can be full or incremental FullDay (only if engine is duplicity ): day of week number between 0 (Sunday) and 7 (Saturday) VolSize (only if engine is duplicity ): must be a number greater than 1 CleanupOlderThan: can be never , 7D , 14D , 28D , 56D , 168D , 364D USBLabel (only if VFSType is usb ): not empty SMBShare (only if VFSType is cifs ): not empty SMBHost (only if VFSType is cifs ): an IP or a host name SMBLogin, SMBPassword (only if VFSType is cifs ): anything NFSShare (only if VFSType is `nfs): not empty NFSHost (only if VFSType is nfs ): an IP or a host name SftpDirectory, SftpUser, SftpPassword (only if VFSType is sftp ): not empty SftpHost (only if VFSType is sftp ): an IP or a host name SftpPort (only if VFSType is sftp ): TCP port number S3AccessKey, S3Bucket, S3SecretKey, S3Host (only if VFSType is s3 ): not empty B2AccountId, B2AccountKey, B2Bucket (only if VFSType is b3 ): not empty Constraints for update-backup-data : same constraints from create-backup , but the name must be an existing record Constraints for update-backup-config : HistoryLength: integer between 1 and 32 Constraints for sftp-credentials SftpDirectory, SftpUser, SftpPassword, SftpHost, SftpPort: not empty Constraints for b2-credentials : B2AccountId, B2AccountKey, B2Bucket: not empty Constraints for s3-credentials : 3AccessKey, S3Bucket, S3SecretKey, S3Host: not empty Constraints for nfs-credentials : NFSShare: not empty NFSHost: an IP or a host name Constraints for cifs-credentials : SMBShare: not empty SMBHost: an IP or a host name SMBLogin, SMBPassword: anything Constraints for webdav-credentials : WebDAVUrl: not empty WebDAVLogin, WebDAVPassword: anything Constraints for disk-access : USBLabel: not empty","title":"Constraints"},{"location":"api/system-backup/#input_1","text":"","title":"Input"},{"location":"api/system-backup/#create-backup-data","text":"Example: { action : create-backup , name : test , engine : duplicity , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : nfs , SMBShare : mybackup , SMBHost : 192.168.1.1 , SMBLogin : mybackupuser , SMBPassord : password , Type : incremental , FullDay : 0 , VolSize : 250 , CleanupOlderThan : 28D } Invocation example with sftp and rsync: echo { action : create-backup-data , name : test3 , engine : rsync , status : enabled , Notify : error , IncludeLogs : disabled , BackupTime : 5 0 * 8 * , VFSType : sftp , SftpHost : 192.168.5.229 , SftpUser : root , SftpPassword : Nethesis,1234 , SftpDirectory : /tmp/test , SftpPort :22} | /usr/libexec/nethserver/api/system-backup/create","title":"create-backup-data"},{"location":"api/system-backup/#update-backup-data","text":"Same as create-backup-data","title":"update-backup-data"},{"location":"api/system-backup/#update-backup-config","text":"Example: { action : update-backup-config , HistoryLength : 4 }","title":"update-backup-config"},{"location":"api/system-backup/#sftp-credentials","text":"Example: { action : sftp-credentials , SftpHost : my.remote.host , SftpPort : 22 , SftpUser : backupuser , SftpPassword : MyPassw0rd , SftpDirectory : /srv/backup }","title":"sftp-credentials"},{"location":"api/system-backup/#b2-credentials","text":"Example: { action : b2-credentials , B2AccountId : xxxxxxxxxxxxxxxxxxxxxxxxx , B2AccountKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , B2Bucket : mybackup }","title":"b2-credentials"},{"location":"api/system-backup/#s3-credentials","text":"Example: { action : s3-credentials , S3AccessKey : xxxxxxxxxxxxxxxxxxxx , S3Bucket : mybackup , S3SecretKey : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx , S3Host : s3.amazonaws.com }","title":"s3-credentials"},{"location":"api/system-backup/#nfs-credentials","text":"Example: { action : nfs-credentials , NFSHost : 192.168.1.1 , NFSShare : /mybackup }","title":"nfs-credentials"},{"location":"api/system-backup/#cifs-credentials","text":"Example: { action : cifs-credentials , SMBHost : 192.168.1.1 , SMBShare : mybackup , SMBLogin : myuser , SMBPassword : mypass }","title":"cifs-credentials"},{"location":"api/system-backup/#webdav-credentials","text":"Example: { action : webdav-credentials , WebDAVLogin : myuser , WebDAVPassword : mypass , WebDAVUrl : https//nextcloud.nethserver.org/nextcloud/remote.php/webdav/ }","title":"webdav-credentials"},{"location":"api/system-backup/#disk-access","text":"Example: { action : disk-access , USBLabel : backup }","title":"disk-access"},{"location":"api/system-backup/#update","text":"","title":"update"},{"location":"api/system-backup/#update-backup-data_1","text":"Use the same input from validate.","title":"update-backup-data"},{"location":"api/system-backup/#update-backup-config_1","text":"Use the same input from validate.","title":"update-backup-config"},{"location":"api/system-backup/#backup-data-contents","text":"Change include and execludes of all data backups. Input example: { action : backup-data-contents , custom-includes : [ file1 , file2 ], custom-excludes : [ file1 , file2 ], IncludeLogs : enabled }","title":"backup-data-contents"},{"location":"api/system-backup/#create","text":"","title":"create"},{"location":"api/system-backup/#create-backup-data_1","text":"Use the same input from validate.","title":"create-backup-data"},{"location":"api/system-backup/#delete","text":"Available actions are: backup-config backup-data","title":"delete"},{"location":"api/system-backup/#backup-config","text":"Delete the archive of given configuration backup. The name field must contain the backup id. Input example: { action : backup-config , name : c00 }","title":"backup-config"},{"location":"api/system-backup/#backup-data","text":"Delete the configuration of given backup data. The name field must contain the backup name. Input example: { action : backup-data , name : mybackup }","title":"backup-data"},{"location":"api/system-backup/#execute","text":"This is a special API which executes system commands and displays the raw (non-JSON) output. Available actions: format-disk run-backup-data run-backup-config download-backup-config restore-backup-config restore-backup-data","title":"execute"},{"location":"api/system-backup/#input_2","text":"","title":"Input"},{"location":"api/system-backup/#format-disk","text":"Format the given disk. The name field must contain the disk name. Example: { action : format-disk , name : sdb } Invocation example: echo { action : format-disk , name : sdb } | /usr/libexec/nethserver/api/system-backup/execute","title":"format-disk"},{"location":"api/system-backup/#run-backup-data","text":"Execute the given backup. The name field must contain the backup name. Example: { action : run-backup-data , name : mybackup }","title":"run-backup-data"},{"location":"api/system-backup/#run-backup-config","text":"Execute a configuration backup. The name field should contain a description for the backup; the field is mandatory but can be empty. Example: { action : run-backup-config , name : mybackup }","title":"run-backup-config"},{"location":"api/system-backup/#download-backup-config","text":"Download the selected configuration backup from local history. The name field should contain the name of the backup. Example: { action : download-backup-config , name : c00 }","title":"download-backup-config"},{"location":"api/system-backup/#restore-backup-config","text":"Execute a configuration restore. The InstallPackages field can be enabled or disabled . The data backup can contain multiple information based on the mode field. The mode field can be: url : retrieve the backup from given url. The data field contains a valid HTTP url. file : retrieve the backup from the uploaded file. The data field contains the uploaded file in base64 format. backup : retrieve the backup from local configuration backup history. The data field contains the name of the backup, like c00 . The remap field can contain a map of network interfaces to remap at the end of the restore. Example: { action : restore-backup-config , InstallPackages : enabled , mode : backup , remap : { eth0 : enp0s1 } data : c00 }","title":"restore-backup-config"},{"location":"api/system-backup/#restore-backup-data","text":"Execute a data restore in background using a systemd unit. The name field should contain the name of data backup to restore. Example: { action : restore-backup-data , name : mybackup }","title":"restore-backup-data"},{"location":"api/system-backup/#output_1","text":"","title":"Output"},{"location":"api/system-backup/#format-disk_1","text":"Raw output from paritioning and formatting tools.","title":"format-disk"},{"location":"api/system-backup/#run-backup-data_1","text":"No relevant output. The backup is started using a systemd transient unit.","title":"run-backup-data"},{"location":"api/system-backup/#run-backup-config_1","text":"No output.","title":"run-backup-config"},{"location":"api/system-backup/#restore-backup-config_1","text":"Mimic event output.","title":"restore-backup-config"},{"location":"api/system-backup/#restore-backup-data_1","text":"No output.","title":"restore-backup-data"},{"location":"api/system-certificate/","text":"system-certificate Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate read Input It takes a mandatory action argument. list List all available certificates. Example: { action : list } info To retrieve a certificate, pass the name parameter to the read helper. Example: { action : info , name : /etc/pki/tls/certs/NSRV.crt } Output list Internally, the helper calls /usr/libexec/nethserver/cert-list . Output current pki configuration and the list of existing certificates. If some pki properties are empty, system defaults will be used to fill the returned object. Example: { status : , configuration : { pki : { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : , OrganizationalUnitName : }, name : pki , type : configuration }, certificates : [ { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , default : 1 , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } ] } } info Internally, the helper calls /usr/libexec/nethserver/pki-info . Output is base64 encoded: { certificate : Q2Vyd .... } validate Constraints Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: empty or valid mail address SubjectAltName: comma-separated list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separated list of FQDNs LetsEncryptRenewDays: and integer greater than 10 and lower than 90 Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy Input self-signed action must be set to self-signed pki record in json format Example: { props : { SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : }, action : self-signed } Invocation example: echo { props :{ SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : myoffice }, action : self-signed } | ./update lets-encrypt Manfatory fields: action must be set to lets-encrypt LetsEncryptMail LetsEncryptDomains LetsEncryptRenewDays Example: { props : { LetsEncryptMail : , LetsEncryptDomains : test.local.net , LetsEncryptRenewDays : 30 , }, action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field. upload Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } } update Available actions: self-signed lets-encrypt upload set-default self-signed Same input from validate. lets-encrypt Same input from validate. upload Same input from validate. set-default Mandatory fields: CrtFile , KeyFile and ChainFile . The ChainFile field can be empty. Input example: { action : set-default , props : { KeyFile : /etc/pki/tls/private/NSRV.key , CrtFile : /etc/pki/tls/certs/NSRV.crt , ChainFile : } }","title":"system-certificate"},{"location":"api/system-certificate/#system-certificate","text":"Manage system certificates. Supported operations: list certificates show certificate content configure Let's Encrypt configure self-signed certificate set default certificate","title":"system-certificate"},{"location":"api/system-certificate/#read","text":"","title":"read"},{"location":"api/system-certificate/#input","text":"It takes a mandatory action argument.","title":"Input"},{"location":"api/system-certificate/#list","text":"List all available certificates. Example: { action : list }","title":"list"},{"location":"api/system-certificate/#info","text":"To retrieve a certificate, pass the name parameter to the read helper. Example: { action : info , name : /etc/pki/tls/certs/NSRV.crt }","title":"info"},{"location":"api/system-certificate/#output","text":"","title":"Output"},{"location":"api/system-certificate/#list_1","text":"Internally, the helper calls /usr/libexec/nethserver/cert-list . Output current pki configuration and the list of existing certificates. If some pki properties are empty, system defaults will be used to fill the returned object. Example: { status : , configuration : { pki : { props : { LetsEncryptMail : , SubjectAltName : , KeyFile : , CrtFile : , State : , EmailAddress : , ChainFile : , Organization : , CertificateDuration : 3650 , Locality : , LetsEncryptDomains : , CommonName : , LetsEncryptRenewDays : 30 , LetsEncrypt : disabled , CountryCode : , OrganizationalUnitName : }, name : pki , type : configuration }, certificates : [ { cn : NethServer, O=Example Org, ST=SomeState, OU=Main , file : /etc/pki/tls/certs/NSRV.crt , issuer : NethServer, O=Example Org, ST=SomeState, OU=Main , default : 1 , key : /etc/pki/tls/private/NSRV.key , chain : , expiration_t : 1795129200 , expired : 0 } ] } }","title":"list"},{"location":"api/system-certificate/#info_1","text":"Internally, the helper calls /usr/libexec/nethserver/pki-info . Output is base64 encoded: { certificate : Q2Vyd .... }","title":"info"},{"location":"api/system-certificate/#validate","text":"","title":"validate"},{"location":"api/system-certificate/#constraints","text":"Validate 3 different actions: lets-encrypt upload self-signed The action must be specified inside the JSON action field. Example: { action : upload , ... } Constraints for self-signed : CountryCode: empty or 2 letters State, Locality, Organization, OrganizationalUnitName, CommonName: valid x509 fields EmailAddress: empty or valid mail address SubjectAltName: comma-separated list of FQDNs Constraints for lets-encrypt : LetsEncryptMail: empty or valid mail address LetsEncryptDomains: comma-separated list of FQDNs LetsEncryptRenewDays: and integer greater than 10 and lower than 90 Check all Let's Encrypt conditions are met Constraints for upload : certificate: valid x509 certificate chain: valid x509 certificate key: valid key for running tlspolicy","title":"Constraints"},{"location":"api/system-certificate/#input_1","text":"","title":"Input"},{"location":"api/system-certificate/#self-signed","text":"action must be set to self-signed pki record in json format Example: { props : { SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : }, action : self-signed } Invocation example: echo { props :{ SubjectAltName : t1.test.net,t2.test.net , State : myState , EmailAddress : , Organization : My company , CertificateDuration : 3650 , Locality : , CommonName : , CountryCode : it , OrganizationalUnitName : myoffice }, action : self-signed } | ./update","title":"self-signed"},{"location":"api/system-certificate/#lets-encrypt","text":"Manfatory fields: action must be set to lets-encrypt LetsEncryptMail LetsEncryptDomains LetsEncryptRenewDays Example: { props : { LetsEncryptMail : , LetsEncryptDomains : test.local.net , LetsEncryptRenewDays : 30 , }, action : lets-encrypt } Warning: the UI shouldn't change the LetsEncrypt field.","title":"lets-encrypt"},{"location":"api/system-certificate/#upload","text":"Format: action must be set to upload name is mandatory and set the name for the uploaded certs certificate , key and chain must contain base64 encoded data the chain field can be empty { action : upload , files : { name : mycert , certificate : ... , key : ... , chain : ... } }","title":"upload"},{"location":"api/system-certificate/#update","text":"Available actions: self-signed lets-encrypt upload set-default","title":"update"},{"location":"api/system-certificate/#self-signed_1","text":"Same input from validate.","title":"self-signed"},{"location":"api/system-certificate/#lets-encrypt_1","text":"Same input from validate.","title":"lets-encrypt"},{"location":"api/system-certificate/#upload_1","text":"Same input from validate.","title":"upload"},{"location":"api/system-certificate/#set-default","text":"Mandatory fields: CrtFile , KeyFile and ChainFile . The ChainFile field can be empty. Input example: { action : set-default , props : { KeyFile : /etc/pki/tls/private/NSRV.key , CrtFile : /etc/pki/tls/certs/NSRV.crt , ChainFile : } }","title":"set-default"},{"location":"api/system-company/","text":"system-company Read and set OrganizationContact record from configuration db. read Output The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } } validate Constraints Company must not empty Input Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } update Same input from validate helper.","title":"system-company"},{"location":"api/system-company/#system-company","text":"Read and set OrganizationContact record from configuration db.","title":"system-company"},{"location":"api/system-company/#read","text":"","title":"read"},{"location":"api/system-company/#output","text":"The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration } }","title":"Output"},{"location":"api/system-company/#validate","text":"","title":"validate"},{"location":"api/system-company/#constraints","text":"Company must not empty","title":"Constraints"},{"location":"api/system-company/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { Department : Main , Street : 123 Main Street , PhoneNumber : 575-1685 , City : Hometown , State : , CountryCode : , Company : Example Org }, name : OrganizationContact , type : configuration }","title":"Input"},{"location":"api/system-company/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-dhcp/","text":"system-dhcp Manage DHCP configuration for DNSMasq. read Output Inside the configuration field return: reservations : all configured reservation records from the hosts ranges : the list of green and blue interfaces with relative DHCP configuration. If DHCP is not configured for an interface, the status prop is set to disabled , DhcpRangeEnd and DhcpRangeStart are set to a reasonable default. { status : [ { ip : 192.168.1.20 , mac : xx:xx:xx:xx:xx:xx , expire : 1539081950 , name : myhost , client : xxxxxxxxxxxxxxx }, ... ], configuration : { ranges : [ { name : br0 , type : range , props : { DhcpTFTP : , status : disabled , DhcpDNS : , DhcpDomain : , DhcpLeaseTime : , DhcpRangeStart : 192.168.1.1 , DhcpWINS : , DhcpRangeEnd : 192.168.1.254 , DhcpGatewayIP : , DhcpNTP : } } ], reservations : [ { name : mypc , type : local , props : { MacAddress : xx:xx:xx:xx:xx:xx , IpAddress : 192.168.1.104 , Description : My PC , type : local } }, ... ] } } validate Constraints The request must contain an action field. Valid actions are: create-reservation update-reservation Constraints for create-reservation IpAddress: must be a valid IP address MacAddress: must be a valid mac address name: muse be simple hostname all parameters are also validated against \"dhcp-reservation\" platform validator Constraints for update-reservation : name: must be unique inside the hosts db same constraints from create-reservation Constraints for update-range : name: must be an existing network interface DhcpRangeStart: a valid IP, lower than maximum range and lower than DhcpRangeEnd DhcpRangeEnd: a valid IP, greater than minimum range and greater than DhcpRangeStart DhcpLeaseTime: positive integer or empty DhcpDomain: domain or empty DhcpDNS, 'DhcpWINS, DhcpNTP, DhcpTFTP: a valid IP or empty Input create-reservation Example: { action : create-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : } update-reservation Example: { action : update-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : } update-range Example: { action : update-range , DhcpRangeStart : 192.168.1.10 , DhcpRangeEnd : 192.168.1.50 , name : br0 , status : enabled , DhcpGatewayIP : , DhcpLeaseTime : , DhcpDomain : , DhcpDNS : , DhcpWINS : , DhcpNTP : , DhcpTFTP : } update update-reservation Use the same input from validate. update-range Use the same input from validate. create create-reservation Use the same input from validate. delete delete-range Delete the given range. The name field must contain the interface name. Input example: { name : br0 } delete-reservation Delete the given reservation. Pass the the key to be deleted inside the name field. Example: { name : myhost }","title":"system-dhcp"},{"location":"api/system-dhcp/#system-dhcp","text":"Manage DHCP configuration for DNSMasq.","title":"system-dhcp"},{"location":"api/system-dhcp/#read","text":"","title":"read"},{"location":"api/system-dhcp/#output","text":"Inside the configuration field return: reservations : all configured reservation records from the hosts ranges : the list of green and blue interfaces with relative DHCP configuration. If DHCP is not configured for an interface, the status prop is set to disabled , DhcpRangeEnd and DhcpRangeStart are set to a reasonable default. { status : [ { ip : 192.168.1.20 , mac : xx:xx:xx:xx:xx:xx , expire : 1539081950 , name : myhost , client : xxxxxxxxxxxxxxx }, ... ], configuration : { ranges : [ { name : br0 , type : range , props : { DhcpTFTP : , status : disabled , DhcpDNS : , DhcpDomain : , DhcpLeaseTime : , DhcpRangeStart : 192.168.1.1 , DhcpWINS : , DhcpRangeEnd : 192.168.1.254 , DhcpGatewayIP : , DhcpNTP : } } ], reservations : [ { name : mypc , type : local , props : { MacAddress : xx:xx:xx:xx:xx:xx , IpAddress : 192.168.1.104 , Description : My PC , type : local } }, ... ] } }","title":"Output"},{"location":"api/system-dhcp/#validate","text":"","title":"validate"},{"location":"api/system-dhcp/#constraints","text":"The request must contain an action field. Valid actions are: create-reservation update-reservation Constraints for create-reservation IpAddress: must be a valid IP address MacAddress: must be a valid mac address name: muse be simple hostname all parameters are also validated against \"dhcp-reservation\" platform validator Constraints for update-reservation : name: must be unique inside the hosts db same constraints from create-reservation Constraints for update-range : name: must be an existing network interface DhcpRangeStart: a valid IP, lower than maximum range and lower than DhcpRangeEnd DhcpRangeEnd: a valid IP, greater than minimum range and greater than DhcpRangeStart DhcpLeaseTime: positive integer or empty DhcpDomain: domain or empty DhcpDNS, 'DhcpWINS, DhcpNTP, DhcpTFTP: a valid IP or empty","title":"Constraints"},{"location":"api/system-dhcp/#input","text":"","title":"Input"},{"location":"api/system-dhcp/#create-reservation","text":"Example: { action : create-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : }","title":"create-reservation"},{"location":"api/system-dhcp/#update-reservation","text":"Example: { action : update-reservation , IpAddress : 192.168.1.20 , MacAddress : xx:xx:xx:xx:xx:xx , name : myhost , Description : }","title":"update-reservation"},{"location":"api/system-dhcp/#update-range","text":"Example: { action : update-range , DhcpRangeStart : 192.168.1.10 , DhcpRangeEnd : 192.168.1.50 , name : br0 , status : enabled , DhcpGatewayIP : , DhcpLeaseTime : , DhcpDomain : , DhcpDNS : , DhcpWINS : , DhcpNTP : , DhcpTFTP : }","title":"update-range"},{"location":"api/system-dhcp/#update","text":"","title":"update"},{"location":"api/system-dhcp/#update-reservation_1","text":"Use the same input from validate.","title":"update-reservation"},{"location":"api/system-dhcp/#update-range_1","text":"Use the same input from validate.","title":"update-range"},{"location":"api/system-dhcp/#create","text":"","title":"create"},{"location":"api/system-dhcp/#create-reservation_1","text":"Use the same input from validate.","title":"create-reservation"},{"location":"api/system-dhcp/#delete","text":"","title":"delete"},{"location":"api/system-dhcp/#delete-range","text":"Delete the given range. The name field must contain the interface name. Input example: { name : br0 }","title":"delete-range"},{"location":"api/system-dhcp/#delete-reservation","text":"Delete the given reservation. Pass the the key to be deleted inside the name field. Example: { name : myhost }","title":"delete-reservation"},{"location":"api/system-disk-usage/","text":"system-disk-usage Return disk usage statistics using duc read Output Describe JSON output here: { status : { date : 1538640638 , data : { duc : { count : 165050 , ... } } }, configuration : } update Start disk scraping. No input needed.","title":"system-disk-usage"},{"location":"api/system-disk-usage/#system-disk-usage","text":"Return disk usage statistics using duc","title":"system-disk-usage"},{"location":"api/system-disk-usage/#read","text":"","title":"read"},{"location":"api/system-disk-usage/#output","text":"Describe JSON output here: { status : { date : 1538640638 , data : { duc : { count : 165050 , ... } } }, configuration : }","title":"Output"},{"location":"api/system-disk-usage/#update","text":"Start disk scraping. No input needed.","title":"update"},{"location":"api/system-dns/","text":"system-dns Read and set upstream DNS servers for DNSMasq. read Input Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } } validate Constraints NameServers must be a comma-separated list of valid IPv4 addresses Input The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate write Same input from validate helper.","title":"system-dns"},{"location":"api/system-dns/#system-dns","text":"Read and set upstream DNS servers for DNSMasq.","title":"system-dns"},{"location":"api/system-dns/#read","text":"","title":"read"},{"location":"api/system-dns/#input","text":"Return the value of NameServers record from configuration db. The record is inside the the configuration field: { status : , configuration : { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } }","title":"Input"},{"location":"api/system-dns/#validate","text":"","title":"validate"},{"location":"api/system-dns/#constraints","text":"NameServers must be a comma-separated list of valid IPv4 addresses","title":"Constraints"},{"location":"api/system-dns/#input_1","text":"The NameServers record from `configuration esmith db record in JSON format. The NameServers property is a comma-separated list of IP address. It must contain at least one element. Example: { props : { NameServers : 8.8.8.8 }, name : dns , type : configuration } Validation example: echo { props :{ NameServers : 8.8.8.8 }, name : dns , type : configuration } | ./validate","title":"Input"},{"location":"api/system-dns/#write","text":"Same input from validate helper.","title":"write"},{"location":"api/system-docs/","text":"system-docs Retrive online documentation and prepare it for the UI. read Input There are 3 mandatory fields: chapter nfs language Example: { chapter : backup , section : nfs , language : en } Output Output fields: link: link to the external documentation { link : https://nethserver-docs-cockpit.readthedocs.io/en/latest/backup.html#nfs }","title":"system-docs"},{"location":"api/system-docs/#system-docs","text":"Retrive online documentation and prepare it for the UI.","title":"system-docs"},{"location":"api/system-docs/#read","text":"","title":"read"},{"location":"api/system-docs/#input","text":"There are 3 mandatory fields: chapter nfs language Example: { chapter : backup , section : nfs , language : en }","title":"Input"},{"location":"api/system-docs/#output","text":"Output fields: link: link to the external documentation { link : https://nethserver-docs-cockpit.readthedocs.io/en/latest/backup.html#nfs }","title":"Output"},{"location":"api/system-hostname/","text":"system-hostname Read and the set the system hostname. read Return the system hostname. Output Example: { hostname : test.netserver.org , editable : 1 } The editable field is set to 1 if SSSD is not configured (no account provider installed). validate Constraints Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator Input Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate update Input Takes the same input from validate.","title":"system-hostname"},{"location":"api/system-hostname/#system-hostname","text":"Read and the set the system hostname.","title":"system-hostname"},{"location":"api/system-hostname/#read","text":"Return the system hostname.","title":"read"},{"location":"api/system-hostname/#output","text":"Example: { hostname : test.netserver.org , editable : 1 } The editable field is set to 1 if SSSD is not configured (no account provider installed).","title":"Output"},{"location":"api/system-hostname/#validate","text":"","title":"validate"},{"location":"api/system-hostname/#constraints","text":"Must be at least a second-level domain Can't be localhost.localdomain Validate against myhostname system-validator","title":"Constraints"},{"location":"api/system-hostname/#input","text":"Takes the same output from read: { hostname : myserver.test.local } Invocation example: echo { hostname : localhost.localdomain } | ./validate","title":"Input"},{"location":"api/system-hostname/#update","text":"","title":"update"},{"location":"api/system-hostname/#input_1","text":"Takes the same input from validate.","title":"Input"},{"location":"api/system-hosts/","text":"system-hosts Manage DNS records for DNSMasq. read Output Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] } validate Constraints The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address Input A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"system-hosts"},{"location":"api/system-hosts/#system-hosts","text":"Manage DNS records for DNSMasq.","title":"system-hosts"},{"location":"api/system-hosts/#read","text":"","title":"read"},{"location":"api/system-hosts/#output","text":"Return all current configured records from the hosts file inside the status field. Return all remote records from hosts database inside the `configuration field. { status : { 127.0.0.1 : [ localhost , localhost.localdomain ], 192.168.1.2 : [ t1.net.loc ], 192.168.5.246 : [ test.local.neth.eu , test ] }, configuration : [ { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote } ] }","title":"Output"},{"location":"api/system-hosts/#validate","text":"","title":"validate"},{"location":"api/system-hosts/#constraints","text":"The key ( name field ) must be a valid FQDN and must not already exists in case of creation WildcardMode can be enabled or disabled IpAddress must be a valid IPv4 address","title":"Constraints"},{"location":"api/system-hosts/#input","text":"A remote host esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { IpAddress : 192.168.1.2 , Description : , WildcardMode : disabled }, name : t1.net.loc , type : remote , action : create }","title":"Input"},{"location":"api/system-hosts/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/system-hosts/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-hosts/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : my.host.com }","title":"delete"},{"location":"api/system-logs/","text":"system-logs Read applications logs. execute Input Each request must have an action field. Valid actions are: dump : return the last x lines from one or more logs, equivalent to tail -n xx file follow : output the stream of one ore more logs, equivalent to tail -f file dump Required fields: mode : can be systemd or files paths : list of systemd units or absolute file paths lines : maximum lines to retrieve, if empty, default is 50 Optional fields: filter : if present and not empty, pipe the output to grep with the given filter Example for systemd mode { action : dump , mode : systemd , paths : [ httpd , smb ], lines : } Example for file mode: { action : dump , mode : file , paths : [ /var/log/maillog , /var/log/messages ], lines : 20 } Example with filter: { action : dump , mode : log , paths : [ /var/log/maillog ], lines : , filter : 2696210DAFFF } follow Required fields: mode : can be systemd or files paths : list of systemd units or absolute file paths Example for systemd mode { action : follow , mode : systemd , paths : [ httpd , smb ] } Example for file mode: { action : follow , mode : file , paths : [ /var/log/maillog , /var/log/messages ] } Output dump Example for systemd mode: -- Logs begin at Thu 2018-11-22 11:52:39 CET, end at Fri 2018-11-23 10:32:04 CET. -- Nov 22 11:52:59 test.local.neth.eu systemd[1]: Starting The Apache HTTP Server... Nov 22 11:53:04 test.local.neth.eu systemd[1]: Starting Samba SMB Daemon... Nov 22 11:53:07 test.local.neth.eu systemd[1]: Started Samba SMB Daemon. Nov 22 11:53:07 test.local.neth.eu smbd[1160]: [2018/11/22 11:53:07.412928, 0] ../lib/util/become_daemon.c:124(daemon_ready) Nov 22 11:53:07 test.local.neth.eu smbd[1160]: STATUS=daemon smbd finished starting up and ready to serve connections Nov 22 11:53:08 test.local.neth.eu systemd[1]: Started The Apache HTTP Server. Nov 22 19:03:19 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server. Nov 22 19:12:17 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server. Example for file mode: == /var/log/maillog == Nov 23 09:47:14 test postfix/local[29323]: D799E3155647: to= root@test.local.neth.eu , relay=local, delay=0.61, delays=0.41/0.01/0/0.2, dsn=2.0.0, status=sent (delivered to mailbox) Nov 23 09:47:14 test postfix/qmgr[1374]: D799E3155647: removed Nov 23 09:47:14 test postfix/qmgr[1374]: 1796D3155649: from= no-reply@test.local.neth.eu , size=443, nrcpt=1 (queue active) Nov 23 09:47:14 test postfix/pickup[28050]: 62AD03155647: uid=0 from= no-reply@test.local.neth.eu ... == /var/log/messages == Nov 23 09:47:11 test esmith::event[29562]: expanding /etc/firehol/fireqos.conf Nov 23 09:47:11 test esmith::event[29562]: expanding /var/www/html/wpad.dat Nov 23 09:47:11 test esmith::event[29562]: Action: /etc/e-smith/events/actions/generic_template_expand SUCCESS [0.443582] ... follow The output is the same for dump action but it keeps to follow the stream until the command is interrupted.","title":"system-logs"},{"location":"api/system-logs/#system-logs","text":"Read applications logs.","title":"system-logs"},{"location":"api/system-logs/#execute","text":"","title":"execute"},{"location":"api/system-logs/#input","text":"Each request must have an action field. Valid actions are: dump : return the last x lines from one or more logs, equivalent to tail -n xx file follow : output the stream of one ore more logs, equivalent to tail -f file","title":"Input"},{"location":"api/system-logs/#dump","text":"Required fields: mode : can be systemd or files paths : list of systemd units or absolute file paths lines : maximum lines to retrieve, if empty, default is 50 Optional fields: filter : if present and not empty, pipe the output to grep with the given filter Example for systemd mode { action : dump , mode : systemd , paths : [ httpd , smb ], lines : } Example for file mode: { action : dump , mode : file , paths : [ /var/log/maillog , /var/log/messages ], lines : 20 } Example with filter: { action : dump , mode : log , paths : [ /var/log/maillog ], lines : , filter : 2696210DAFFF }","title":"dump"},{"location":"api/system-logs/#follow","text":"Required fields: mode : can be systemd or files paths : list of systemd units or absolute file paths Example for systemd mode { action : follow , mode : systemd , paths : [ httpd , smb ] } Example for file mode: { action : follow , mode : file , paths : [ /var/log/maillog , /var/log/messages ] }","title":"follow"},{"location":"api/system-logs/#output","text":"","title":"Output"},{"location":"api/system-logs/#dump_1","text":"Example for systemd mode: -- Logs begin at Thu 2018-11-22 11:52:39 CET, end at Fri 2018-11-23 10:32:04 CET. -- Nov 22 11:52:59 test.local.neth.eu systemd[1]: Starting The Apache HTTP Server... Nov 22 11:53:04 test.local.neth.eu systemd[1]: Starting Samba SMB Daemon... Nov 22 11:53:07 test.local.neth.eu systemd[1]: Started Samba SMB Daemon. Nov 22 11:53:07 test.local.neth.eu smbd[1160]: [2018/11/22 11:53:07.412928, 0] ../lib/util/become_daemon.c:124(daemon_ready) Nov 22 11:53:07 test.local.neth.eu smbd[1160]: STATUS=daemon smbd finished starting up and ready to serve connections Nov 22 11:53:08 test.local.neth.eu systemd[1]: Started The Apache HTTP Server. Nov 22 19:03:19 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server. Nov 22 19:12:17 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server. Example for file mode: == /var/log/maillog == Nov 23 09:47:14 test postfix/local[29323]: D799E3155647: to= root@test.local.neth.eu , relay=local, delay=0.61, delays=0.41/0.01/0/0.2, dsn=2.0.0, status=sent (delivered to mailbox) Nov 23 09:47:14 test postfix/qmgr[1374]: D799E3155647: removed Nov 23 09:47:14 test postfix/qmgr[1374]: 1796D3155649: from= no-reply@test.local.neth.eu , size=443, nrcpt=1 (queue active) Nov 23 09:47:14 test postfix/pickup[28050]: 62AD03155647: uid=0 from= no-reply@test.local.neth.eu ... == /var/log/messages == Nov 23 09:47:11 test esmith::event[29562]: expanding /etc/firehol/fireqos.conf Nov 23 09:47:11 test esmith::event[29562]: expanding /var/www/html/wpad.dat Nov 23 09:47:11 test esmith::event[29562]: Action: /etc/e-smith/events/actions/generic_template_expand SUCCESS [0.443582] ...","title":"dump"},{"location":"api/system-logs/#follow_1","text":"The output is the same for dump action but it keeps to follow the stream until the command is interrupted.","title":"follow"},{"location":"api/system-network/","text":"system-network Manage network configuration. read Input It takes a mandatory action argument. Valid actions are: list heirs available bond-types vlan-available routing info list It takes only the action argument. Example: { action : list } heirs It takes action and parent arguments. The parent contains the name of the interface which will be deleted. Example: { action : heirs , parent : br0 } available List all interfaces without a role. Example: { action : available } bond-types List the available bond types. Example: { action : bond-types } vlan-available List all interfaces suitable for a vlan. Example: { action : vlan-availables } routing List routing table ( route -n ) Example: { action : routing } info Retrieve info from ifconfig.co . The name field contains the name of the interface to use. Example: { action : info , name : eth0 } Output list Inside the configuration field return a list of all network interfaces. The status field contain current network status; if a newtork interface is configured with DHCP, the current address is contained inside the ipaddr field. Example: { status : { enp0s8 : { link : 1 , bus : pci , speed : 1000 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , mac : 08:00:27:8e:01:18 , driver : e1000 }, enp0s9 : { link : 1 , bus : pci , speed : 1000 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , mac : 08:00:27:3d:b1:2b , driver : e1000 }, }, configuration : { green : [ { bootproto : none , gateway : , BondOptMode : 2 , name : bond0 , devices : [ { link : 1 , bootproto : none , bus : pci , existing : 1 , master : bond0 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s8 , virtual : 0 , speed : 1000 , type : ethernet , mac : 08:00:27:bd:3d:37 , role : slave , driver : e1000 }, { link : 1 , bootproto : none , bus : pci , existing : 1 , master : bond0 , model : Advanced Micro Devices Inc. [AMD] 79c970 [PCnet32 LANCE] (rev 10) , name : enp0s9 , virtual : 0 , speed : , type : ethernet , mac : 08:00:27:36:f0:08 , role : slave , driver : pcnet32 } ], virtual : 1 , aliases : [], type : bond , netmask : 255.255.255.0 , role : green , ipaddr : 192.168.4.246 , nslabel : MyMightyGreen }, { bootproto : none , gateway : 192.168.5.253 , name : br0 , devices : [ { link : 1 , bootproto : none , bus : pci , existing : 1 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s3 , bridge : br0 , virtual : 0 , speed : 1000 , type : ethernet , mac : 08:00:27:8e:01:18 , role : bridged , driver : e1000 } ], virtual : 1 , aliases : [], type : bridge , netmask : 255.255.255.0 , role : green , ipaddr : 192.168.5.246 , cidr : 192.168.5.246/24 } ], free : [], blue : [ { parent : enp0s8 , bootproto : none , gateway : , name : enp0s8.2 , devices : [], virtual : 1 , aliases : [], type : vlan , netmask : 255.255.255.0 , tag : 2 , role : blue , ipaddr : 11.12.13.246 } ], other : [], pppoe : 0 , orange : [], missing : [], red : [ { provider : xDSL provider , AuthType : auto , FwOutBandwidth : , name : ppp0 , FwInBandwidth : , devices : [ { link : 1 , bus : pci , existing : 1 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s8 , devices : [], virtual : 0 , speed : 1000 , aliases : [], type : ethernet , mac : 08:00:27:bd:3d:37 , role : pppoe , driver : e1000 } ], virtual : 1 , Password : pass2 , aliases : [], user : user1 , type : xdsl , role : red } ] } } Special fields: devices : if the interface is a bridge or a bond, contains the list of connected devices aliases : contains the list of alias devices existing : set to 1 if the device is physical and it's attacched to the system, 0 otherwise virtual : set to 1 if the device is a virtual network interface like bridge, bond, etc pppoe : set to 1 if there is a pppoe already configured, 0 otherwise heirs List of interfaces suitable for getting a new role. Example: [ enp0s3 , enp0s4 ] available List of interfaces wihout a role. Example: [ enp0s8 , enp0s9 ] bond-types Example: [ { value : 3 , name : broadcast }, { value : 6 , name : balance-alb }, { value : 5 , name : balance-tlb }, { value : 1 , name : active-backup }, { value : 0 , name : balance-rr }, { value : 4 , name : 802.3ad }, { value : 2 , name : balance-xor } ] vlan-available Example: [ bond0 , br0 , enp0s3 , enp0s8 , enp0s9 ] routing Example: { data : Kernel IP routing table\\nDestination Gateway Genmask Flags Metric Ref Use Iface\\n0.0.0.0 192.168.5.253 0.0.0.0 UG 0 0 0 br0\\n169.254.0.0 0.0.0.0 255.255.0.0 U 1010 0 0 br0\\n192.168.5.0 0.0.0.0 255.255.255.0 U 0 0 0 br0\\n } info Example: { country : Italy , longitude : 12.8835 , ip : 80.17.99.73 , hostname : nethsecurity.nethesis.it , country_eu : true , ip_decimal : 1343316809 , city : Cartoceto , country_iso : IT , latitude : 43.7657 } validate Constraints The request must contain an action field. Valid actions are: create-alias create-bridge create-bond create-vlan set-pppoe release-role change-properties Constraints for create-alias ipaddr: must be a valid IPv5 address netmask: must be a valid IPv4 network mask parent: must be the name of an existing network interface Constraints for create-bridge devices: a list of non-configured interface names role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for create-bond BondOptMode: can be a value between 0 and 6 devices: a list of non-configured interface names role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for create-vlan tag: a positive integer parent: the name of an existing network interface, can't be another vlan role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for set-pppoe AuthType: can be auto , pap or chap parent: the name of an existing network interface Constraints for release-role interface: must be the name of an existing network interface the role can't be released if it is the last green interface Constraints for release-device interface: must be the name of an existing network enslaved or bonded interface Constraints for change-properties interface: the name of an existing network interface role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address devices: if the interface is a bond or a bridge, a list of existing free interfaces Input create-alias Example: { action : create-alias , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , parent : br0 } create-bridge Example: { action : create-bridge , role : green , bootproto : none , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , gateway : 192.168.1.1 , devices : [ enp0s9 , enp0s8 ] } create-bond Example: { action : create-bond , role : green , bootproto : none , ipaddr : 192.168.3.246 , netmask : 255.255.255.0 , gateway : 192.168.1.1 , BondOptMode : 0 , devices : [ enp0s9 , enp0s8 ] } create-vlan Example: { action : create-vlan , tag : 1 , role : green , bootproto : none , ipaddr : 192.168.2.246 , netmask : 255.255.255.0 , parent : enp0s9 } set-pppoe Example: { action : set-pppoe , parent : enp0s8 , AuthType : auto , Password : mypass , user : myuser , provider : xDSL provider } release-role Example: { action : release-role , interface : enp0s8 } release-device Example: { action : release-device , interface : enp0s9 } change-properties The devices field is mandatory only for bridges and bonding. The BondOptMode is mandatory only for bonding; Example: { action : change-properties , role : blue , bootproto : none , interface : br1 , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , nslabel : MyGuests BondOptMode : 0 , devices : [ enp0s9 ] } update release-role Use the same input from validate. release-device Use the same input from validate. change-properties Use the same input from validate. set-pppoe Use the same input from validate. unset-pppoe Input example: { action : unset-pppoe } create create-alias Use the same input from validate. create-bridge Use the same input from validate. delete Delete the interface specified inside the interface field. If heir field is set, copy all configuration from the bridge to heir interface. Input example: { heir : enp0s8 , interface : br1 }","title":"system-network"},{"location":"api/system-network/#system-network","text":"Manage network configuration.","title":"system-network"},{"location":"api/system-network/#read","text":"","title":"read"},{"location":"api/system-network/#input","text":"It takes a mandatory action argument. Valid actions are: list heirs available bond-types vlan-available routing info","title":"Input"},{"location":"api/system-network/#list","text":"It takes only the action argument. Example: { action : list }","title":"list"},{"location":"api/system-network/#heirs","text":"It takes action and parent arguments. The parent contains the name of the interface which will be deleted. Example: { action : heirs , parent : br0 }","title":"heirs"},{"location":"api/system-network/#available","text":"List all interfaces without a role. Example: { action : available }","title":"available"},{"location":"api/system-network/#bond-types","text":"List the available bond types. Example: { action : bond-types }","title":"bond-types"},{"location":"api/system-network/#vlan-available","text":"List all interfaces suitable for a vlan. Example: { action : vlan-availables }","title":"vlan-available"},{"location":"api/system-network/#routing","text":"List routing table ( route -n ) Example: { action : routing }","title":"routing"},{"location":"api/system-network/#info","text":"Retrieve info from ifconfig.co . The name field contains the name of the interface to use. Example: { action : info , name : eth0 }","title":"info"},{"location":"api/system-network/#output","text":"","title":"Output"},{"location":"api/system-network/#list_1","text":"Inside the configuration field return a list of all network interfaces. The status field contain current network status; if a newtork interface is configured with DHCP, the current address is contained inside the ipaddr field. Example: { status : { enp0s8 : { link : 1 , bus : pci , speed : 1000 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , mac : 08:00:27:8e:01:18 , driver : e1000 }, enp0s9 : { link : 1 , bus : pci , speed : 1000 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , mac : 08:00:27:3d:b1:2b , driver : e1000 }, }, configuration : { green : [ { bootproto : none , gateway : , BondOptMode : 2 , name : bond0 , devices : [ { link : 1 , bootproto : none , bus : pci , existing : 1 , master : bond0 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s8 , virtual : 0 , speed : 1000 , type : ethernet , mac : 08:00:27:bd:3d:37 , role : slave , driver : e1000 }, { link : 1 , bootproto : none , bus : pci , existing : 1 , master : bond0 , model : Advanced Micro Devices Inc. [AMD] 79c970 [PCnet32 LANCE] (rev 10) , name : enp0s9 , virtual : 0 , speed : , type : ethernet , mac : 08:00:27:36:f0:08 , role : slave , driver : pcnet32 } ], virtual : 1 , aliases : [], type : bond , netmask : 255.255.255.0 , role : green , ipaddr : 192.168.4.246 , nslabel : MyMightyGreen }, { bootproto : none , gateway : 192.168.5.253 , name : br0 , devices : [ { link : 1 , bootproto : none , bus : pci , existing : 1 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s3 , bridge : br0 , virtual : 0 , speed : 1000 , type : ethernet , mac : 08:00:27:8e:01:18 , role : bridged , driver : e1000 } ], virtual : 1 , aliases : [], type : bridge , netmask : 255.255.255.0 , role : green , ipaddr : 192.168.5.246 , cidr : 192.168.5.246/24 } ], free : [], blue : [ { parent : enp0s8 , bootproto : none , gateway : , name : enp0s8.2 , devices : [], virtual : 1 , aliases : [], type : vlan , netmask : 255.255.255.0 , tag : 2 , role : blue , ipaddr : 11.12.13.246 } ], other : [], pppoe : 0 , orange : [], missing : [], red : [ { provider : xDSL provider , AuthType : auto , FwOutBandwidth : , name : ppp0 , FwInBandwidth : , devices : [ { link : 1 , bus : pci , existing : 1 , model : Intel Corporation 82540EM Gigabit Ethernet Controller (rev 02) , name : enp0s8 , devices : [], virtual : 0 , speed : 1000 , aliases : [], type : ethernet , mac : 08:00:27:bd:3d:37 , role : pppoe , driver : e1000 } ], virtual : 1 , Password : pass2 , aliases : [], user : user1 , type : xdsl , role : red } ] } } Special fields: devices : if the interface is a bridge or a bond, contains the list of connected devices aliases : contains the list of alias devices existing : set to 1 if the device is physical and it's attacched to the system, 0 otherwise virtual : set to 1 if the device is a virtual network interface like bridge, bond, etc pppoe : set to 1 if there is a pppoe already configured, 0 otherwise","title":"list"},{"location":"api/system-network/#heirs_1","text":"List of interfaces suitable for getting a new role. Example: [ enp0s3 , enp0s4 ]","title":"heirs"},{"location":"api/system-network/#available_1","text":"List of interfaces wihout a role. Example: [ enp0s8 , enp0s9 ]","title":"available"},{"location":"api/system-network/#bond-types_1","text":"Example: [ { value : 3 , name : broadcast }, { value : 6 , name : balance-alb }, { value : 5 , name : balance-tlb }, { value : 1 , name : active-backup }, { value : 0 , name : balance-rr }, { value : 4 , name : 802.3ad }, { value : 2 , name : balance-xor } ]","title":"bond-types"},{"location":"api/system-network/#vlan-available_1","text":"Example: [ bond0 , br0 , enp0s3 , enp0s8 , enp0s9 ]","title":"vlan-available"},{"location":"api/system-network/#routing_1","text":"Example: { data : Kernel IP routing table\\nDestination Gateway Genmask Flags Metric Ref Use Iface\\n0.0.0.0 192.168.5.253 0.0.0.0 UG 0 0 0 br0\\n169.254.0.0 0.0.0.0 255.255.0.0 U 1010 0 0 br0\\n192.168.5.0 0.0.0.0 255.255.255.0 U 0 0 0 br0\\n }","title":"routing"},{"location":"api/system-network/#info_1","text":"Example: { country : Italy , longitude : 12.8835 , ip : 80.17.99.73 , hostname : nethsecurity.nethesis.it , country_eu : true , ip_decimal : 1343316809 , city : Cartoceto , country_iso : IT , latitude : 43.7657 }","title":"info"},{"location":"api/system-network/#validate","text":"","title":"validate"},{"location":"api/system-network/#constraints","text":"The request must contain an action field. Valid actions are: create-alias create-bridge create-bond create-vlan set-pppoe release-role change-properties Constraints for create-alias ipaddr: must be a valid IPv5 address netmask: must be a valid IPv4 network mask parent: must be the name of an existing network interface Constraints for create-bridge devices: a list of non-configured interface names role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for create-bond BondOptMode: can be a value between 0 and 6 devices: a list of non-configured interface names role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for create-vlan tag: a positive integer parent: the name of an existing network interface, can't be another vlan role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address Constraints for set-pppoe AuthType: can be auto , pap or chap parent: the name of an existing network interface Constraints for release-role interface: must be the name of an existing network interface the role can't be released if it is the last green interface Constraints for release-device interface: must be the name of an existing network enslaved or bonded interface Constraints for change-properties interface: the name of an existing network interface role: can be empty or green , red , blue , orange bootproto: must be none for blue and orange roles, can be also dhcp for red role ipaddr: if bootproto is static, must be a free IPv4 address (also checked agains nsdc IP) netmask: if bootproto is static, must be an IPv4 netmask gateway: if bootproto is static, can be empty or an IPv4 address devices: if the interface is a bond or a bridge, a list of existing free interfaces","title":"Constraints"},{"location":"api/system-network/#input_1","text":"","title":"Input"},{"location":"api/system-network/#create-alias","text":"Example: { action : create-alias , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , parent : br0 }","title":"create-alias"},{"location":"api/system-network/#create-bridge","text":"Example: { action : create-bridge , role : green , bootproto : none , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , gateway : 192.168.1.1 , devices : [ enp0s9 , enp0s8 ] }","title":"create-bridge"},{"location":"api/system-network/#create-bond","text":"Example: { action : create-bond , role : green , bootproto : none , ipaddr : 192.168.3.246 , netmask : 255.255.255.0 , gateway : 192.168.1.1 , BondOptMode : 0 , devices : [ enp0s9 , enp0s8 ] }","title":"create-bond"},{"location":"api/system-network/#create-vlan","text":"Example: { action : create-vlan , tag : 1 , role : green , bootproto : none , ipaddr : 192.168.2.246 , netmask : 255.255.255.0 , parent : enp0s9 }","title":"create-vlan"},{"location":"api/system-network/#set-pppoe","text":"Example: { action : set-pppoe , parent : enp0s8 , AuthType : auto , Password : mypass , user : myuser , provider : xDSL provider }","title":"set-pppoe"},{"location":"api/system-network/#release-role","text":"Example: { action : release-role , interface : enp0s8 }","title":"release-role"},{"location":"api/system-network/#release-device","text":"Example: { action : release-device , interface : enp0s9 }","title":"release-device"},{"location":"api/system-network/#change-properties","text":"The devices field is mandatory only for bridges and bonding. The BondOptMode is mandatory only for bonding; Example: { action : change-properties , role : blue , bootproto : none , interface : br1 , ipaddr : 192.168.1.246 , netmask : 255.255.255.0 , nslabel : MyGuests BondOptMode : 0 , devices : [ enp0s9 ] }","title":"change-properties"},{"location":"api/system-network/#update","text":"","title":"update"},{"location":"api/system-network/#release-role_1","text":"Use the same input from validate.","title":"release-role"},{"location":"api/system-network/#release-device_1","text":"Use the same input from validate.","title":"release-device"},{"location":"api/system-network/#change-properties_1","text":"Use the same input from validate.","title":"change-properties"},{"location":"api/system-network/#set-pppoe_1","text":"Use the same input from validate.","title":"set-pppoe"},{"location":"api/system-network/#unset-pppoe","text":"Input example: { action : unset-pppoe }","title":"unset-pppoe"},{"location":"api/system-network/#create","text":"","title":"create"},{"location":"api/system-network/#create-alias_1","text":"Use the same input from validate.","title":"create-alias"},{"location":"api/system-network/#create-bridge_1","text":"Use the same input from validate.","title":"create-bridge"},{"location":"api/system-network/#delete","text":"Delete the interface specified inside the interface field. If heir field is set, copy all configuration from the bridge to heir interface. Input example: { heir : enp0s8 , interface : br1 }","title":"delete"},{"location":"api/system-openssh/","text":"system-openssh Read and write configuration for nethserver-openssh package. read Output A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } } validate Constraints PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number Input An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, type : service } Invocation example: echo { props :{ PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate update Same input from validate helper.","title":"system-openssh"},{"location":"api/system-openssh/#system-openssh","text":"Read and write configuration for nethserver-openssh package.","title":"system-openssh"},{"location":"api/system-openssh/#read","text":"","title":"read"},{"location":"api/system-openssh/#output","text":"A JSON object containing configuration and status fields: { configuration : { sshd prop }, status : { connections : list of active connections } } Output example: { configuration : { name : sshd , props : { LoginGraceTime : 2m , MaxAuthTries : 6 , PasswordAuthentication : yes , PermitRootLogin : yes , Protocol : 2 , TCPPort : 22 , UsePAM : yes , access : green,red , status : enabled }, type : service }, status : { connections : [ { local : 192.168.1.1:22 , peer : 192.168.1.45:54478 } ] } }","title":"Output"},{"location":"api/system-openssh/#validate","text":"","title":"validate"},{"location":"api/system-openssh/#constraints","text":"PasswordAuthentication: boolean PermitRootLogin: boolean TCPPort: port number","title":"Constraints"},{"location":"api/system-openssh/#input","text":"An Esmith db record in JSON format: { name : key , props : { prop : value ... prop : value }, type : record-type } Input example from: config getjson sshd : { name : sshd , props : { PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, type : service } Invocation example: echo { props :{ PasswordAuthentication : yes , PermitRootLogin : yes , TCPPort : 22 }, name : sshd , type : service } | ./validate","title":"Input"},{"location":"api/system-openssh/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-packages/","text":"system-packages Manage install/uninstall of applications (YUM groups) and system updates. read Input Take an action field. Valid actions are: list-available : list not installed applications list-updates : calculate the list of dependencies which will be removed along with given packages list-removed : list the packages which will be removed changelog : retrieve the changelog of all updates get-config : retrieve yum-cron configuration list-available Example: { action : list-available } list-updates Example: { action : list-updates } list-removed The packages field must contain an array of group or packages which will be removed. The command will list all packages removed as dependencies. Example: { action : list-removed , packages : [ nethserver-base , @nethserver-web ] } changelog Example: { action : changelog , } get-config Example: { action : get-config , } Output list-available List all YUM categories and installed groups. Example: { categories : [ { description : UTM Firewall , color : #222 , name : Firewall , id : firewall , icon : applications/firewall.png }, ... ], groups : [ { optional_packages : {}, conditional_packages : {}, name : Backup , mandatory_packages : { nethserver-backup-data : true , nethserver-backup-config : true , nethserver-restore-data : false }, description : Backup of configuration and data , id : @nethserver-backup , default_packages : {}, }, ... ] } list-updates Retrieve the list of available updates. Special fields: nethserver field is set to true if the groups comes fron NethServer repositories centos_upgrade is set to 1 if a new CentOS release is available, 0 otherwise nethserver_upgrade is set to 1 if a new NethServer release is available, 0 otherwise Example: { updates : [ { nethserver : false , description : CentOS minimal package set , updates : [ { repo : updates , epoch : 0 , version : 2018f , name : tzdata , release : 2.el7 , arch : noarch , installed_version : 2018e , installed_release : 3.el7 }, ... ], id : @centos-minimal , name : CentOS-minimal }, { nethserver : true , description : NethServer core packages , updates : [ { repo : nethserver-updates , epoch : 0 , version : 1.2.16 , name : nethserver-lang-en , release : 1.ns7 , arch : noarch , installed_version : 1.2.15 , installed_release : 1.ns7 }, ... ], id : core , name : NethServer core }, { nethserver : true , description : Other packages , updates : [ { repo : epel , epoch : 0 , version : 5.8.1 , name : collectd , release : 1.el7 , arch : x86_64 , installed_version : 5.8.0 , installed_release : 4.el7 }, ... ], id : other , name : Other } ], hints : { count : 2 , details : { nethserver : { new_release : 7.6.1810 , current_release : 7.5.1804 }, centos : { new_release : 7.6.1810 , current_release : 7.5.1804 } } } } list-remove Example: { packages : [ nethserver-fail2ban ] } changelog Retrieve the last changelog entry of the given package update. Example: { data : Loaded plugins: changelog, fastestmirror, nethserver_events\\nLoading mirror speeds from cached hostfile\\n * base: mirror.crazynetwork.it\\n * epel: mirror.infonline.de\\n * extras: mirror.crazynetwork.it\\n * nethforge: server.liftingtrade.hu\\n * nethserver-base: server.liftingtrade.hu\\n * nethserver-updates: server.liftingtrade.hu\\n * updates: mirror.crazynetwork.it\\n\\nListing 1 changelog\\n\\n==================== Updated Packages ====================\\nnethserver-lang-en-1.2.16-1.ns7.noarch nethserver-updates\\n* Wed Nov 14 13:00:00 2018 Davide Principi davide.principi@nethesis.it - 1.2.16-1\\n- Pull strings from Transifex\\n\\nchangelog stats. 1 pkg, 1 source pkg, 1 changelog\\n } get-config Example for super user: { editable : 1 , messages : yes , applyUpdate : no , download : yes } Example for normal user: { messages : , editable : 0 , applyUpdate : , download : } update Available actions: update : update one or more packages install : install one or more packages remove : remove one or more packages set-config : configure yum-cron Input The packages field contains a list of packages or group to be updated. If packages field is empty, all packages will be updated. update If packages is empty, update all packages. Example: { action : update , packages : [ @nethserver-httpd , nethserver-base ], } install Example: { action : install , packages : [ @nethserver-httpd , nethserver-base ], } remove Example: { action : remove , packages : [ @nethserver-httpd , nethserver-base ], } set-config Example: { action : set-config , messages : yes , applyUpdate : no , download : yes } Output update Output yum transaction in JSON format: Example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } { state : running , steps : -1 , event : Installing nethserver-lang-en-1.2.16-1.ns7.noarch } ... { state : running , steps : -1 , event : Removing nethserver-lang-en } { status : success , steps : -1 , event : Transaction end } { state : success } + exit 0 install Same output as update . remove Same output as update . set-config Output event in json format. Example: { steps :2, pid :24484, args : , event : software-repos-save } { step :1, pid :24484, action : S05generic_template_expand , event : software-repos-save , state : running } { progress : 0.50 , time : 0.242998 , exit :0, event : software-repos-save , state : done , step :1, pid :24484, action : S05generic_template_expand } { step :2, pid :24484, action : S20nethserver-base-software-repos , event : software-repos-save , state : running } { progress : 1.00 , time : 0.422607 , exit :0, event : software-repos-save , state : done , step :2, pid :24484, action : S20nethserver-base-software-repos } { pid :24484, status : success , event : software-repos-save } { state : success }","title":"system-packages"},{"location":"api/system-packages/#system-packages","text":"Manage install/uninstall of applications (YUM groups) and system updates.","title":"system-packages"},{"location":"api/system-packages/#read","text":"","title":"read"},{"location":"api/system-packages/#input","text":"Take an action field. Valid actions are: list-available : list not installed applications list-updates : calculate the list of dependencies which will be removed along with given packages list-removed : list the packages which will be removed changelog : retrieve the changelog of all updates get-config : retrieve yum-cron configuration","title":"Input"},{"location":"api/system-packages/#list-available","text":"Example: { action : list-available }","title":"list-available"},{"location":"api/system-packages/#list-updates","text":"Example: { action : list-updates }","title":"list-updates"},{"location":"api/system-packages/#list-removed","text":"The packages field must contain an array of group or packages which will be removed. The command will list all packages removed as dependencies. Example: { action : list-removed , packages : [ nethserver-base , @nethserver-web ] }","title":"list-removed"},{"location":"api/system-packages/#changelog","text":"Example: { action : changelog , }","title":"changelog"},{"location":"api/system-packages/#get-config","text":"Example: { action : get-config , }","title":"get-config"},{"location":"api/system-packages/#output","text":"","title":"Output"},{"location":"api/system-packages/#list-available_1","text":"List all YUM categories and installed groups. Example: { categories : [ { description : UTM Firewall , color : #222 , name : Firewall , id : firewall , icon : applications/firewall.png }, ... ], groups : [ { optional_packages : {}, conditional_packages : {}, name : Backup , mandatory_packages : { nethserver-backup-data : true , nethserver-backup-config : true , nethserver-restore-data : false }, description : Backup of configuration and data , id : @nethserver-backup , default_packages : {}, }, ... ] }","title":"list-available"},{"location":"api/system-packages/#list-updates_1","text":"Retrieve the list of available updates. Special fields: nethserver field is set to true if the groups comes fron NethServer repositories centos_upgrade is set to 1 if a new CentOS release is available, 0 otherwise nethserver_upgrade is set to 1 if a new NethServer release is available, 0 otherwise Example: { updates : [ { nethserver : false , description : CentOS minimal package set , updates : [ { repo : updates , epoch : 0 , version : 2018f , name : tzdata , release : 2.el7 , arch : noarch , installed_version : 2018e , installed_release : 3.el7 }, ... ], id : @centos-minimal , name : CentOS-minimal }, { nethserver : true , description : NethServer core packages , updates : [ { repo : nethserver-updates , epoch : 0 , version : 1.2.16 , name : nethserver-lang-en , release : 1.ns7 , arch : noarch , installed_version : 1.2.15 , installed_release : 1.ns7 }, ... ], id : core , name : NethServer core }, { nethserver : true , description : Other packages , updates : [ { repo : epel , epoch : 0 , version : 5.8.1 , name : collectd , release : 1.el7 , arch : x86_64 , installed_version : 5.8.0 , installed_release : 4.el7 }, ... ], id : other , name : Other } ], hints : { count : 2 , details : { nethserver : { new_release : 7.6.1810 , current_release : 7.5.1804 }, centos : { new_release : 7.6.1810 , current_release : 7.5.1804 } } } }","title":"list-updates"},{"location":"api/system-packages/#list-remove","text":"Example: { packages : [ nethserver-fail2ban ] }","title":"list-remove"},{"location":"api/system-packages/#changelog_1","text":"Retrieve the last changelog entry of the given package update. Example: { data : Loaded plugins: changelog, fastestmirror, nethserver_events\\nLoading mirror speeds from cached hostfile\\n * base: mirror.crazynetwork.it\\n * epel: mirror.infonline.de\\n * extras: mirror.crazynetwork.it\\n * nethforge: server.liftingtrade.hu\\n * nethserver-base: server.liftingtrade.hu\\n * nethserver-updates: server.liftingtrade.hu\\n * updates: mirror.crazynetwork.it\\n\\nListing 1 changelog\\n\\n==================== Updated Packages ====================\\nnethserver-lang-en-1.2.16-1.ns7.noarch nethserver-updates\\n* Wed Nov 14 13:00:00 2018 Davide Principi davide.principi@nethesis.it - 1.2.16-1\\n- Pull strings from Transifex\\n\\nchangelog stats. 1 pkg, 1 source pkg, 1 changelog\\n }","title":"changelog"},{"location":"api/system-packages/#get-config_1","text":"Example for super user: { editable : 1 , messages : yes , applyUpdate : no , download : yes } Example for normal user: { messages : , editable : 0 , applyUpdate : , download : }","title":"get-config"},{"location":"api/system-packages/#update","text":"Available actions: update : update one or more packages install : install one or more packages remove : remove one or more packages set-config : configure yum-cron","title":"update"},{"location":"api/system-packages/#input_1","text":"The packages field contains a list of packages or group to be updated. If packages field is empty, all packages will be updated.","title":"Input"},{"location":"api/system-packages/#update_1","text":"If packages is empty, update all packages. Example: { action : update , packages : [ @nethserver-httpd , nethserver-base ], }","title":"update"},{"location":"api/system-packages/#install","text":"Example: { action : install , packages : [ @nethserver-httpd , nethserver-base ], }","title":"install"},{"location":"api/system-packages/#remove","text":"Example: { action : remove , packages : [ @nethserver-httpd , nethserver-base ], }","title":"remove"},{"location":"api/system-packages/#set-config","text":"Example: { action : set-config , messages : yes , applyUpdate : no , download : yes }","title":"set-config"},{"location":"api/system-packages/#output_1","text":"","title":"Output"},{"location":"api/system-packages/#update_2","text":"Output yum transaction in JSON format: Example: { state : running , steps : -1 , event : Initialization } { state : running , steps : -1 , event : Resolving RPM dependencies } { state : running , steps : -1 , event : Downloading Packages } { state : running , steps : -1 , event : Check Package Signatures } { state : running , steps : -1 , event : Running Test Transaction } { state : running , steps : -1 , event : Running Transaction } { state : running , steps : -1 , event : Installing nethserver-lang-en-1.2.16-1.ns7.noarch } ... { state : running , steps : -1 , event : Removing nethserver-lang-en } { status : success , steps : -1 , event : Transaction end } { state : success } + exit 0","title":"update"},{"location":"api/system-packages/#install_1","text":"Same output as update .","title":"install"},{"location":"api/system-packages/#remove_1","text":"Same output as update .","title":"remove"},{"location":"api/system-packages/#set-config_1","text":"Output event in json format. Example: { steps :2, pid :24484, args : , event : software-repos-save } { step :1, pid :24484, action : S05generic_template_expand , event : software-repos-save , state : running } { progress : 0.50 , time : 0.242998 , exit :0, event : software-repos-save , state : done , step :1, pid :24484, action : S05generic_template_expand } { step :2, pid :24484, action : S20nethserver-base-software-repos , event : software-repos-save , state : running } { progress : 1.00 , time : 0.422607 , exit :0, event : software-repos-save , state : done , step :2, pid :24484, action : S20nethserver-base-software-repos } { pid :24484, status : success , event : software-repos-save } { state : success }","title":"set-config"},{"location":"api/system-password-policy/","text":"system-password-policy Read and set passwordstrength record from configuration db. read Output The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } } validate Constraints PassExpires and Users: must be yes or no MinPassAge: minimum 0, maximum 365 MaxPassAge: positive integer Input Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } update Same input from validate helper.","title":"system-password-policy"},{"location":"api/system-password-policy/#system-password-policy","text":"Read and set passwordstrength record from configuration db.","title":"system-password-policy"},{"location":"api/system-password-policy/#read","text":"","title":"read"},{"location":"api/system-password-policy/#output","text":"The configuration key contains the OrganizationContact record. Output example: { status : , configuration : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration } }","title":"Output"},{"location":"api/system-password-policy/#validate","text":"","title":"validate"},{"location":"api/system-password-policy/#constraints","text":"PassExpires and Users: must be yes or no MinPassAge: minimum 0, maximum 365 MaxPassAge: positive integer","title":"Constraints"},{"location":"api/system-password-policy/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson OrganizationContact : { props : { PassExpires : no , MinPassAge : 0 , MaxPassAge : 180 , Users : no , }, name : passwordstrength , type : configuration }","title":"Input"},{"location":"api/system-password-policy/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-password/","text":"system-password Change password of the logged user. This API should not be invoked using sudo . validate The validation helper uses system-users library. Constraints: newPassword: if not empty, must match with confirmNewPassword; also checked against password-strength system validator ConfirmPassword: required only if invoked by non-root user Input Input example for normal user: { confirmNewPassword : Nethesis,1234 , newPassword : Nethesis,1234 , currentPassword : TestPassword,1234 } Input example for root user: { confirmNewPassword : Nethesis,1234 , newPassword : Nethesis,1234 , } update Implements the self password change. It handles two use cases: change local root's password with passwd change user's password in the accounts provider DB (both local and remote) The latter checks if a user kerberos ticket is available. If so it assumes an AD accounts provider is configured and runs the kpasswd command. Otherwise it attempts to connect the LDAP server configured in /etc/nethserver/ldappasswd.conf and runs the ldappasswd command with the user's credentials. The LDAP BIND operation uses a DN in the following default form: uid= short username , user DN branch suffix For instance uid=davidep,ou=People,dc=directory,dc=nh The DN can be overridden with the environment variable LDAPBINDDN. The default form suits ns6 and ns7 configuration. Remote LDAP providers are always connected with STARTTLS or LDAPS. See the Perl NethServer::SSSD::startTls method for details. Input See the validate helper. Output A simple success message, or specific Error codes.","title":"system-password"},{"location":"api/system-password/#system-password","text":"Change password of the logged user. This API should not be invoked using sudo .","title":"system-password"},{"location":"api/system-password/#validate","text":"The validation helper uses system-users library. Constraints: newPassword: if not empty, must match with confirmNewPassword; also checked against password-strength system validator ConfirmPassword: required only if invoked by non-root user","title":"validate"},{"location":"api/system-password/#input","text":"Input example for normal user: { confirmNewPassword : Nethesis,1234 , newPassword : Nethesis,1234 , currentPassword : TestPassword,1234 } Input example for root user: { confirmNewPassword : Nethesis,1234 , newPassword : Nethesis,1234 , }","title":"Input"},{"location":"api/system-password/#update","text":"Implements the self password change. It handles two use cases: change local root's password with passwd change user's password in the accounts provider DB (both local and remote) The latter checks if a user kerberos ticket is available. If so it assumes an AD accounts provider is configured and runs the kpasswd command. Otherwise it attempts to connect the LDAP server configured in /etc/nethserver/ldappasswd.conf and runs the ldappasswd command with the user's credentials. The LDAP BIND operation uses a DN in the following default form: uid= short username , user DN branch suffix For instance uid=davidep,ou=People,dc=directory,dc=nh The DN can be overridden with the environment variable LDAPBINDDN. The default form suits ns6 and ns7 configuration. Remote LDAP providers are always connected with STARTTLS or LDAPS. See the Perl NethServer::SSSD::startTls method for details.","title":"update"},{"location":"api/system-password/#input_1","text":"See the validate helper.","title":"Input"},{"location":"api/system-password/#output","text":"A simple success message, or specific Error codes.","title":"Output"},{"location":"api/system-proxy/","text":"system-proxy Read and set proxy record from configuration db. read Output The configuration key contains the proxy record. Output example: { status : , configuration : { props : { password : , user : , port : 3128 , host : 192.168.1.1 }, name : proxy , type : configuration } } validate Constraints host: a valid hostname, IP address or empty port: a valid TCP port or empty Input Input: an esmith db record in JSON format. Input example from: config getjson proxy : { props : { password : , user : , port : 3128 , host : 192.168.1.1 }, name : proxy , type : configuration } update Same input from validate helper.","title":"system-proxy"},{"location":"api/system-proxy/#system-proxy","text":"Read and set proxy record from configuration db.","title":"system-proxy"},{"location":"api/system-proxy/#read","text":"","title":"read"},{"location":"api/system-proxy/#output","text":"The configuration key contains the proxy record. Output example: { status : , configuration : { props : { password : , user : , port : 3128 , host : 192.168.1.1 }, name : proxy , type : configuration } }","title":"Output"},{"location":"api/system-proxy/#validate","text":"","title":"validate"},{"location":"api/system-proxy/#constraints","text":"host: a valid hostname, IP address or empty port: a valid TCP port or empty","title":"Constraints"},{"location":"api/system-proxy/#input","text":"Input: an esmith db record in JSON format. Input example from: config getjson proxy : { props : { password : , user : , port : 3128 , host : 192.168.1.1 }, name : proxy , type : configuration }","title":"Input"},{"location":"api/system-proxy/#update","text":"Same input from validate helper.","title":"update"},{"location":"api/system-roles/","text":"system-roles API to store the roles delegation of a group in the json file /etc/nethserver/cockpit/authorization/roles.json and to display the role delegation of a group in the group panel of cockpit read Valid actions are listed below. input roles It returns the list of role delegations for a group. system are delegation for the system modules applications are delegation for application modules editable is used for the domain admins group (set to '0') to prevent to remove delegation to that group, others group are set to '1' and you are able to remove the delegation. Example: { system : [ storage , disk-usage , certificates , dns , dhcp , backup , services , users-groups , network , ssh , tls-policy , trusted-networks , logs ], status : { editable : 0 }, applications : [] } Invocation example: echo { role : domain admins } | /usr/libexec/nethserver/api/system-roles/read | jq applications It returns the complete list of system and applications modules to create the cockpit dropdown menus for the role delegations in the groups panel Example: { system : [ storage , disk-usage , certificates , dns , dhcp , backup , services , users-groups , network , ssh , tls-policy , trusted-networks , logs ], status : { editable : 1 }, applications : [] } Invocation example: echo { action : applications } | /usr/libexec/nethserver/api/system-roles/read | jq Update Update the json file /etc/nethserver/cockpit/authorization/roles.json with the new role delegation and expand the file /etc/sudoers.d/30_nethserver_cockpit_roles input Invocation example: bash echo '{\"role\":\"sysadmin\",\"system\":[\"storage\",\"dhcp\",\"backup\"],\"applications\":[\"nethserver-mattermost\"]}' | /usr/bin/sudo /usr/libexec/nethserver/api/system-roles/update | jq Delete Update the json file /etc/nethserver/cockpit/authorization/roles.json by removing the role delegation of a group when it is deleted input Invocation example: bash echo '{\"role\":\"sysadmin\"}' | /usr/bin/sudo /usr/libexec/nethserver/api/system-roles/delete | jq","title":"system-roles"},{"location":"api/system-roles/#system-roles","text":"API to store the roles delegation of a group in the json file /etc/nethserver/cockpit/authorization/roles.json and to display the role delegation of a group in the group panel of cockpit","title":"system-roles"},{"location":"api/system-roles/#read","text":"Valid actions are listed below.","title":"read"},{"location":"api/system-roles/#input","text":"","title":"input"},{"location":"api/system-roles/#roles","text":"It returns the list of role delegations for a group. system are delegation for the system modules applications are delegation for application modules editable is used for the domain admins group (set to '0') to prevent to remove delegation to that group, others group are set to '1' and you are able to remove the delegation. Example: { system : [ storage , disk-usage , certificates , dns , dhcp , backup , services , users-groups , network , ssh , tls-policy , trusted-networks , logs ], status : { editable : 0 }, applications : [] } Invocation example: echo { role : domain admins } | /usr/libexec/nethserver/api/system-roles/read | jq","title":"roles"},{"location":"api/system-roles/#applications","text":"It returns the complete list of system and applications modules to create the cockpit dropdown menus for the role delegations in the groups panel Example: { system : [ storage , disk-usage , certificates , dns , dhcp , backup , services , users-groups , network , ssh , tls-policy , trusted-networks , logs ], status : { editable : 1 }, applications : [] } Invocation example: echo { action : applications } | /usr/libexec/nethserver/api/system-roles/read | jq","title":"applications"},{"location":"api/system-roles/#update","text":"Update the json file /etc/nethserver/cockpit/authorization/roles.json with the new role delegation and expand the file /etc/sudoers.d/30_nethserver_cockpit_roles","title":"Update"},{"location":"api/system-roles/#input_1","text":"Invocation example: bash echo '{\"role\":\"sysadmin\",\"system\":[\"storage\",\"dhcp\",\"backup\"],\"applications\":[\"nethserver-mattermost\"]}' | /usr/bin/sudo /usr/libexec/nethserver/api/system-roles/update | jq","title":"input"},{"location":"api/system-roles/#delete","text":"Update the json file /etc/nethserver/cockpit/authorization/roles.json by removing the role delegation of a group when it is deleted","title":"Delete"},{"location":"api/system-roles/#input_2","text":"Invocation example: bash echo '{\"role\":\"sysadmin\"}' | /usr/bin/sudo /usr/libexec/nethserver/api/system-roles/delete | jq","title":"input"},{"location":"api/system-routes/","text":"system-routes Manage static routes records from routes db. read Output Return all current configured static routes grouped by network interface. { status : null , configuration : { br0 : [ { Router : 10.10.10.1 , Metric : 12 , name : 10.10.10.0/24 , Description : t1 }, { Router : 11.11.11.1 , Metric : , name : 11.11.11.0/24 , Description : } ] } } validate Each request must contain an action field. Valid actions are: create update Constraints Constraints for action create : key ( name field): must be a valid CIDR, or 0.0.0.0/0 or default Device: an existing network inteface Router: a valid IPv4 address Metric: empty or positive integer Constraints for action update : key ( name field): must be a valid CIDR, or 0.0.0.0/0 or default Device: an existing network inteface Router: a valid IPv4 address Metric: empty or positive integer Input create Example: { action : create , Device : br0 , name : 11.11.12.0/24 , Router : 1.2.3.4 , Desription : desc 1 , Metric : } update Example: { action : update , Device : br0 , name : 11.11.12.0/24 , Router : 1.2.3.4 , Desription : desc 1 , Metric : } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : 11.11.12.0/24 , } Invocation example: echo { name : 11.11.12.0/24 } | ./delete","title":"system-routes"},{"location":"api/system-routes/#system-routes","text":"Manage static routes records from routes db.","title":"system-routes"},{"location":"api/system-routes/#read","text":"","title":"read"},{"location":"api/system-routes/#output","text":"Return all current configured static routes grouped by network interface. { status : null , configuration : { br0 : [ { Router : 10.10.10.1 , Metric : 12 , name : 10.10.10.0/24 , Description : t1 }, { Router : 11.11.11.1 , Metric : , name : 11.11.11.0/24 , Description : } ] } }","title":"Output"},{"location":"api/system-routes/#validate","text":"Each request must contain an action field. Valid actions are: create update","title":"validate"},{"location":"api/system-routes/#constraints","text":"Constraints for action create : key ( name field): must be a valid CIDR, or 0.0.0.0/0 or default Device: an existing network inteface Router: a valid IPv4 address Metric: empty or positive integer Constraints for action update : key ( name field): must be a valid CIDR, or 0.0.0.0/0 or default Device: an existing network inteface Router: a valid IPv4 address Metric: empty or positive integer","title":"Constraints"},{"location":"api/system-routes/#input","text":"","title":"Input"},{"location":"api/system-routes/#create","text":"Example: { action : create , Device : br0 , name : 11.11.12.0/24 , Router : 1.2.3.4 , Desription : desc 1 , Metric : }","title":"create"},{"location":"api/system-routes/#update","text":"Example: { action : update , Device : br0 , name : 11.11.12.0/24 , Router : 1.2.3.4 , Desription : desc 1 , Metric : }","title":"update"},{"location":"api/system-routes/#update_1","text":"Use the same input from validate.","title":"update"},{"location":"api/system-routes/#create_1","text":"Use the same input from validate.","title":"create"},{"location":"api/system-routes/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : 11.11.12.0/24 , } Invocation example: echo { name : 11.11.12.0/24 } | ./delete","title":"delete"},{"location":"api/system-services/","text":"system-services Get the status and control system services. read Input Take an action field. Available actions are: list : list current services status : read current service status from systemd list Example: { action : list } status Take an extra name field containing the name of the service Example: { action : status , name : httpd } Output list Current service status and preset is inside the status field. The configuration field contains all properties for each service. Example: { status : [ { status : 1 , name : chronyd , running : 1 }, { status : 1 , name : cockpit.socket , running : 1 }, ... ], configuration : [ { ports : { access : green , UDP : [ 123 ], TCP : [ 123 ] }, props : { NTPServer : pool.ntp.org }, name : chronyd , description : NTP client/server }, { ports : { access : green,red , UDP : [], TCP : [] }, props : {}, name : cockpit.socket , description : Cockpit Web Service Socket }, ... ] } status Return the status of the service from systemctl status . Text is returned under data field and it's ASCII encoded. Example { data : * httpd.service - The Apache HTTP Server\\n Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)\\n Active: active (running) since Tue 2018-11-13 14:09:54 CET; 21h ago\\n Docs: man:httpd(8)\\n man:apachectl(8)\\n Main PID: 3183 (httpd)\\n Status: \\ Total requests: 0; Current requests/sec: 0; Current traffic: 0 B/sec\\ \\n CGroup: /system.slice/httpd.service\\n |- 3183 /usr/sbin/httpd -DFOREGROUND\\n |- 4566 /usr/sbin/httpd -DFOREGROUND\\n |-32621 /usr/sbin/httpd -DFOREGROUND\\n |-32622 /usr/sbin/httpd -DFOREGROUND\\n |-32623 /usr/sbin/httpd -DFOREGROUND\\n |-32624 /usr/sbin/httpd -DFOREGROUND\\n `-32625 /usr/sbin/httpd -DFOREGROUND\\n\\nNov 13 14:55:45 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 14:55:45 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 15:13:32 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 15:13:33 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 15:45:33 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 15:45:33 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 16:16:04 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 16:16:04 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 16:16:30 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 16:16:30 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\n } update Execute actions on selected service. Available actions: stop: stop the service start: start the service restart: restart the service enable: enable and start the service disable: disable and start the service Input A JSON object with two fields: name: the service name action: the action to execute Example: { action : enable , name : httpd } Invocation example: echo { action : restart , name : httpd } | ./update","title":"system-services"},{"location":"api/system-services/#system-services","text":"Get the status and control system services.","title":"system-services"},{"location":"api/system-services/#read","text":"","title":"read"},{"location":"api/system-services/#input","text":"Take an action field. Available actions are: list : list current services status : read current service status from systemd","title":"Input"},{"location":"api/system-services/#list","text":"Example: { action : list }","title":"list"},{"location":"api/system-services/#status","text":"Take an extra name field containing the name of the service Example: { action : status , name : httpd }","title":"status"},{"location":"api/system-services/#output","text":"","title":"Output"},{"location":"api/system-services/#list_1","text":"Current service status and preset is inside the status field. The configuration field contains all properties for each service. Example: { status : [ { status : 1 , name : chronyd , running : 1 }, { status : 1 , name : cockpit.socket , running : 1 }, ... ], configuration : [ { ports : { access : green , UDP : [ 123 ], TCP : [ 123 ] }, props : { NTPServer : pool.ntp.org }, name : chronyd , description : NTP client/server }, { ports : { access : green,red , UDP : [], TCP : [] }, props : {}, name : cockpit.socket , description : Cockpit Web Service Socket }, ... ] }","title":"list"},{"location":"api/system-services/#status_1","text":"Return the status of the service from systemctl status . Text is returned under data field and it's ASCII encoded. Example { data : * httpd.service - The Apache HTTP Server\\n Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled; vendor preset: disabled)\\n Active: active (running) since Tue 2018-11-13 14:09:54 CET; 21h ago\\n Docs: man:httpd(8)\\n man:apachectl(8)\\n Main PID: 3183 (httpd)\\n Status: \\ Total requests: 0; Current requests/sec: 0; Current traffic: 0 B/sec\\ \\n CGroup: /system.slice/httpd.service\\n |- 3183 /usr/sbin/httpd -DFOREGROUND\\n |- 4566 /usr/sbin/httpd -DFOREGROUND\\n |-32621 /usr/sbin/httpd -DFOREGROUND\\n |-32622 /usr/sbin/httpd -DFOREGROUND\\n |-32623 /usr/sbin/httpd -DFOREGROUND\\n |-32624 /usr/sbin/httpd -DFOREGROUND\\n `-32625 /usr/sbin/httpd -DFOREGROUND\\n\\nNov 13 14:55:45 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 14:55:45 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 15:13:32 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 15:13:33 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 15:45:33 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 15:45:33 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 16:16:04 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 16:16:04 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\nNov 13 16:16:30 test.local.neth.eu systemd[1]: Reloading The Apache HTTP Server.\\nNov 13 16:16:30 test.local.neth.eu systemd[1]: Reloaded The Apache HTTP Server.\\n }","title":"status"},{"location":"api/system-services/#update","text":"Execute actions on selected service. Available actions: stop: stop the service start: start the service restart: restart the service enable: enable and start the service disable: disable and start the service","title":"update"},{"location":"api/system-services/#input_1","text":"A JSON object with two fields: name: the service name action: the action to execute Example: { action : enable , name : httpd } Invocation example: echo { action : restart , name : httpd } | ./update","title":"Input"},{"location":"api/system-settings/","text":"system-settings General module to manage multiple system settings: smart host configuration mail forward cockpit configuration log rotation configuration This API returns different output based on the running user. Do not invoke the helpers using sudo . This route is accessible from all users. read Read the configuration of all system settings and hints. Requires an action field. Valid actions are: settings : return all system settings hints : return the status of hints, if the user is non-root, hints are always disabled Input Input example: { action : hints } Output settings Example for normal user: { status : { canChangePassword : 1 , isRoot : 0 }, configuration : null } The canChangePassword field is set to 0 if the account provider is remote. Example for root user: { status : { canChangePassword : 1 , isRoot : 1 }, configuration : { cockpit : { LimitAccess : , access : green,red , ShowHints : enabled }, smarthost : { SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : , SmartHostStatus : disabled }, root : { SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [] }, logrotate :{ Compression : disabled , Rotate : weekly , Times : 52 } } } hints Example: { hints : enabled } validate Requires an action parameter. Valid actions are: root cockpit smarthost hints logrotate Constraints Constraints for root action: SenderAddress: a valid mail address KeepMessageCopy: can be \"yes\" or \"no\" EmailAddress: empty or an array of valid mail addresses Constraints for cockpit action: access: can be \"green\" or \"green,red\" LimitAccess: empty or an array of valid mail IP addresses or CIDR Constraints for smarthost action: SmartHostPort: valid TCP port SmartHostTlsStatus, SmartHostStatus: can be \"enabled\" or \"disabled\" SmartHostName: an host name or IP address SmartHostPassword, SmartHostUsername: anything Constraints for hints action: ShowHints: can be \"enabled\" or \"disabled\" Constraints for logrotate action: Compression: can be \"enabled\" or \"disabled\" Rotate: can be \"daily\", \"weekly\" or \"monthly\" Times: must be a positive integer number Input Takes the same parameters from read output plus an action field. root Input example: { action : root , SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [ mail1@nethserver.org , mail2@nethserver.org ] } cockpit Input example: { action : cockpit , access : green,red , LimitAccess : [ 192.168.1.1 ], ShowHints : enabled } smarthost Input example: { action : smarthost , SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : mymailserver.nethserver.org , SmartHostStatus : enabled } hints Input example: { action : hints , ShowHints : enabled , } logrotate Input example: { action : logrotate , Compression : disabled , Rotate : weekly , Times : 52 } update Use same input from validate. Input Takes the same actions from validate. root Same as validate. smarthost Same as validate. cockpit Same as validate. hints Same as validate. logrotate Same as validate hints Available hints: the root user is using the default password cockpit port is open to the red network without IP limitations Output Example: { link : , count : 2 , details : { Password : change_default_root_password , LimitAccess : limit_red_access_by_ip }, message : null }","title":"system-settings"},{"location":"api/system-settings/#system-settings","text":"General module to manage multiple system settings: smart host configuration mail forward cockpit configuration log rotation configuration This API returns different output based on the running user. Do not invoke the helpers using sudo . This route is accessible from all users.","title":"system-settings"},{"location":"api/system-settings/#read","text":"Read the configuration of all system settings and hints. Requires an action field. Valid actions are: settings : return all system settings hints : return the status of hints, if the user is non-root, hints are always disabled","title":"read"},{"location":"api/system-settings/#input","text":"Input example: { action : hints }","title":"Input"},{"location":"api/system-settings/#output","text":"","title":"Output"},{"location":"api/system-settings/#settings","text":"Example for normal user: { status : { canChangePassword : 1 , isRoot : 0 }, configuration : null } The canChangePassword field is set to 0 if the account provider is remote. Example for root user: { status : { canChangePassword : 1 , isRoot : 1 }, configuration : { cockpit : { LimitAccess : , access : green,red , ShowHints : enabled }, smarthost : { SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : , SmartHostStatus : disabled }, root : { SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [] }, logrotate :{ Compression : disabled , Rotate : weekly , Times : 52 } } }","title":"settings"},{"location":"api/system-settings/#hints","text":"Example: { hints : enabled }","title":"hints"},{"location":"api/system-settings/#validate","text":"Requires an action parameter. Valid actions are: root cockpit smarthost hints logrotate","title":"validate"},{"location":"api/system-settings/#constraints","text":"Constraints for root action: SenderAddress: a valid mail address KeepMessageCopy: can be \"yes\" or \"no\" EmailAddress: empty or an array of valid mail addresses Constraints for cockpit action: access: can be \"green\" or \"green,red\" LimitAccess: empty or an array of valid mail IP addresses or CIDR Constraints for smarthost action: SmartHostPort: valid TCP port SmartHostTlsStatus, SmartHostStatus: can be \"enabled\" or \"disabled\" SmartHostName: an host name or IP address SmartHostPassword, SmartHostUsername: anything Constraints for hints action: ShowHints: can be \"enabled\" or \"disabled\" Constraints for logrotate action: Compression: can be \"enabled\" or \"disabled\" Rotate: can be \"daily\", \"weekly\" or \"monthly\" Times: must be a positive integer number","title":"Constraints"},{"location":"api/system-settings/#input_1","text":"Takes the same parameters from read output plus an action field.","title":"Input"},{"location":"api/system-settings/#root","text":"Input example: { action : root , SenderAddress : no-reply@nethserver.org , KeepMessageCopy : yes , EmailAddress : [ mail1@nethserver.org , mail2@nethserver.org ] }","title":"root"},{"location":"api/system-settings/#cockpit","text":"Input example: { action : cockpit , access : green,red , LimitAccess : [ 192.168.1.1 ], ShowHints : enabled }","title":"cockpit"},{"location":"api/system-settings/#smarthost","text":"Input example: { action : smarthost , SmartHostPassword : , SmartHostPort : 25 , SmartHostTlsStatus : enabled , SmartHostUsername : , SmartHostName : mymailserver.nethserver.org , SmartHostStatus : enabled }","title":"smarthost"},{"location":"api/system-settings/#hints_1","text":"Input example: { action : hints , ShowHints : enabled , }","title":"hints"},{"location":"api/system-settings/#logrotate","text":"Input example: { action : logrotate , Compression : disabled , Rotate : weekly , Times : 52 }","title":"logrotate"},{"location":"api/system-settings/#update","text":"Use same input from validate.","title":"update"},{"location":"api/system-settings/#input_2","text":"Takes the same actions from validate.","title":"Input"},{"location":"api/system-settings/#root_1","text":"Same as validate.","title":"root"},{"location":"api/system-settings/#smarthost_1","text":"Same as validate.","title":"smarthost"},{"location":"api/system-settings/#cockpit_1","text":"Same as validate.","title":"cockpit"},{"location":"api/system-settings/#hints_2","text":"Same as validate.","title":"hints"},{"location":"api/system-settings/#logrotate_1","text":"Same as validate","title":"logrotate"},{"location":"api/system-settings/#hints_3","text":"Available hints: the root user is using the default password cockpit port is open to the red network without IP limitations","title":"hints"},{"location":"api/system-settings/#output_1","text":"Example: { link : , count : 2 , details : { Password : change_default_root_password , LimitAccess : limit_red_access_by_ip }, message : null }","title":"Output"},{"location":"api/system-shutdown/","text":"system-shutdown Reboot or power off the server. update Input A JSON containing an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"system-shutdown"},{"location":"api/system-shutdown/#system-shutdown","text":"Reboot or power off the server.","title":"system-shutdown"},{"location":"api/system-shutdown/#update","text":"","title":"update"},{"location":"api/system-shutdown/#input","text":"A JSON containing an action field. Valid actions are: poweroff and reboot . Example: { action : reboot }","title":"Input"},{"location":"api/system-status/","text":"system-status Return various information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime OS release load hardware vendor and product name read Output Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"system-status"},{"location":"api/system-status/#system-status","text":"Return various information on the server. The system status is composed by: CPU number and type kernel version memory statistics (in kB) uptime OS release load hardware vendor and product name","title":"system-status"},{"location":"api/system-status/#read","text":"","title":"read"},{"location":"api/system-status/#output","text":"Example: { configuration : , status : { cpu : { model : Intel(R) Core(TM) i5-3570 CPU @ 3.40GHz , n : 1 }, hardware : innotek GmbH VirtualBox , kernel : 3.10.0-693.21.1.el7.x86_64 , load : [ 0.18 , 0.06 , 0.06 ], memory : { Active : 364 , Active(anon) : 55 , Active(file) : 310 , AnonHugePages : 14 , AnonPages : 109 , Bounce : 0 , Buffers : 3 , Cached : 471 , CommitLimit : 1521 , Committed_AS : 574 , DirectMap2M : 938 , DirectMap4k : 86 , Dirty : 1 , HardwareCorrupted : 0 , HugePages_Free : 0 , HugePages_Rsvd : 0 , HugePages_Surp : 0 , HugePages_Total : 0 , Hugepagesize : 2 , Inactive : 218 , Inactive(anon) : 72 , Inactive(file) : 146 , KernelStack : 3 , Mapped : 39 , MemAvailable : 591 , MemFree : 170 , MemTotal : 993 , Mlocked : 0 , NFS_Unstable : 0 , PageTables : 18 , SReclaimable : 145 , SUnreclaim : 31 , Shmem : 18 , Slab : 176 , SwapCached : 1 , SwapFree : 1013 , SwapTotal : 1024 , Unevictable : 0 , VmallocChunk : 33554424 , VmallocTotal : 33554432 , VmallocUsed : 6 , Writeback : 0 , WritebackTmp : 0 }, release : NethServer release 7.5.1804 (final) , uptime : { days : 0 , hours : 1 , minutes : 34 , seconds : 42 } } }","title":"Output"},{"location":"api/system-subscription/","text":"system-subscription Manage server subscription on a Dartagnan server. read Output The configuration field contains info about the subscription. If the server is already registered, the status field contains all info retrieved from subscription-info script. Output example: { status : { id : 587 , creator_id : github|aaaaa , uuid : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx , secret : , tags : trial , public_ip : 1.2.3.4 , status : active , created : 2018-12-18T17:16:36.760373Z , notification : { emails : [ myuser@my.nethserver.com ] }, hostname : , alerts : 0 , subscription : { id : 587 , user_id : github|aaaaaa , status : valid , valid_from : 2018-12-18T17:16:36.760373Z , valid_until : 2019-01-17T17:16:36.760373Z , created : 2018-12-18T17:16:36.760374Z , subscription_plan : { id : 1 , code : trial , name : Trial Pizza , description : 30 Day Trial , price : 0 , period : 30 } } }, configuration : { PricingUrl : https://my.nethserver.com/?action=newServer , SystemId : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx , PortalURL : https://my.nethserver.com , enterprise : 0 } } validate Constraints Secret must be a valid secret, it's validated against the remote server Input Example: { action : register , Secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx } update Each request must have an action field. Available actions: register : register the server to the Dartagnan server send : send inventory to the Dartagnan server Input register Example: { action : register , Secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx } send Example: { action : send }","title":"system-subscription"},{"location":"api/system-subscription/#system-subscription","text":"Manage server subscription on a Dartagnan server.","title":"system-subscription"},{"location":"api/system-subscription/#read","text":"","title":"read"},{"location":"api/system-subscription/#output","text":"The configuration field contains info about the subscription. If the server is already registered, the status field contains all info retrieved from subscription-info script. Output example: { status : { id : 587 , creator_id : github|aaaaa , uuid : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx , secret : , tags : trial , public_ip : 1.2.3.4 , status : active , created : 2018-12-18T17:16:36.760373Z , notification : { emails : [ myuser@my.nethserver.com ] }, hostname : , alerts : 0 , subscription : { id : 587 , user_id : github|aaaaaa , status : valid , valid_from : 2018-12-18T17:16:36.760373Z , valid_until : 2019-01-17T17:16:36.760373Z , created : 2018-12-18T17:16:36.760374Z , subscription_plan : { id : 1 , code : trial , name : Trial Pizza , description : 30 Day Trial , price : 0 , period : 30 } } }, configuration : { PricingUrl : https://my.nethserver.com/?action=newServer , SystemId : xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx , PortalURL : https://my.nethserver.com , enterprise : 0 } }","title":"Output"},{"location":"api/system-subscription/#validate","text":"","title":"validate"},{"location":"api/system-subscription/#constraints","text":"Secret must be a valid secret, it's validated against the remote server","title":"Constraints"},{"location":"api/system-subscription/#input","text":"Example: { action : register , Secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx }","title":"Input"},{"location":"api/system-subscription/#update","text":"Each request must have an action field. Available actions: register : register the server to the Dartagnan server send : send inventory to the Dartagnan server","title":"update"},{"location":"api/system-subscription/#input_1","text":"","title":"Input"},{"location":"api/system-subscription/#register","text":"Example: { action : register , Secret : xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx }","title":"register"},{"location":"api/system-subscription/#send","text":"Example: { action : send }","title":"send"},{"location":"api/system-task/","text":"system-task Check if there is a running event. read Output If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progress of the running event.","title":"system-task"},{"location":"api/system-task/#system-task","text":"Check if there is a running event.","title":"system-task"},{"location":"api/system-task/#read","text":"","title":"read"},{"location":"api/system-task/#output","text":"If no running tasks is found, just output: { steps : -1 , event : null , message : no running tasks } Otherwise output the following once per second, until the event has been terminated: { steps : -1 , pid : 15018 , args : arg1 arg2 , event : nethserver-event-name } If steps has value equal to -1 , the system can't determinate the progress of the running event.","title":"Output"},{"location":"api/system-time/","text":"system-time Configure server date and time. read Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } } validate Constraints chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ). Input Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate update Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"system-time"},{"location":"api/system-time/#system-time","text":"Configure server date and time.","title":"system-time"},{"location":"api/system-time/#read","text":"Return the current date and time along with chronyd configuration. If chronyd status is disabled, the time configuration is manual. Example: { status : { datetime : Wed Sep 5 15:28:59 GMT 2018 , date : 2018-09-10 , time : 10:07 }, configuration : { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , timezones : [ Africa/Abidjan , Africa/Accra , ... UTC ] } }","title":"read"},{"location":"api/system-time/#validate","text":"","title":"validate"},{"location":"api/system-time/#constraints","text":"chronyd and timezone field from read input if chronyd status is disabled, the keys named date and time must contain the a valid time ( HH:MM ) and date ( YYYY-MM-DD ).","title":"Constraints"},{"location":"api/system-time/#input","text":"Example: { chronyd : { props : { UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } Invocation example: echo { chronyd :{ props :{ UDPPort : 123 , NTPServer : pool.ntp.org , status : enabled , access : green }, name : chronyd , type : service }, timezone : Africa/Monrovia , time : 10:33 , date : 2018-09-06 } | ./validate","title":"Input"},{"location":"api/system-time/#update","text":"Set current timezone and chronyd configuration. If chronyd is disabled, date and time is set to manual input values. Tries also to set PHP timezone (fails silently). Same input as validate helper.","title":"update"},{"location":"api/system-tls-policy/","text":"system-tls-policy Read ans set tls configuration record. read Output The tls record is returned inside the configuration field. { status : { available : [ 20180621 , 20180330 ] }, configuration : { props : { policy : 20180621 }, name : tls , type : configuration } } validate Constraints policy must be: 20180330 , 20180621 if a custom ecda certificate is set, check if current policy supports it Input The input must be an esmith record in JSON format. Input example: { props : { policy : 20180621 }, name : tls , type : configuration } Invocation example: echo { props :{ policy : 20180621 }, name : tls , type : configuration } | ./validate update The same from validate helper.","title":"system-tls-policy"},{"location":"api/system-tls-policy/#system-tls-policy","text":"Read ans set tls configuration record.","title":"system-tls-policy"},{"location":"api/system-tls-policy/#read","text":"","title":"read"},{"location":"api/system-tls-policy/#output","text":"The tls record is returned inside the configuration field. { status : { available : [ 20180621 , 20180330 ] }, configuration : { props : { policy : 20180621 }, name : tls , type : configuration } }","title":"Output"},{"location":"api/system-tls-policy/#validate","text":"","title":"validate"},{"location":"api/system-tls-policy/#constraints","text":"policy must be: 20180330 , 20180621 if a custom ecda certificate is set, check if current policy supports it","title":"Constraints"},{"location":"api/system-tls-policy/#input","text":"The input must be an esmith record in JSON format. Input example: { props : { policy : 20180621 }, name : tls , type : configuration } Invocation example: echo { props :{ policy : 20180621 }, name : tls , type : configuration } | ./validate","title":"Input"},{"location":"api/system-tls-policy/#update","text":"The same from validate helper.","title":"update"},{"location":"api/system-trusted-networks/","text":"system-trusted-networks Manage trusted networks records from networks db. read Output Return all current configured records from /usr/libexec/nethserver/trusted-networks inside the status field. Return all network records from networks database inside the `configuration field. { status : [ { provider : green , cidr : 192.168.1.0/24 , mask : 192.168.1.0/255.255.255.0 }, { provider : networksdb , cidr : 10.0.0.0/24 , mask : 10.0.0.0/255.255.255.0 } ], configuration : [ { props : { Mask : 255.255.255.0 , Description : my trusted net }, name : 10.0.0.0 , type : network } ] } validate Constraints the key ( name field) must be a valid IPv4 address Mask must be a valid IPv4 netmask the combination of name and Mask must be a valid network the network should not be used inside the system, for example on a network interface Input A network esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { Mask : 255.255.255.0 , Description : my net 11 }, name : 11.0.0.0 , type : network , action : update } update Use the same input from validate. create Use the same input from validate. delete Pass the the key to be deleted inside the name field. Example: { name : 11.0.0.0 , action : delete } Invocation example: echo { name : 11.0.0.0 , action : delete } | ./delete","title":"system-trusted-networks"},{"location":"api/system-trusted-networks/#system-trusted-networks","text":"Manage trusted networks records from networks db.","title":"system-trusted-networks"},{"location":"api/system-trusted-networks/#read","text":"","title":"read"},{"location":"api/system-trusted-networks/#output","text":"Return all current configured records from /usr/libexec/nethserver/trusted-networks inside the status field. Return all network records from networks database inside the `configuration field. { status : [ { provider : green , cidr : 192.168.1.0/24 , mask : 192.168.1.0/255.255.255.0 }, { provider : networksdb , cidr : 10.0.0.0/24 , mask : 10.0.0.0/255.255.255.0 } ], configuration : [ { props : { Mask : 255.255.255.0 , Description : my trusted net }, name : 10.0.0.0 , type : network } ] }","title":"Output"},{"location":"api/system-trusted-networks/#validate","text":"","title":"validate"},{"location":"api/system-trusted-networks/#constraints","text":"the key ( name field) must be a valid IPv4 address Mask must be a valid IPv4 netmask the combination of name and Mask must be a valid network the network should not be used inside the system, for example on a network interface","title":"Constraints"},{"location":"api/system-trusted-networks/#input","text":"A network esmith db record in JSON format. The record must also contain an action fields which can be: - create for new dns record creation - update when updating and existing record Example: { props : { Mask : 255.255.255.0 , Description : my net 11 }, name : 11.0.0.0 , type : network , action : update }","title":"Input"},{"location":"api/system-trusted-networks/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/system-trusted-networks/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-trusted-networks/#delete","text":"Pass the the key to be deleted inside the name field. Example: { name : 11.0.0.0 , action : delete } Invocation example: echo { name : 11.0.0.0 , action : delete } | ./delete","title":"delete"},{"location":"api/system-users/","text":"system-users Manage users and groups. Access to remote account providers is provided in read-only mode. read Input Available actions are: list-users list-groups user-membership group-members list-users Example: { action : list-users } list-groups Example: { action : list-groups } user-membership The user field is the username. Example: { action : user-membership , user : user } group-members The group fiels is the name of the group. Example: { action : group-members , group : group1 } Output list-users Return the list of users. The groups field is always empty. Example: { admin : { locked : 1 , gecos : admin , expired : 0 , groups : [], shell : /usr/libexec/openssh/sftp-server , new : 1 , expires : no }, giacomo : { locked : 0 , gecos : Test User , expired : 0 , groups : [], shell : /bin/bash , new : 0 , expires : yes } ... } list-groups Return the list of groups. The members field is always empty. Example: { administrators : { members : [] }, g1 : { members : [] } ... } user-membership Return the list of groups belonging to the user. Example: [ group1 , ... ] group-members Return the list of users inside a group. Example: [ user1 ] validate Validate user and group CRUD operations. Each validator takes and action argument. Valid actions are: user-create user-update user-delete change-password group-create group-update group-delete Constraints Users Action user-create : name: a valid Unix user name groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator Action user-update : name: an existing user groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` Action user-delete : name: check if the user can be deleted using user-delete system validator Action change-password : name: an existing user newPassword: if not empty, must match with confirmNewPassword; also checked against password-strength system validator Groups Action group-create : name: a valid Unix user name members: empty or a list of existing users Action group-update : name: an existing group members: empty or a list of existing users Action group-delete : name: check if the user can be deleted using group-delete system validator Input user-create Example: { action : user-create , name : user1 , groups : [], gecos : First User , expires : no , shell : /bin/bash , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 } user-update Example: { action : user-update , name : user1 , groups : [ group1 , group2 ], gecos : First User , expires : no , shell : /usr/libexec/openssh/sftp-server } user-delete Example: { action : user-delete , name : user1 } change-password Example: { action : change-password , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 , name : user1 } group-create Example: { action : group-create , name : group2 , members : [ user1 ] } group-update Example: { action : group-updte , name : group2 , members : [ user1 , user2 ] } group-delete Example: { action : group-delete , name : root } update Use the same input from validate. Besides actions implemented inside the validate, there is also an action called toggle-lock . toggle-lock If the user is locked, unlock it. If the user is unlocked, lock it. Input example: { action : toggle-lock , name : user2 } create Use the same input from validate. delete Use the same input from validate.","title":"system-users"},{"location":"api/system-users/#system-users","text":"Manage users and groups. Access to remote account providers is provided in read-only mode.","title":"system-users"},{"location":"api/system-users/#read","text":"","title":"read"},{"location":"api/system-users/#input","text":"Available actions are: list-users list-groups user-membership group-members","title":"Input"},{"location":"api/system-users/#list-users","text":"Example: { action : list-users }","title":"list-users"},{"location":"api/system-users/#list-groups","text":"Example: { action : list-groups }","title":"list-groups"},{"location":"api/system-users/#user-membership","text":"The user field is the username. Example: { action : user-membership , user : user }","title":"user-membership"},{"location":"api/system-users/#group-members","text":"The group fiels is the name of the group. Example: { action : group-members , group : group1 }","title":"group-members"},{"location":"api/system-users/#output","text":"","title":"Output"},{"location":"api/system-users/#list-users_1","text":"Return the list of users. The groups field is always empty. Example: { admin : { locked : 1 , gecos : admin , expired : 0 , groups : [], shell : /usr/libexec/openssh/sftp-server , new : 1 , expires : no }, giacomo : { locked : 0 , gecos : Test User , expired : 0 , groups : [], shell : /bin/bash , new : 0 , expires : yes } ... }","title":"list-users"},{"location":"api/system-users/#list-groups_1","text":"Return the list of groups. The members field is always empty. Example: { administrators : { members : [] }, g1 : { members : [] } ... }","title":"list-groups"},{"location":"api/system-users/#user-membership_1","text":"Return the list of groups belonging to the user. Example: [ group1 , ... ]","title":"user-membership"},{"location":"api/system-users/#group-members_1","text":"Return the list of users inside a group. Example: [ user1 ]","title":"group-members"},{"location":"api/system-users/#validate","text":"Validate user and group CRUD operations. Each validator takes and action argument. Valid actions are: user-create user-update user-delete change-password group-create group-update group-delete","title":"validate"},{"location":"api/system-users/#constraints","text":"","title":"Constraints"},{"location":"api/system-users/#users","text":"Action user-create : name: a valid Unix user name groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` newPassword: if not empty, must match with confirmNewPassword; also checked agains password-strength system validator Action user-update : name: an existing user groups: empty or a list of existing groups gecos: name and surname expires: can be yes or no shell: can be /bin/bash' or '/usr/libexec/openssh/sftp-server` Action user-delete : name: check if the user can be deleted using user-delete system validator Action change-password : name: an existing user newPassword: if not empty, must match with confirmNewPassword; also checked against password-strength system validator","title":"Users"},{"location":"api/system-users/#groups","text":"Action group-create : name: a valid Unix user name members: empty or a list of existing users Action group-update : name: an existing group members: empty or a list of existing users Action group-delete : name: check if the user can be deleted using group-delete system validator","title":"Groups"},{"location":"api/system-users/#input_1","text":"","title":"Input"},{"location":"api/system-users/#user-create","text":"Example: { action : user-create , name : user1 , groups : [], gecos : First User , expires : no , shell : /bin/bash , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 }","title":"user-create"},{"location":"api/system-users/#user-update","text":"Example: { action : user-update , name : user1 , groups : [ group1 , group2 ], gecos : First User , expires : no , shell : /usr/libexec/openssh/sftp-server }","title":"user-update"},{"location":"api/system-users/#user-delete","text":"Example: { action : user-delete , name : user1 }","title":"user-delete"},{"location":"api/system-users/#change-password","text":"Example: { action : change-password , newPassword : Nethesis,1234 , confirmNewPassword : Nethesis,1234 , name : user1 }","title":"change-password"},{"location":"api/system-users/#group-create","text":"Example: { action : group-create , name : group2 , members : [ user1 ] }","title":"group-create"},{"location":"api/system-users/#group-update","text":"Example: { action : group-updte , name : group2 , members : [ user1 , user2 ] }","title":"group-update"},{"location":"api/system-users/#group-delete","text":"Example: { action : group-delete , name : root }","title":"group-delete"},{"location":"api/system-users/#update","text":"Use the same input from validate. Besides actions implemented inside the validate, there is also an action called toggle-lock .","title":"update"},{"location":"api/system-users/#toggle-lock","text":"If the user is locked, unlock it. If the user is unlocked, lock it. Input example: { action : toggle-lock , name : user2 }","title":"toggle-lock"},{"location":"api/system-users/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/system-users/#delete","text":"Use the same input from validate.","title":"delete"},{"location":"api/nethserver-firewall-base/connections/","text":"connections Manage conntrack table. read Input The read API requires an action field. Valid actions: conntrack protocols stats protocols List the available protocols along with their states. Example: { action : protocols } conntrack Return the list of connections filtered by protocol and state . If limit is set, return only the first limit connections. Example: { action : conntrack , protocol : tcp , state : ESTABLISHED , limit : 25 } stats Return the connection number in the last time seconds from netdata. If time field is not defined, default is 900 seconds. Example: { action : stats , time : 900 } Output protocols Example: { protocols : { udp : [], tcp : [ CLOSE , CLOSE_WAIT , ESTABLISHED , FIN_WAIT , LAST_ACK , LISTEN , NONE , SYN_SENT , SYN_RECV , TIME_WAIT ], icmp : [] } } conntrack List active connections sorted in descending order by: bytes_total , if accounting is enabled timeout , if accounting is disabled Example: { connections : [ { provider : , bytes_total : 220177 , dport_reply : 55142 , dst_reply : 80.17.99.73 , protocol : tcp , bytes : 97369 , nat : 1 , zone : 0 , status : ASSURED , sport_reply : 443 , packets : 1503 , packets_reply : 1016 , dport : 443 , state : ESTABLISHED , mark : 0x5b03 , use : 2 , timeout : 431978 , ndpi : SSL , src_reply : 54.208.55.14 , src : 192.168.5.31 , prio : low , layer : ipv4 , bytes_reply : 122808 , packets_total : 2519 , sport : 55142 , dst : 4.8.55.14 }, ... ] } stats Example: { data : [ [ 1553521929 , 422 ], [ 1553521928 , 423 ] ], labels : [ time , connections ] } delete The read API requires an action field. Valid actions: flush connection Input flush Delete all active connections. Example: { action : flush } connection Delete selected connction. Required fields are: protocol , src , dst . If protocol is udp or tcp , also sport and dport are required. Example: { action : connection , protocol : icmp , dport : 389 , sport : 46286 , src : 10.0.0.212 , dst : 1.2.3.4 }","title":"connections"},{"location":"api/nethserver-firewall-base/connections/#connections","text":"Manage conntrack table.","title":"connections"},{"location":"api/nethserver-firewall-base/connections/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/connections/#input","text":"The read API requires an action field. Valid actions: conntrack protocols stats","title":"Input"},{"location":"api/nethserver-firewall-base/connections/#protocols","text":"List the available protocols along with their states. Example: { action : protocols }","title":"protocols"},{"location":"api/nethserver-firewall-base/connections/#conntrack","text":"Return the list of connections filtered by protocol and state . If limit is set, return only the first limit connections. Example: { action : conntrack , protocol : tcp , state : ESTABLISHED , limit : 25 }","title":"conntrack"},{"location":"api/nethserver-firewall-base/connections/#stats","text":"Return the connection number in the last time seconds from netdata. If time field is not defined, default is 900 seconds. Example: { action : stats , time : 900 }","title":"stats"},{"location":"api/nethserver-firewall-base/connections/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/connections/#protocols_1","text":"Example: { protocols : { udp : [], tcp : [ CLOSE , CLOSE_WAIT , ESTABLISHED , FIN_WAIT , LAST_ACK , LISTEN , NONE , SYN_SENT , SYN_RECV , TIME_WAIT ], icmp : [] } }","title":"protocols"},{"location":"api/nethserver-firewall-base/connections/#conntrack_1","text":"List active connections sorted in descending order by: bytes_total , if accounting is enabled timeout , if accounting is disabled Example: { connections : [ { provider : , bytes_total : 220177 , dport_reply : 55142 , dst_reply : 80.17.99.73 , protocol : tcp , bytes : 97369 , nat : 1 , zone : 0 , status : ASSURED , sport_reply : 443 , packets : 1503 , packets_reply : 1016 , dport : 443 , state : ESTABLISHED , mark : 0x5b03 , use : 2 , timeout : 431978 , ndpi : SSL , src_reply : 54.208.55.14 , src : 192.168.5.31 , prio : low , layer : ipv4 , bytes_reply : 122808 , packets_total : 2519 , sport : 55142 , dst : 4.8.55.14 }, ... ] }","title":"conntrack"},{"location":"api/nethserver-firewall-base/connections/#stats_1","text":"Example: { data : [ [ 1553521929 , 422 ], [ 1553521928 , 423 ] ], labels : [ time , connections ] }","title":"stats"},{"location":"api/nethserver-firewall-base/connections/#delete","text":"The read API requires an action field. Valid actions: flush connection","title":"delete"},{"location":"api/nethserver-firewall-base/connections/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/connections/#flush","text":"Delete all active connections. Example: { action : flush }","title":"flush"},{"location":"api/nethserver-firewall-base/connections/#connection","text":"Delete selected connction. Required fields are: protocol , src , dst . If protocol is udp or tcp , also sport and dport are required. Example: { action : connection , protocol : icmp , dport : 389 , sport : 46286 , src : 10.0.0.212 , dst : 1.2.3.4 }","title":"connection"},{"location":"api/nethserver-firewall-base/dashboard/","text":"dashboard NethServer firewall basic statistics. read No input is required. Output Return basic statistics for the dashaboard. The hosts field contains the number of ARP entries. Output example: { connections : { udp : 1 , tcp : 3 , total : 5 , icmp : 1 }, providers : { red1 : { status : 0 , weight : 1 , nslabel : myprovider interface : ens7 } }, services : {}, statistics : { hosts : 8 , tc : 3 , portforward : 2 , routes : 0 , objects : { fwtimes : 1 , iprange : 1 , hosts : 11 , cidr : 2 , fwservices : 49 , zones : 1 , host-group : 1 }, fwrules : 20 , vpn : 0 } }","title":"dashboard"},{"location":"api/nethserver-firewall-base/dashboard/#dashboard","text":"NethServer firewall basic statistics.","title":"dashboard"},{"location":"api/nethserver-firewall-base/dashboard/#read","text":"No input is required.","title":"read"},{"location":"api/nethserver-firewall-base/dashboard/#output","text":"Return basic statistics for the dashaboard. The hosts field contains the number of ARP entries. Output example: { connections : { udp : 1 , tcp : 3 , total : 5 , icmp : 1 }, providers : { red1 : { status : 0 , weight : 1 , nslabel : myprovider interface : ens7 } }, services : {}, statistics : { hosts : 8 , tc : 3 , portforward : 2 , routes : 0 , objects : { fwtimes : 1 , iprange : 1 , hosts : 11 , cidr : 2 , fwservices : 49 , zones : 1 , host-group : 1 }, fwrules : 20 , vpn : 0 } }","title":"Output"},{"location":"api/nethserver-firewall-base/local-rules/","text":"local-rules Manage rules for traffic from/to the firewall itself read Input The read API requires an action field. Valid actions: list roles policies services Example: { action : roles } list The list action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : list , expand : true } Output list Return the list of traffic rules from/to the firewall. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ { Log : none , Time : null , Position : 1 , status : enabled , Service : { name : any , type : fwservice }, Action : accept , Dst : { name : green , type : role }, id : 40 , Src : { name : fw , type : fw }, type : rule }, ... ] } roles Return the list of valid roles to be used on rule creation/edit. Example: { roles : [ green , red , vpn , ivpn ] } policies Return the list of builtin policies parsing /etc/shorewall/policy . Example: { policies : [ { Log : none , Position : 1 , Time : null , status : enabled , Service : null , Action : accept , Dst : { name : red , type : role }, Src : { name : green , type : role }, type : policy , id : 10001 }, ... ] } services Return the list of services on the firewall using the the rule object format. Example: { services : [ ... { Log : none , Position : 5 , Time : null , status : enabled , Service : { Ports : 110,143,4190,993,995 , name : dovecot , Protocol : tcp , type : service }, Action : accept , Dst : { zone : fw , name : fw , type : role }, Src : { zone : green , name : green , type : role }, type : service , id : 5 }, ... ] validate Constraints The request must contain an action field. Valid actions are: create-rule update-rule Constraints for create-rule and update-rule : All constraints from firewall rules Src or Dst must be fw If Dst is fw , Service must be a service object type from configuration db Input create-rule Example: { action : create-rule , Log : none , Time : null , Position : 4 , status : enabled , Service : { Ports : [ 53 , 67 , 69 , 53 ], name : dnsmasq , Protocol : tcpudp , type : service , Description : }, Action : accept , Dst : { name : fw , type : fw }, id : null , Src : { Address : 11.11.11.0/24 , name : cidr2 , Description : , type : cidr }, type : rule , Description : } update-rule Example: { action : update-rule , Log : none , Time : null , Position : 4 , status : enabled , Service : { Ports : [ 53 , 67 , 69 , 53 ], name : dnsmasq , Protocol : tcpudp , type : service , Description : }, Action : accept , Dst : { name : fw , type : fw }, id : 44 , Src : { Address : 11.11.11.0/24 , name : cidr2 , Description : , type : cidr }, type : rule , Description : } update Use the same input from validate, supports also the reorder action. reorder The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] } create Use the same input from validate. delete Example: { name : 123 }","title":"local-rules"},{"location":"api/nethserver-firewall-base/local-rules/#local-rules","text":"Manage rules for traffic from/to the firewall itself","title":"local-rules"},{"location":"api/nethserver-firewall-base/local-rules/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/local-rules/#input","text":"The read API requires an action field. Valid actions: list roles policies services Example: { action : roles }","title":"Input"},{"location":"api/nethserver-firewall-base/local-rules/#list","text":"The list action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : list , expand : true }","title":"list"},{"location":"api/nethserver-firewall-base/local-rules/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/local-rules/#list_1","text":"Return the list of traffic rules from/to the firewall. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ { Log : none , Time : null , Position : 1 , status : enabled , Service : { name : any , type : fwservice }, Action : accept , Dst : { name : green , type : role }, id : 40 , Src : { name : fw , type : fw }, type : rule }, ... ] }","title":"list"},{"location":"api/nethserver-firewall-base/local-rules/#roles","text":"Return the list of valid roles to be used on rule creation/edit. Example: { roles : [ green , red , vpn , ivpn ] }","title":"roles"},{"location":"api/nethserver-firewall-base/local-rules/#policies","text":"Return the list of builtin policies parsing /etc/shorewall/policy . Example: { policies : [ { Log : none , Position : 1 , Time : null , status : enabled , Service : null , Action : accept , Dst : { name : red , type : role }, Src : { name : green , type : role }, type : policy , id : 10001 }, ... ] }","title":"policies"},{"location":"api/nethserver-firewall-base/local-rules/#services","text":"Return the list of services on the firewall using the the rule object format. Example: { services : [ ... { Log : none , Position : 5 , Time : null , status : enabled , Service : { Ports : 110,143,4190,993,995 , name : dovecot , Protocol : tcp , type : service }, Action : accept , Dst : { zone : fw , name : fw , type : role }, Src : { zone : green , name : green , type : role }, type : service , id : 5 }, ... ]","title":"services"},{"location":"api/nethserver-firewall-base/local-rules/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/local-rules/#constraints","text":"The request must contain an action field. Valid actions are: create-rule update-rule Constraints for create-rule and update-rule : All constraints from firewall rules Src or Dst must be fw If Dst is fw , Service must be a service object type from configuration db","title":"Constraints"},{"location":"api/nethserver-firewall-base/local-rules/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/local-rules/#create-rule","text":"Example: { action : create-rule , Log : none , Time : null , Position : 4 , status : enabled , Service : { Ports : [ 53 , 67 , 69 , 53 ], name : dnsmasq , Protocol : tcpudp , type : service , Description : }, Action : accept , Dst : { name : fw , type : fw }, id : null , Src : { Address : 11.11.11.0/24 , name : cidr2 , Description : , type : cidr }, type : rule , Description : }","title":"create-rule"},{"location":"api/nethserver-firewall-base/local-rules/#update-rule","text":"Example: { action : update-rule , Log : none , Time : null , Position : 4 , status : enabled , Service : { Ports : [ 53 , 67 , 69 , 53 ], name : dnsmasq , Protocol : tcpudp , type : service , Description : }, Action : accept , Dst : { name : fw , type : fw }, id : 44 , Src : { Address : 11.11.11.0/24 , name : cidr2 , Description : , type : cidr }, type : rule , Description : }","title":"update-rule"},{"location":"api/nethserver-firewall-base/local-rules/#update","text":"Use the same input from validate, supports also the reorder action.","title":"update"},{"location":"api/nethserver-firewall-base/local-rules/#reorder","text":"The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] }","title":"reorder"},{"location":"api/nethserver-firewall-base/local-rules/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/nethserver-firewall-base/local-rules/#delete","text":"Example: { name : 123 }","title":"delete"},{"location":"api/nethserver-firewall-base/objects/","text":"objects Manage fireall objects read Input The read API requires an action field. Valid actions: hosts services wans protocols zones time-conditions interfaces applications local-services hosts Return the list of hosts from hosts database. Example: { action : hosts } services Return the list of services from fwservices db. Example: { action : services } wans Return the list of red IPs. Example: { action : wans } protocols Return the list of protocols from /etc/protocols . Example: { action : protocols } zones Return the list of zones from networks db. Example: { action : zones } applications Return the list of NDPI applications/protocols. Example: { action : applications } time-conditions Return the list of time conditions from fwtimes db. Example: { action : time-conditions } interfaces Return the list of interfaces from networks db. Example: { action : interfaces } local-services Return the list of services running on the firewall itself (from configuration db). Example: { action : local-services } Output hosts Output example: { hosts : [ { IpAddress : 192.168.1.1 , name : a123 , Description : 123 }, ... ] } services Example: { services : [ { Ports : [ 67 , 68 ], name : dhcp , Protocol : tcpudp , type : fwservice , Description : }, ... ] } wans Example: { wans : [ 192.168.100.194 , 10.0.0.212 , 1.2.3.4 ] } protocols Example: { protocols : [ gre , ah , tcp , ... ] } zones Example: { zones : [ { Network : 192.168.66.3/14 , name : test , Description : test , Interface : eth0 }, ... ] } time-conditions Example: { time-conditions : [ { WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 00:00 , TimeStop : 02:30 , name : test , Description : test }, ... ] } interfaces Example: { interfaces : [ eth0 , eth1 , ... ] } applications Return the list of NDPI applications/protocols. Each protocol has an associated icon, icon mapping is configured inside the ndpi-icons.json file. Example: { applications : [ { icon : fa-circle , name : Unknown , id : 00 }, { icon : fa-cloud-download , name : FTP_CONTROL , id : 01 }, ... ] } local-services Return the list of services running on the firewall itself. Example: { local-services : [ { Ports : [ 123 ], name : chronyd , Protocol : udp , type : service , Description : }, ... ] } validate Constraints The request must contain an action field. Valid actions are: create-host update-host delete-host create-service update-service delete-service create-zone update-zone delete-zone create-time-condition update-time-condition delete-time-condition create-cidr-sub update-cidr-sub delete-cidr-sub create-ip-range update-ip-range delete-ip-range create-host-group update-host-group delete-host-group Constraints for create-host : name: must be a non-existing class IpAddress: must be valid ipv4 Description: optional description portforwards: optional list of valid portforwards to set host as DstHost rules: optional, if set to \"1\" substitute all IpAddress inside the fwrules db with newly created host object Constraints for update-host : name: must be an existing host IpAddress: must be valid ipv4 Description: optional description Constraints for delete-host : name: must be an existing host Constraints for create-service : name: must be a non-existing service Ports: must be a port range or a valid list of ports Protocol: must be one this vaules: 'tcp','udp','tcpudp' Description: optional description Constraints for update-service : name: must be a existing service Ports: must be a port range or a valid list of ports Protocol: must be one this vaules: 'tcp','udp','tcpudp' Description: optional description Constraints for delete-service : name: must be an existing service Constraints for create-zone : name: must be a non-existing zone Network: must be a valid CIDR block Interface: must be an existing interface name Description: optional description Constraints for update-zone : name: must be a existing zone Network: must be a valid CIDR block Interface: must be an existing interface name Description: optional description Constraints for delete-zone : name: must be an existing zone Constraints for create-time-condition : name: must be a non-existing time condition WeekDays: a list of day where apply the time condition, valid values: Mon , Tue , Wed , Thu , Fri , Sat , Sun TimeStart: time to start the time condition TimeStop: time to stop the time condition Description: optional description Constraints for update-time-condition : name: must be a existing time condition WeekDays: a list of day where apply the time condition, valid values: Mon , Tue , Wed , Thu , Fri , Sat , Sun TimeStart: time to start the time condition TimeStop: time to stop the time condition Description: optional description Constraints for delete-time-condition : name: must be an existing time condition Constraints for create-cidr-sub : name: must be a non-existing cidr subnet Address: must be a valid CIDR block Description: optional description rules: optional, if set to \"1\" substitute all IpAddress inside the fwrules db with newly created host object Constraints for update-cidr-sub : name: must be a existing cidr subnet Address: must be a valid CIDR block Description: optional description Constraints for delete-cidr-sub : name: must be an existing cidr subnet Constraints for create-ip-range : name: must be a non-existing ip range Start: start of the range, must be a valid ipv4 End: end of the range, must be a valid ipv4 Description: optional description Constraints for update-ip-range : name: must be a existing ip range Start: start of the range, must be a valid ipv4 End: end of the range, must be a valid ipv4 Description: optional description Constraints for delete-ip-range : name: must be an existing ip range Constraints for create-host-group : name: must be a non-existing host group Members: must be a list of existing host Description: optional description Constraints for update-host-group : name: must be a existing host group Members: must be a list of existing host Description: optional description Constraints for delete-host-group : name: must be an existing host group Input create-host Example: { action : create-host , IpAddress : 192.168.1.1 , name : a123 , Description : 123 , portforwards : [ 1 , 3 ], rules : 1 } update-host Example: { action : update-host , IpAddress : 192.168.1.3 , name : a123 , Description : 123 , } delete-host Example: { action : delete-host , name : a123 } create-service Example: { action : create-service , Ports : [ 80 ], name : httpd , Protocol : tcp , Description : } update-service Example: { action : create-service , Ports : [ 80 , 443 ], name : httpd , Protocol : tcp , Description : } delete-service Example: { action : delete-service , name : httpd } create-zone Example: { action : create-zone , Network : 192.168.66.3/14 , name : test , Description : test , Interface : eth0 } update-zone Example: { action : update-zone , Network : 192.168.66.7/14 , name : test , Description : test , Interface : eth1 } delete-zone Example: { action : delete-zone , name : test } create-time-condition Example: { action : create-time-condition , WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 01:30 , TimeStop : 02:00 , name : test , Description : test } update-time-condition Example: { action : update-time-condition , WeekDays : [ Thu , Fri , Sat , Sun ], TimeStart : 01:30 , TimeStop : 05:00 , name : test , Description : test } delete-time-condition Example: { action : delete-time-condition , name : test } create-cidr-sub Example: { action : create-cidr-sub , Address : 10.10.10.0/24 , name : cidr1 , Description : , rules : 0 } update-cidr-sub Example: { action : update-cidr-sub , Address : 10.10.30.0/24 , name : cidr1 , Description : } delete-cidr-sub Example: { action : delete-cidr-sub , name : cidr1 } create-ip-range Example: { action : create-ip-range , End : 192.168.1.10 , name : range1 , Start : 192.168.1.100 , Description : } update-ip-range Example: { action : update-ip-range , End : 192.168.1.10 , name : range1 , Start : 192.168.1.100 , Description : } delete-ip-range Example: { action : delete-ip-range , name : range1 } create-host-group Example: { action : create-host-group , Members : [ host1 ], name : g1 , Description : } update-host-group Example: { action : update-host-group , Members : [ host1 ], name : g1 , Description : } delete-host-group Example: { action : delete-host-group , name : g1 } update Same input format from validate action. create It uses the same format from input action. delete It uses the same format from input action.","title":"objects"},{"location":"api/nethserver-firewall-base/objects/#objects","text":"Manage fireall objects","title":"objects"},{"location":"api/nethserver-firewall-base/objects/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/objects/#input","text":"The read API requires an action field. Valid actions: hosts services wans protocols zones time-conditions interfaces applications local-services","title":"Input"},{"location":"api/nethserver-firewall-base/objects/#hosts","text":"Return the list of hosts from hosts database. Example: { action : hosts }","title":"hosts"},{"location":"api/nethserver-firewall-base/objects/#services","text":"Return the list of services from fwservices db. Example: { action : services }","title":"services"},{"location":"api/nethserver-firewall-base/objects/#wans","text":"Return the list of red IPs. Example: { action : wans }","title":"wans"},{"location":"api/nethserver-firewall-base/objects/#protocols","text":"Return the list of protocols from /etc/protocols . Example: { action : protocols }","title":"protocols"},{"location":"api/nethserver-firewall-base/objects/#zones","text":"Return the list of zones from networks db. Example: { action : zones }","title":"zones"},{"location":"api/nethserver-firewall-base/objects/#applications","text":"Return the list of NDPI applications/protocols. Example: { action : applications }","title":"applications"},{"location":"api/nethserver-firewall-base/objects/#time-conditions","text":"Return the list of time conditions from fwtimes db. Example: { action : time-conditions }","title":"time-conditions"},{"location":"api/nethserver-firewall-base/objects/#interfaces","text":"Return the list of interfaces from networks db. Example: { action : interfaces }","title":"interfaces"},{"location":"api/nethserver-firewall-base/objects/#local-services","text":"Return the list of services running on the firewall itself (from configuration db). Example: { action : local-services }","title":"local-services"},{"location":"api/nethserver-firewall-base/objects/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/objects/#hosts_1","text":"Output example: { hosts : [ { IpAddress : 192.168.1.1 , name : a123 , Description : 123 }, ... ] }","title":"hosts"},{"location":"api/nethserver-firewall-base/objects/#services_1","text":"Example: { services : [ { Ports : [ 67 , 68 ], name : dhcp , Protocol : tcpudp , type : fwservice , Description : }, ... ] }","title":"services"},{"location":"api/nethserver-firewall-base/objects/#wans_1","text":"Example: { wans : [ 192.168.100.194 , 10.0.0.212 , 1.2.3.4 ] }","title":"wans"},{"location":"api/nethserver-firewall-base/objects/#protocols_1","text":"Example: { protocols : [ gre , ah , tcp , ... ] }","title":"protocols"},{"location":"api/nethserver-firewall-base/objects/#zones_1","text":"Example: { zones : [ { Network : 192.168.66.3/14 , name : test , Description : test , Interface : eth0 }, ... ] }","title":"zones"},{"location":"api/nethserver-firewall-base/objects/#time-conditions_1","text":"Example: { time-conditions : [ { WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 00:00 , TimeStop : 02:30 , name : test , Description : test }, ... ] }","title":"time-conditions"},{"location":"api/nethserver-firewall-base/objects/#interfaces_1","text":"Example: { interfaces : [ eth0 , eth1 , ... ] }","title":"interfaces"},{"location":"api/nethserver-firewall-base/objects/#applications_1","text":"Return the list of NDPI applications/protocols. Each protocol has an associated icon, icon mapping is configured inside the ndpi-icons.json file. Example: { applications : [ { icon : fa-circle , name : Unknown , id : 00 }, { icon : fa-cloud-download , name : FTP_CONTROL , id : 01 }, ... ] }","title":"applications"},{"location":"api/nethserver-firewall-base/objects/#local-services_1","text":"Return the list of services running on the firewall itself. Example: { local-services : [ { Ports : [ 123 ], name : chronyd , Protocol : udp , type : service , Description : }, ... ] }","title":"local-services"},{"location":"api/nethserver-firewall-base/objects/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/objects/#constraints","text":"The request must contain an action field. Valid actions are: create-host update-host delete-host create-service update-service delete-service create-zone update-zone delete-zone create-time-condition update-time-condition delete-time-condition create-cidr-sub update-cidr-sub delete-cidr-sub create-ip-range update-ip-range delete-ip-range create-host-group update-host-group delete-host-group Constraints for create-host : name: must be a non-existing class IpAddress: must be valid ipv4 Description: optional description portforwards: optional list of valid portforwards to set host as DstHost rules: optional, if set to \"1\" substitute all IpAddress inside the fwrules db with newly created host object Constraints for update-host : name: must be an existing host IpAddress: must be valid ipv4 Description: optional description Constraints for delete-host : name: must be an existing host Constraints for create-service : name: must be a non-existing service Ports: must be a port range or a valid list of ports Protocol: must be one this vaules: 'tcp','udp','tcpudp' Description: optional description Constraints for update-service : name: must be a existing service Ports: must be a port range or a valid list of ports Protocol: must be one this vaules: 'tcp','udp','tcpudp' Description: optional description Constraints for delete-service : name: must be an existing service Constraints for create-zone : name: must be a non-existing zone Network: must be a valid CIDR block Interface: must be an existing interface name Description: optional description Constraints for update-zone : name: must be a existing zone Network: must be a valid CIDR block Interface: must be an existing interface name Description: optional description Constraints for delete-zone : name: must be an existing zone Constraints for create-time-condition : name: must be a non-existing time condition WeekDays: a list of day where apply the time condition, valid values: Mon , Tue , Wed , Thu , Fri , Sat , Sun TimeStart: time to start the time condition TimeStop: time to stop the time condition Description: optional description Constraints for update-time-condition : name: must be a existing time condition WeekDays: a list of day where apply the time condition, valid values: Mon , Tue , Wed , Thu , Fri , Sat , Sun TimeStart: time to start the time condition TimeStop: time to stop the time condition Description: optional description Constraints for delete-time-condition : name: must be an existing time condition Constraints for create-cidr-sub : name: must be a non-existing cidr subnet Address: must be a valid CIDR block Description: optional description rules: optional, if set to \"1\" substitute all IpAddress inside the fwrules db with newly created host object Constraints for update-cidr-sub : name: must be a existing cidr subnet Address: must be a valid CIDR block Description: optional description Constraints for delete-cidr-sub : name: must be an existing cidr subnet Constraints for create-ip-range : name: must be a non-existing ip range Start: start of the range, must be a valid ipv4 End: end of the range, must be a valid ipv4 Description: optional description Constraints for update-ip-range : name: must be a existing ip range Start: start of the range, must be a valid ipv4 End: end of the range, must be a valid ipv4 Description: optional description Constraints for delete-ip-range : name: must be an existing ip range Constraints for create-host-group : name: must be a non-existing host group Members: must be a list of existing host Description: optional description Constraints for update-host-group : name: must be a existing host group Members: must be a list of existing host Description: optional description Constraints for delete-host-group : name: must be an existing host group","title":"Constraints"},{"location":"api/nethserver-firewall-base/objects/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/objects/#create-host","text":"Example: { action : create-host , IpAddress : 192.168.1.1 , name : a123 , Description : 123 , portforwards : [ 1 , 3 ], rules : 1 }","title":"create-host"},{"location":"api/nethserver-firewall-base/objects/#update-host","text":"Example: { action : update-host , IpAddress : 192.168.1.3 , name : a123 , Description : 123 , }","title":"update-host"},{"location":"api/nethserver-firewall-base/objects/#delete-host","text":"Example: { action : delete-host , name : a123 }","title":"delete-host"},{"location":"api/nethserver-firewall-base/objects/#create-service","text":"Example: { action : create-service , Ports : [ 80 ], name : httpd , Protocol : tcp , Description : }","title":"create-service"},{"location":"api/nethserver-firewall-base/objects/#update-service","text":"Example: { action : create-service , Ports : [ 80 , 443 ], name : httpd , Protocol : tcp , Description : }","title":"update-service"},{"location":"api/nethserver-firewall-base/objects/#delete-service","text":"Example: { action : delete-service , name : httpd }","title":"delete-service"},{"location":"api/nethserver-firewall-base/objects/#create-zone","text":"Example: { action : create-zone , Network : 192.168.66.3/14 , name : test , Description : test , Interface : eth0 }","title":"create-zone"},{"location":"api/nethserver-firewall-base/objects/#update-zone","text":"Example: { action : update-zone , Network : 192.168.66.7/14 , name : test , Description : test , Interface : eth1 }","title":"update-zone"},{"location":"api/nethserver-firewall-base/objects/#delete-zone","text":"Example: { action : delete-zone , name : test }","title":"delete-zone"},{"location":"api/nethserver-firewall-base/objects/#create-time-condition","text":"Example: { action : create-time-condition , WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 01:30 , TimeStop : 02:00 , name : test , Description : test }","title":"create-time-condition"},{"location":"api/nethserver-firewall-base/objects/#update-time-condition","text":"Example: { action : update-time-condition , WeekDays : [ Thu , Fri , Sat , Sun ], TimeStart : 01:30 , TimeStop : 05:00 , name : test , Description : test }","title":"update-time-condition"},{"location":"api/nethserver-firewall-base/objects/#delete-time-condition","text":"Example: { action : delete-time-condition , name : test }","title":"delete-time-condition"},{"location":"api/nethserver-firewall-base/objects/#create-cidr-sub","text":"Example: { action : create-cidr-sub , Address : 10.10.10.0/24 , name : cidr1 , Description : , rules : 0 }","title":"create-cidr-sub"},{"location":"api/nethserver-firewall-base/objects/#update-cidr-sub","text":"Example: { action : update-cidr-sub , Address : 10.10.30.0/24 , name : cidr1 , Description : }","title":"update-cidr-sub"},{"location":"api/nethserver-firewall-base/objects/#delete-cidr-sub","text":"Example: { action : delete-cidr-sub , name : cidr1 }","title":"delete-cidr-sub"},{"location":"api/nethserver-firewall-base/objects/#create-ip-range","text":"Example: { action : create-ip-range , End : 192.168.1.10 , name : range1 , Start : 192.168.1.100 , Description : }","title":"create-ip-range"},{"location":"api/nethserver-firewall-base/objects/#update-ip-range","text":"Example: { action : update-ip-range , End : 192.168.1.10 , name : range1 , Start : 192.168.1.100 , Description : }","title":"update-ip-range"},{"location":"api/nethserver-firewall-base/objects/#delete-ip-range","text":"Example: { action : delete-ip-range , name : range1 }","title":"delete-ip-range"},{"location":"api/nethserver-firewall-base/objects/#create-host-group","text":"Example: { action : create-host-group , Members : [ host1 ], name : g1 , Description : }","title":"create-host-group"},{"location":"api/nethserver-firewall-base/objects/#update-host-group","text":"Example: { action : update-host-group , Members : [ host1 ], name : g1 , Description : }","title":"update-host-group"},{"location":"api/nethserver-firewall-base/objects/#delete-host-group","text":"Example: { action : delete-host-group , name : g1 }","title":"delete-host-group"},{"location":"api/nethserver-firewall-base/objects/#update","text":"Same input format from validate action.","title":"update"},{"location":"api/nethserver-firewall-base/objects/#create","text":"It uses the same format from input action.","title":"create"},{"location":"api/nethserver-firewall-base/objects/#delete","text":"It uses the same format from input action.","title":"delete"},{"location":"api/nethserver-firewall-base/port-forward/","text":"port-forward Manage port forward. read Input The read API requires an action field. Valid actions: list Return the list of port forward. Example: { action : list } Output Return the list of port forward. Example: { portforward : { 192.168.1.129 : { info : { type : raw }, rules : [ { Log : none , Proto : tcp , status : enabled , name : 3 , Service : , Allow : , DstHost : 192.168.1.129 , Dst : , type : pf , Src : [ 88 ], Description : , OriDst : } ] }, host;myhost : { info : { IpAddress : 192.168.1.22 , type : host , Description : this is my myhost }, rules : [ { Proto : tcp , Log : info , status : enabled , name : 4 , Service : , Allow : , DstHost : host;myhost , Dst : , type : pf , Src : [ 456 ], Description : , OriDst : }, ... ] } ... } validate Constraints The request must contain an action field. Valid actions are: create update delete Constraints for create : Proto: tcp , udp or tcpudp , ah , gre , ah , esp Src: a list of port number or ranges in the form xxxx:yyyy , must be an empty list if protocol is not tcp, udp or tcpudp Dst: a port number, if empty the value of Src is used, must be empty if protocol is not tcp, udp or tcpudp DstHost: a destination host, can be an IP address or a host firewall object OriDst: an IP address or empty Allow: allowed ip address or network, see SOURCE at http://www.shorewall.net/4.2/manpages/shorewall-rules.html status: can be enabled or disabled Description: optional description Log: none or info . If value is info , all matched packets will be logged in /var/log/firewall.log . Defaults to none Constraints for update : Same as constraints as action create with addition filed name : name: a valid port forward name Constraints for delete : name: a valid port forward name Input Example: { action : update , Log : none , Proto : tcp , status : enabled , name : 3 , Service : , Allow : , DstHost : 192.168.5.129 , Dst : , type : pf , Src : [ 88 ], Description : , OriDst : } update Use the same input from validate. create Use the same input from validate. delete Use the same input from validate.","title":"port-forward"},{"location":"api/nethserver-firewall-base/port-forward/#port-forward","text":"Manage port forward.","title":"port-forward"},{"location":"api/nethserver-firewall-base/port-forward/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/port-forward/#input","text":"The read API requires an action field. Valid actions: list Return the list of port forward. Example: { action : list }","title":"Input"},{"location":"api/nethserver-firewall-base/port-forward/#output","text":"Return the list of port forward. Example: { portforward : { 192.168.1.129 : { info : { type : raw }, rules : [ { Log : none , Proto : tcp , status : enabled , name : 3 , Service : , Allow : , DstHost : 192.168.1.129 , Dst : , type : pf , Src : [ 88 ], Description : , OriDst : } ] }, host;myhost : { info : { IpAddress : 192.168.1.22 , type : host , Description : this is my myhost }, rules : [ { Proto : tcp , Log : info , status : enabled , name : 4 , Service : , Allow : , DstHost : host;myhost , Dst : , type : pf , Src : [ 456 ], Description : , OriDst : }, ... ] } ... }","title":"Output"},{"location":"api/nethserver-firewall-base/port-forward/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/port-forward/#constraints","text":"The request must contain an action field. Valid actions are: create update delete Constraints for create : Proto: tcp , udp or tcpudp , ah , gre , ah , esp Src: a list of port number or ranges in the form xxxx:yyyy , must be an empty list if protocol is not tcp, udp or tcpudp Dst: a port number, if empty the value of Src is used, must be empty if protocol is not tcp, udp or tcpudp DstHost: a destination host, can be an IP address or a host firewall object OriDst: an IP address or empty Allow: allowed ip address or network, see SOURCE at http://www.shorewall.net/4.2/manpages/shorewall-rules.html status: can be enabled or disabled Description: optional description Log: none or info . If value is info , all matched packets will be logged in /var/log/firewall.log . Defaults to none Constraints for update : Same as constraints as action create with addition filed name : name: a valid port forward name Constraints for delete : name: a valid port forward name","title":"Constraints"},{"location":"api/nethserver-firewall-base/port-forward/#input_1","text":"Example: { action : update , Log : none , Proto : tcp , status : enabled , name : 3 , Service : , Allow : , DstHost : 192.168.5.129 , Dst : , type : pf , Src : [ 88 ], Description : , OriDst : }","title":"Input"},{"location":"api/nethserver-firewall-base/port-forward/#update","text":"Use the same input from validate.","title":"update"},{"location":"api/nethserver-firewall-base/port-forward/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/nethserver-firewall-base/port-forward/#delete","text":"Use the same input from validate.","title":"delete"},{"location":"api/nethserver-firewall-base/rules/","text":"rules Manage rules for traffic which traverse the firewall. read Input The read API requires an action field. Valid actions: list roles policies Example: { action : roles } list The list action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : list , expand : true } Output list Return the list of firewall rules. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ ... { Log : info , Time : { WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 00:30 , TimeStop : 01:30 , name : cond1 , type : time , Description : }, Position : 2 , status : enabled , Service : { Ports : [ 25 , 110 , 143 , 465 , 587 , 993 , 995 ], name : email-grp , Protocol : tcp , type : fwservice , Description : }, Action : accept , Dst : { name : any , type : any }, id : 36 , Src : { zone : red , IpAddress : 192.168.5.11 , name : andrea , type : host }, type : rule , Description : desc1 }, ... ] } Example with expand set to false : { rules : [ ... { Log : info , Time : { name : cond1 , type : time }, Position : 2 , status : enabled , Service : { name : email-grp , type : fwservice }, Action : accept , Dst : { name : any , type : any }, id : 36 , Src : { name : andrea , type : host }, type : rule , Description : desc1 }, ... ] } If Src or Dst is a raw value, is presented in the following format. The object field reppresents the correspective object which can be created from the raw value. Example: { ... Src : { name : 192.168.1.1 , type : raw , object : host }, Dst : { name : 192.168.20.0/24 , type : raw , object : cidr }, ... } roles Return the list of valid roles to be used on rule creation/edit. Example: { roles : [ green , red , vpn , ivpn ] } policies Return the list of builtin policies parsing /etc/shorewall/policy . Example: { policies : [ { Log : none , Position : 1 , Time : null , status : enabled , Service : null , Action : accept , Dst : { name : red , type : role }, Src : { name : green , type : role }, type : policy , id : 10001 }, ... ] } validate Constraints The request must contain an action field. Valid actions are: create-rule update-rule Constraints for create-rule and update-rule : Action: must be one between 'accept', 'reject', 'drop' Src and Dst: a valid firewall object or an IP/CIDR if type is set to 'raw' Time: empty or a time object from fwtimes database Position: a positive integer Service: a service object from fwservices database or 'any' status: can be enabled or disabled Log: none or info . If value is info , all matched packets will be logged in /var/log/firewall.log . Defaults to none Description: optional description id: must exists on update Input create-rule Example with Src using a firewall object: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : myhost , type : host }, type : rule , action : create-rule } Example with Src using a raw value: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : 192.168.1.1 , type : raw }, type : rule , action : create-rule } update-rule Example with Src using a firewall object: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : myhost , type : host }, type : rule , id : 10 , action : create-rule } update Use the same input from validate, supports also the reorder action. reorder The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] } create Use the same input from validate. delete Example: { name : 123 }","title":"rules"},{"location":"api/nethserver-firewall-base/rules/#rules","text":"Manage rules for traffic which traverse the firewall.","title":"rules"},{"location":"api/nethserver-firewall-base/rules/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/rules/#input","text":"The read API requires an action field. Valid actions: list roles policies Example: { action : roles }","title":"Input"},{"location":"api/nethserver-firewall-base/rules/#list","text":"The list action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : list , expand : true }","title":"list"},{"location":"api/nethserver-firewall-base/rules/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/rules/#list_1","text":"Return the list of firewall rules. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ ... { Log : info , Time : { WeekDays : [ Mon , Tue , Wed , Thu , Fri , Sat , Sun ], TimeStart : 00:30 , TimeStop : 01:30 , name : cond1 , type : time , Description : }, Position : 2 , status : enabled , Service : { Ports : [ 25 , 110 , 143 , 465 , 587 , 993 , 995 ], name : email-grp , Protocol : tcp , type : fwservice , Description : }, Action : accept , Dst : { name : any , type : any }, id : 36 , Src : { zone : red , IpAddress : 192.168.5.11 , name : andrea , type : host }, type : rule , Description : desc1 }, ... ] } Example with expand set to false : { rules : [ ... { Log : info , Time : { name : cond1 , type : time }, Position : 2 , status : enabled , Service : { name : email-grp , type : fwservice }, Action : accept , Dst : { name : any , type : any }, id : 36 , Src : { name : andrea , type : host }, type : rule , Description : desc1 }, ... ] } If Src or Dst is a raw value, is presented in the following format. The object field reppresents the correspective object which can be created from the raw value. Example: { ... Src : { name : 192.168.1.1 , type : raw , object : host }, Dst : { name : 192.168.20.0/24 , type : raw , object : cidr }, ... }","title":"list"},{"location":"api/nethserver-firewall-base/rules/#roles","text":"Return the list of valid roles to be used on rule creation/edit. Example: { roles : [ green , red , vpn , ivpn ] }","title":"roles"},{"location":"api/nethserver-firewall-base/rules/#policies","text":"Return the list of builtin policies parsing /etc/shorewall/policy . Example: { policies : [ { Log : none , Position : 1 , Time : null , status : enabled , Service : null , Action : accept , Dst : { name : red , type : role }, Src : { name : green , type : role }, type : policy , id : 10001 }, ... ] }","title":"policies"},{"location":"api/nethserver-firewall-base/rules/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/rules/#constraints","text":"The request must contain an action field. Valid actions are: create-rule update-rule Constraints for create-rule and update-rule : Action: must be one between 'accept', 'reject', 'drop' Src and Dst: a valid firewall object or an IP/CIDR if type is set to 'raw' Time: empty or a time object from fwtimes database Position: a positive integer Service: a service object from fwservices database or 'any' status: can be enabled or disabled Log: none or info . If value is info , all matched packets will be logged in /var/log/firewall.log . Defaults to none Description: optional description id: must exists on update","title":"Constraints"},{"location":"api/nethserver-firewall-base/rules/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/rules/#create-rule","text":"Example with Src using a firewall object: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : myhost , type : host }, type : rule , action : create-rule } Example with Src using a raw value: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : 192.168.1.1 , type : raw }, type : rule , action : create-rule }","title":"create-rule"},{"location":"api/nethserver-firewall-base/rules/#update-rule","text":"Example with Src using a firewall object: { Log : none , Time : null , Position : 4 , status : enabledd , Service : { name : any , type : fwservice }, Action : reject , Dst : { name : red , type : role }, Src : { name : myhost , type : host }, type : rule , id : 10 , action : create-rule }","title":"update-rule"},{"location":"api/nethserver-firewall-base/rules/#update","text":"Use the same input from validate, supports also the reorder action.","title":"update"},{"location":"api/nethserver-firewall-base/rules/#reorder","text":"The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] }","title":"reorder"},{"location":"api/nethserver-firewall-base/rules/#create","text":"Use the same input from validate.","title":"create"},{"location":"api/nethserver-firewall-base/rules/#delete","text":"Example: { name : 123 }","title":"delete"},{"location":"api/nethserver-firewall-base/settings/","text":"settings Configure global flags and apply/reset/restore the firewall configuration. read Input The read API requires an action field. Valid actions: settings status Example: { action : settings } Output settings Return the firewall global properties. Output example: { settings : { ExternalPing : enabled , Policy : permissive , MACValidationPolicy : drop , MACValidation : disabled , HairpinNat : disabled } } status Return the status of the firewall. Available fields: CanRestore : set to 1 if firewall backup is present and can be restored, 0 otherwise CanApply : set to 1 if firewall configuration has been changed but not applied, 0 otherwise. If CanApply is set to 1, the configuration can be reset to the running one. Output example: { status : { CanRestore : 1 , CanApply : 0 } } validate Constraints The request must contain an action field. Valid actions are: `settings' Constraints for settings action: MACValidation, ExternalPing and HairpinNat: can be enabled or disabled Policy: can be permissive or strict MACValidationPolicy: can be drop or accept Input settings Example: { action : settings , ExternalPing : enabled , Policy : permissive , MACValidationPolicy : drop , MACValidation : disabled } update Same input format from validate for settings action. Execute the firewall-adjust event. reset Reset the configuration to the running one. No event is fired. Example: { action : reset } apply Apply modified configuration. Execute the firewall-adjust event. Example: { action : apply } restore Restore the configuration previous to the last apply . Execute the firewall-adjust event. Example: { action : restore } discard Discard any saved backup, no more restore actions will be possible. Example: { action : discard }","title":"settings"},{"location":"api/nethserver-firewall-base/settings/#settings","text":"Configure global flags and apply/reset/restore the firewall configuration.","title":"settings"},{"location":"api/nethserver-firewall-base/settings/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/settings/#input","text":"The read API requires an action field. Valid actions: settings status Example: { action : settings }","title":"Input"},{"location":"api/nethserver-firewall-base/settings/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/settings/#settings_1","text":"Return the firewall global properties. Output example: { settings : { ExternalPing : enabled , Policy : permissive , MACValidationPolicy : drop , MACValidation : disabled , HairpinNat : disabled } }","title":"settings"},{"location":"api/nethserver-firewall-base/settings/#status","text":"Return the status of the firewall. Available fields: CanRestore : set to 1 if firewall backup is present and can be restored, 0 otherwise CanApply : set to 1 if firewall configuration has been changed but not applied, 0 otherwise. If CanApply is set to 1, the configuration can be reset to the running one. Output example: { status : { CanRestore : 1 , CanApply : 0 } }","title":"status"},{"location":"api/nethserver-firewall-base/settings/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/settings/#constraints","text":"The request must contain an action field. Valid actions are: `settings' Constraints for settings action: MACValidation, ExternalPing and HairpinNat: can be enabled or disabled Policy: can be permissive or strict MACValidationPolicy: can be drop or accept","title":"Constraints"},{"location":"api/nethserver-firewall-base/settings/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/settings/#settings_2","text":"Example: { action : settings , ExternalPing : enabled , Policy : permissive , MACValidationPolicy : drop , MACValidation : disabled }","title":"settings"},{"location":"api/nethserver-firewall-base/settings/#update","text":"Same input format from validate for settings action. Execute the firewall-adjust event.","title":"update"},{"location":"api/nethserver-firewall-base/settings/#reset","text":"Reset the configuration to the running one. No event is fired. Example: { action : reset }","title":"reset"},{"location":"api/nethserver-firewall-base/settings/#apply","text":"Apply modified configuration. Execute the firewall-adjust event. Example: { action : apply }","title":"apply"},{"location":"api/nethserver-firewall-base/settings/#restore","text":"Restore the configuration previous to the last apply . Execute the firewall-adjust event. Example: { action : restore }","title":"restore"},{"location":"api/nethserver-firewall-base/settings/#discard","text":"Discard any saved backup, no more restore actions will be possible. Example: { action : discard }","title":"discard"},{"location":"api/nethserver-firewall-base/snat/","text":"snat Manage source nat. read Input The read API requires an action field. Valid actions: list list Return the list of red aliases with associated forward host (if any). Example: { action : list } Output Output example: { aliases : [ { FwObjectNat : host;myhost , name : ens8:0 , ipaddr : 1.2.3.4 }, ... ] } validate Constraints The request must contain an action field. Valid actions are: create update delete Constraints for all actions: name: an existing alias FwObjectNat: null, empty or valid host object Input Example: { action : update , FwObjectNat : , name : ens8:0 } update Same input format from validate action. create It uses the same format from validate action. delete It uses the same format from validate action.","title":"snat"},{"location":"api/nethserver-firewall-base/snat/#snat","text":"Manage source nat.","title":"snat"},{"location":"api/nethserver-firewall-base/snat/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/snat/#input","text":"The read API requires an action field. Valid actions: list","title":"Input"},{"location":"api/nethserver-firewall-base/snat/#list","text":"Return the list of red aliases with associated forward host (if any). Example: { action : list }","title":"list"},{"location":"api/nethserver-firewall-base/snat/#output","text":"Output example: { aliases : [ { FwObjectNat : host;myhost , name : ens8:0 , ipaddr : 1.2.3.4 }, ... ] }","title":"Output"},{"location":"api/nethserver-firewall-base/snat/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/snat/#constraints","text":"The request must contain an action field. Valid actions are: create update delete Constraints for all actions: name: an existing alias FwObjectNat: null, empty or valid host object","title":"Constraints"},{"location":"api/nethserver-firewall-base/snat/#input_1","text":"Example: { action : update , FwObjectNat : , name : ens8:0 }","title":"Input"},{"location":"api/nethserver-firewall-base/snat/#update","text":"Same input format from validate action.","title":"update"},{"location":"api/nethserver-firewall-base/snat/#create","text":"It uses the same format from validate action.","title":"create"},{"location":"api/nethserver-firewall-base/snat/#delete","text":"It uses the same format from validate action.","title":"delete"},{"location":"api/nethserver-firewall-base/traffic-shaping/","text":"traffic-shaping Manage traffic shaping configuration. read Input The read API requires an action field. Valid actions: classes stats rules classes Return the list of traffic shaping classes from tc database. Example: { action : classes } stats Retrieve tc class usage for each red interface from the last time seconds. Data are read from netdata. If time is not set, default is 30 seconds. Example: { action : stats , time : 30 } rules List the traffic shaping rules. The rules action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : rules , expand : true } Output classes Output example: { status : null , configuration : { classes : [ { MinOutputRate : 10 , BindTo : [], name : high , MaxOutputRate : , MaxInputRate : , MinInputRate : 10 , Description : , Unit : % }, { MinOutputRate : , BindTo : [], name : low , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : , Description : , Unit : % }, { MinOutputRate : 1 , BindTo : [ ens7 , ens8 ], name : voip , MaxOutputRate : , MaxInputRate : , MinInputRate : 1 , Description : VoIP , Unit : kbps } ] } } stats Output example: { red1 : { out : { data : [ [ 1553521843 , 0 , 0 , 0 ], [ 1553521842 , 0 , 0 , 0 ] ], labels : [ time , default , low , high ] }, in : { data : [ [ 1553521843 , 0 , 0 , 0 ], [ 1553521842 , 0 , 0 , 0 ] ], labels : [ time , default , low , high ] } }, ... } If data for red interfaces is not available (e.g. netdata is not running): { ens7 : null , ens8 : null } rules List all traffic shaping (QoS) rules. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ { Log : none , Time : null , Position : 640 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { zone : red , IpAddress : 90.147.160.70-90.147.160.73 , name : garr , type : iprange }, id : 34 , type : rule , Src : { name : any , type : any } } ... ] } Example with expand set to false : { rules : [ { Log : none , Time : null , Position : 640 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : garr , type : iprange }, id : 34 , type : rule , Src : { name : any , type : any } } ... ] } validate Constraints The request must contain an action field. Valid actions are: create-class update-class create-rule update-rule Common constratins: MaxInputRate, MaxOutputRate, MinInputRate, MinOutputRate: empty or an integer greater than 0 Unit: can be kbps or % BindTo: empty or a list of existing red interfaces Constraints for create-class : name: must be a non-existing class Constraints for update-class : name: must be an existing class Constraints for delete-class : name: must be an existing class the class must not be used in any firewall rule Constraints for create-rule and update-rule : All constraints from firewall rules Action: must be an existing class in the form class; name Src: can't be red role Dst: can be red role or host or iprange or zone or cidr id: must exists on update Input create-class Example: { action : create-class , MinOutputRate : , BindTo : [ ens7 ], name : myclass , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : null , Description : , Unit : % } update-class Example: { action : update-class , MinOutputRate : , BindTo : [ ens7 , ens8 ], name : myclass , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : null , Description : , Unit : kbps } delete-class Example: { action : delete-class , name : myclass } create-rule Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : red , type : role }, Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule } edit-rule Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : red , type : role }, id : 6 , Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule } update Use the same input from validate, supports also the reorder action. reorder The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] } create It uses the same format from input action. create-default Create default classes. Example: { action : create-default } delete Takes an action field. Valid actions are: delete-class delete-rule Example: { action : delete-class , name : 123 }","title":"traffic-shaping"},{"location":"api/nethserver-firewall-base/traffic-shaping/#traffic-shaping","text":"Manage traffic shaping configuration.","title":"traffic-shaping"},{"location":"api/nethserver-firewall-base/traffic-shaping/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/traffic-shaping/#input","text":"The read API requires an action field. Valid actions: classes stats rules","title":"Input"},{"location":"api/nethserver-firewall-base/traffic-shaping/#classes","text":"Return the list of traffic shaping classes from tc database. Example: { action : classes }","title":"classes"},{"location":"api/nethserver-firewall-base/traffic-shaping/#stats","text":"Retrieve tc class usage for each red interface from the last time seconds. Data are read from netdata. If time is not set, default is 30 seconds. Example: { action : stats , time : 30 }","title":"stats"},{"location":"api/nethserver-firewall-base/traffic-shaping/#rules","text":"List the traffic shaping rules. The rules action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : rules , expand : true }","title":"rules"},{"location":"api/nethserver-firewall-base/traffic-shaping/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/traffic-shaping/#classes_1","text":"Output example: { status : null , configuration : { classes : [ { MinOutputRate : 10 , BindTo : [], name : high , MaxOutputRate : , MaxInputRate : , MinInputRate : 10 , Description : , Unit : % }, { MinOutputRate : , BindTo : [], name : low , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : , Description : , Unit : % }, { MinOutputRate : 1 , BindTo : [ ens7 , ens8 ], name : voip , MaxOutputRate : , MaxInputRate : , MinInputRate : 1 , Description : VoIP , Unit : kbps } ] } }","title":"classes"},{"location":"api/nethserver-firewall-base/traffic-shaping/#stats_1","text":"Output example: { red1 : { out : { data : [ [ 1553521843 , 0 , 0 , 0 ], [ 1553521842 , 0 , 0 , 0 ] ], labels : [ time , default , low , high ] }, in : { data : [ [ 1553521843 , 0 , 0 , 0 ], [ 1553521842 , 0 , 0 , 0 ] ], labels : [ time , default , low , high ] } }, ... } If data for red interfaces is not available (e.g. netdata is not running): { ens7 : null , ens8 : null }","title":"stats"},{"location":"api/nethserver-firewall-base/traffic-shaping/#rules_1","text":"List all traffic shaping (QoS) rules. The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 12 , count : 5 }, rules : [ { Log : none , Time : null , Position : 640 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { zone : red , IpAddress : 90.147.160.70-90.147.160.73 , name : garr , type : iprange }, id : 34 , type : rule , Src : { name : any , type : any } } ... ] } Example with expand set to false : { rules : [ { Log : none , Time : null , Position : 640 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : garr , type : iprange }, id : 34 , type : rule , Src : { name : any , type : any } } ... ] }","title":"rules"},{"location":"api/nethserver-firewall-base/traffic-shaping/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/traffic-shaping/#constraints","text":"The request must contain an action field. Valid actions are: create-class update-class create-rule update-rule Common constratins: MaxInputRate, MaxOutputRate, MinInputRate, MinOutputRate: empty or an integer greater than 0 Unit: can be kbps or % BindTo: empty or a list of existing red interfaces Constraints for create-class : name: must be a non-existing class Constraints for update-class : name: must be an existing class Constraints for delete-class : name: must be an existing class the class must not be used in any firewall rule Constraints for create-rule and update-rule : All constraints from firewall rules Action: must be an existing class in the form class; name Src: can't be red role Dst: can be red role or host or iprange or zone or cidr id: must exists on update","title":"Constraints"},{"location":"api/nethserver-firewall-base/traffic-shaping/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/traffic-shaping/#create-class","text":"Example: { action : create-class , MinOutputRate : , BindTo : [ ens7 ], name : myclass , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : null , Description : , Unit : % }","title":"create-class"},{"location":"api/nethserver-firewall-base/traffic-shaping/#update-class","text":"Example: { action : update-class , MinOutputRate : , BindTo : [ ens7 , ens8 ], name : myclass , MaxOutputRate : 90 , MaxInputRate : 90 , MinInputRate : null , Description : , Unit : kbps }","title":"update-class"},{"location":"api/nethserver-firewall-base/traffic-shaping/#delete-class","text":"Example: { action : delete-class , name : myclass }","title":"delete-class"},{"location":"api/nethserver-firewall-base/traffic-shaping/#create-rule","text":"Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : red , type : role }, Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule }","title":"create-rule"},{"location":"api/nethserver-firewall-base/traffic-shaping/#edit-rule","text":"Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : class;high , Dst : { name : red , type : role }, id : 6 , Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule }","title":"edit-rule"},{"location":"api/nethserver-firewall-base/traffic-shaping/#update","text":"Use the same input from validate, supports also the reorder action.","title":"update"},{"location":"api/nethserver-firewall-base/traffic-shaping/#reorder","text":"The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] }","title":"reorder"},{"location":"api/nethserver-firewall-base/traffic-shaping/#create","text":"It uses the same format from input action.","title":"create"},{"location":"api/nethserver-firewall-base/traffic-shaping/#create-default","text":"Create default classes. Example: { action : create-default }","title":"create-default"},{"location":"api/nethserver-firewall-base/traffic-shaping/#delete","text":"Takes an action field. Valid actions are: delete-class delete-rule Example: { action : delete-class , name : 123 }","title":"delete"},{"location":"api/nethserver-firewall-base/wan/","text":"wan Manage WAN configuration and providers. read Input The read API requires an action field. Valid actions: providers speedtest stats rules providers Return the status of configured provider and the list of all red interfaces. Example: { action : providers } speedtest Execute the speed test on the given interface. Example: { action : speedtest , interface : eth0 } stats Retrieve current in/out bytes from netdata for each red interface. Example: { action : stats } rules List the divert rules. The rules action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : rules , expand : true } Output providers Output example: { status : { p1 : 0 }, configuration : { interfaces : [ { provider : { weight : 1 , name : p1 }, FwOutBandwidth : 100 , gateway : 192.168.100.0/24 , nslabel : , FwInBandwidth : 100 , name : ens7 , cidr : 192.168.100.194/24 , ipaddr : 192.168.100.194 } ], multiwan : { MaxPercentPacketLoss : 50 , MaxNumberPacketLoss : 10 , WanMode : balance , PingInterval : 5 , NotifyWan : disabled , CheckIP : [ 8.8.8.8 , 208.67.222.222 ] } } } speedtest Output example: { download : 54495.27977880809 , timestamp : 2019-01-16T11:09:53.701032 , ping : 6.512 , upload : 251214.38804888245 , server : { latency : 6.512 , name : Ancona , url : http://speedtest.fastnet.it/speedtest/upload.php , country : Italy , lon : 13.5167 , cc : IT , host : speedtest.fastnet.it:8080 , sponsor : FASTnet S.p.A. , url2 : http://195.96.192.202/speedtest/upload.php , lat : 43.6169 , id : 1324 , d : 58.140628357117215 } } stats If data for red interfaces is not available (e.g. netdata is not running): { ens7 : null , ens8 : null } Example of good output: { ens7 : { out : 1.4245688 , in : 0.7122844 }, ens8 : { out : 1.4245779 , in : 0.6062033 } } rules The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 706 , count : 3 }, rules : [ { Log : none , Time : null , Position : 256 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red2 , Dst : { zone : red , name : red , type : role , Interfaces : [ ens7 , ens8 ] }, id : 42 , type : rule , Src : { zone : green , IpAddress : 192.168.5.8 , name : davidem , type : host } } ... ] } Example with expand set to false : { rules : [ { Log : none , Time : null , Position : 256 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red2 , Dst : { name : red , type : role }, id : 42 , type : rule , Src : { name : davidem , type : host } } ... ] } validate Constraints The request must contain an action field. Valid actions are: provider wan create-rule update-rule Constraints for provider : FwOutBandwidth, FwInBandwidth: empty or a value greater than 0 weight: value between 1 and 255 name: the name of an existing network interface Constraints for wan : WanMode: must be balance or backup CheckIP: comma-separated list of valid IP NotifyWan: can be enabled or disabled MaxNumberPacketLoss: a value between 2 and 99 MaxPercentPacketLoss: a value between 0 and 100 PingInterval: a value between 0 and 60 Constraints for create-rule and update-rule : All constraints from firewall rules Action: must be an existing provider in the form provider; name Src: can't be red role Dst: can be red role or host or iprange or zone or cidr id: must exists on update Input provider Example: { action : provider , FwOutBandwidth : 100 , FwInBandwidth : 30 , nslabel : test , weight : 25 , name : ens7 } wan Example: { action : wan , WanMode : balance , CheckIP : [ 8.8.8.8 , 1.2.3.4 ], NotifyWan : enabled , MaxNumberPacketLoss : 3 , MaxPercentPacketLoss : 5 , PingInterval : 5 } create-rule Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red1 , Dst : { name : red , type : role }, Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule } update-rule Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red1 , Dst : { name : red , type : role }, id : 6 , Src : { name : myhost.nethserver.org , type : host }, type : rule , action : update-rule } update Use the same input from validate, supports also the reorder action. reorder The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] } delete Example: { name : 123 }","title":"wan"},{"location":"api/nethserver-firewall-base/wan/#wan","text":"Manage WAN configuration and providers.","title":"wan"},{"location":"api/nethserver-firewall-base/wan/#read","text":"","title":"read"},{"location":"api/nethserver-firewall-base/wan/#input","text":"The read API requires an action field. Valid actions: providers speedtest stats rules","title":"Input"},{"location":"api/nethserver-firewall-base/wan/#providers","text":"Return the status of configured provider and the list of all red interfaces. Example: { action : providers }","title":"providers"},{"location":"api/nethserver-firewall-base/wan/#speedtest","text":"Execute the speed test on the given interface. Example: { action : speedtest , interface : eth0 }","title":"speedtest"},{"location":"api/nethserver-firewall-base/wan/#stats","text":"Retrieve current in/out bytes from netdata for each red interface. Example: { action : stats }","title":"stats"},{"location":"api/nethserver-firewall-base/wan/#rules","text":"List the divert rules. The rules action takes an extra parameter expand . If expand is set to true , the api will try to expand all objects involved in the rules returning information about IP address, zone, etc. Example: { action : rules , expand : true }","title":"rules"},{"location":"api/nethserver-firewall-base/wan/#output","text":"","title":"Output"},{"location":"api/nethserver-firewall-base/wan/#providers_1","text":"Output example: { status : { p1 : 0 }, configuration : { interfaces : [ { provider : { weight : 1 , name : p1 }, FwOutBandwidth : 100 , gateway : 192.168.100.0/24 , nslabel : , FwInBandwidth : 100 , name : ens7 , cidr : 192.168.100.194/24 , ipaddr : 192.168.100.194 } ], multiwan : { MaxPercentPacketLoss : 50 , MaxNumberPacketLoss : 10 , WanMode : balance , PingInterval : 5 , NotifyWan : disabled , CheckIP : [ 8.8.8.8 , 208.67.222.222 ] } } }","title":"providers"},{"location":"api/nethserver-firewall-base/wan/#speedtest_1","text":"Output example: { download : 54495.27977880809 , timestamp : 2019-01-16T11:09:53.701032 , ping : 6.512 , upload : 251214.38804888245 , server : { latency : 6.512 , name : Ancona , url : http://speedtest.fastnet.it/speedtest/upload.php , country : Italy , lon : 13.5167 , cc : IT , host : speedtest.fastnet.it:8080 , sponsor : FASTnet S.p.A. , url2 : http://195.96.192.202/speedtest/upload.php , lat : 43.6169 , id : 1324 , d : 58.140628357117215 } }","title":"speedtest"},{"location":"api/nethserver-firewall-base/wan/#stats_1","text":"If data for red interfaces is not available (e.g. netdata is not running): { ens7 : null , ens8 : null } Example of good output: { ens7 : { out : 1.4245688 , in : 0.7122844 }, ens8 : { out : 1.4245779 , in : 0.6062033 } }","title":"stats"},{"location":"api/nethserver-firewall-base/wan/#rules_1","text":"The status section contains the count of existing rules, and the next position available for newly created rule. Example with expand set to true : { status : { next : 706 , count : 3 }, rules : [ { Log : none , Time : null , Position : 256 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red2 , Dst : { zone : red , name : red , type : role , Interfaces : [ ens7 , ens8 ] }, id : 42 , type : rule , Src : { zone : green , IpAddress : 192.168.5.8 , name : davidem , type : host } } ... ] } Example with expand set to false : { rules : [ { Log : none , Time : null , Position : 256 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red2 , Dst : { name : red , type : role }, id : 42 , type : rule , Src : { name : davidem , type : host } } ... ] }","title":"rules"},{"location":"api/nethserver-firewall-base/wan/#validate","text":"","title":"validate"},{"location":"api/nethserver-firewall-base/wan/#constraints","text":"The request must contain an action field. Valid actions are: provider wan create-rule update-rule Constraints for provider : FwOutBandwidth, FwInBandwidth: empty or a value greater than 0 weight: value between 1 and 255 name: the name of an existing network interface Constraints for wan : WanMode: must be balance or backup CheckIP: comma-separated list of valid IP NotifyWan: can be enabled or disabled MaxNumberPacketLoss: a value between 2 and 99 MaxPercentPacketLoss: a value between 0 and 100 PingInterval: a value between 0 and 60 Constraints for create-rule and update-rule : All constraints from firewall rules Action: must be an existing provider in the form provider; name Src: can't be red role Dst: can be red role or host or iprange or zone or cidr id: must exists on update","title":"Constraints"},{"location":"api/nethserver-firewall-base/wan/#input_1","text":"","title":"Input"},{"location":"api/nethserver-firewall-base/wan/#provider","text":"Example: { action : provider , FwOutBandwidth : 100 , FwInBandwidth : 30 , nslabel : test , weight : 25 , name : ens7 }","title":"provider"},{"location":"api/nethserver-firewall-base/wan/#wan_1","text":"Example: { action : wan , WanMode : balance , CheckIP : [ 8.8.8.8 , 1.2.3.4 ], NotifyWan : enabled , MaxNumberPacketLoss : 3 , MaxPercentPacketLoss : 5 , PingInterval : 5 }","title":"wan"},{"location":"api/nethserver-firewall-base/wan/#create-rule","text":"Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red1 , Dst : { name : red , type : role }, Src : { name : myhost.nethserver.org , type : host }, type : rule , action : create-rule }","title":"create-rule"},{"location":"api/nethserver-firewall-base/wan/#update-rule","text":"Example: { Log : none , Time : null , Position : 4 , status : enabled , Service : { name : any , type : fwservice }, Action : provider;red1 , Dst : { name : red , type : role }, id : 6 , Src : { name : myhost.nethserver.org , type : host }, type : rule , action : update-rule }","title":"update-rule"},{"location":"api/nethserver-firewall-base/wan/#update","text":"Use the same input from validate, supports also the reorder action.","title":"update"},{"location":"api/nethserver-firewall-base/wan/#reorder","text":"The rules field contains an ordered list of rules id. The API will update all Position properties accordingly to given order. Input example: { action : reorder , rules : [ 24 , 55 , 2 ] }","title":"reorder"},{"location":"api/nethserver-firewall-base/wan/#delete","text":"Example: { name : 123 }","title":"delete"},{"location":"api/nethserver-mail/connectors/","text":"connectors Manage POP3/IMAP connectors (getmail). read The read API requires an action field: list check-credentials Input list Return the list of all configured connectors. Input example: { action : list } check-credentials Check if given credentials are valid. Input example: { action : check-credentials , Retriever : SimpleIMAPRetriever , Server : my.remotehost.com , Password : Nethesis,1234 , Username : giacomo } Output list Return the list of all configured connectors gruped by destination. Example: { connectors : { giacomo : [ { props : { Server : test.local.net , Delete : 0 , Time : 30 , status : enabled , Account : giacomo@local.neth.eu , Password : mypass , Retriever : SimpleIMAPSSLRetriever , Username : myuser , type : getmail , FilterCheck : enabled }, name : myaddr@remote.com , type : getmail } ... ], } } check-credentials Return a success message or a generic error. Error output example: { type : GenericError , message : Operation timed out after 2001 milliseconds with 0 out of 0 bytes received } validate The validate API requires an action field. Valid actions are: update create Common constraints: Retriever: valid values are SimplePOP3Retriever , SimplePOP3SSLRetriever , SimpleIMAPRetriever , SimpleIMAPSSLRetriever Delete: number of days after the mail is deleted from the remote server, must be an integer grater or equal than -1 . A negative number means 'never' Time: time expressed in minutes, must be greater than 4 Server: IP addres or host name status, SpamCheck, VirusCheck: can be enabled or disabled Input update Update an existing connector. Example: { Server : my.remote.com , Delete : -1 , Time : 30 , status : enabled , Account : admin@local.neth.eu , Password : Nethesis,1234 , Retriever : SimpleIMAPRetriever , Username : giacomo , FilterCheck : enabled , name : external@my.remote.com , action : update } create Create a new connector. Example: { Server : my.remote.com , Delete : -1 , Time : 30 , status : enabled , Account : admin@local.neth.eu , Password : Nethesis,1234 , Retriever : SimpleIMAPRetriever , Username : giacomo , FilterCheck : enabled , action : create } The database key is calculated by the server. create Same input from validate API. update Same input from validate API. Extra valid actions: enable : enable and existing connector disable : disable an existing connector Both enable and disable action return a standard event. Input enable Example: { action : enable , name : external@my.remote.com } disable Example: { action : disable , name : external@my.remote.com } delete Delete the given connector. Example: { name : external@my.remote.com } execute Execute the getmail process and return the unit name to inspect the log. Input example: { name : external@my.remote.com , action : run } Output example: { unit : cockpit-getmail-external@my.remote.com }","title":"connectors"},{"location":"api/nethserver-mail/connectors/#connectors","text":"Manage POP3/IMAP connectors (getmail).","title":"connectors"},{"location":"api/nethserver-mail/connectors/#read","text":"The read API requires an action field: list check-credentials","title":"read"},{"location":"api/nethserver-mail/connectors/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/connectors/#list","text":"Return the list of all configured connectors. Input example: { action : list }","title":"list"},{"location":"api/nethserver-mail/connectors/#check-credentials","text":"Check if given credentials are valid. Input example: { action : check-credentials , Retriever : SimpleIMAPRetriever , Server : my.remotehost.com , Password : Nethesis,1234 , Username : giacomo }","title":"check-credentials"},{"location":"api/nethserver-mail/connectors/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/connectors/#list_1","text":"Return the list of all configured connectors gruped by destination. Example: { connectors : { giacomo : [ { props : { Server : test.local.net , Delete : 0 , Time : 30 , status : enabled , Account : giacomo@local.neth.eu , Password : mypass , Retriever : SimpleIMAPSSLRetriever , Username : myuser , type : getmail , FilterCheck : enabled }, name : myaddr@remote.com , type : getmail } ... ], } }","title":"list"},{"location":"api/nethserver-mail/connectors/#check-credentials_1","text":"Return a success message or a generic error. Error output example: { type : GenericError , message : Operation timed out after 2001 milliseconds with 0 out of 0 bytes received }","title":"check-credentials"},{"location":"api/nethserver-mail/connectors/#validate","text":"The validate API requires an action field. Valid actions are: update create Common constraints: Retriever: valid values are SimplePOP3Retriever , SimplePOP3SSLRetriever , SimpleIMAPRetriever , SimpleIMAPSSLRetriever Delete: number of days after the mail is deleted from the remote server, must be an integer grater or equal than -1 . A negative number means 'never' Time: time expressed in minutes, must be greater than 4 Server: IP addres or host name status, SpamCheck, VirusCheck: can be enabled or disabled","title":"validate"},{"location":"api/nethserver-mail/connectors/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/connectors/#update","text":"Update an existing connector. Example: { Server : my.remote.com , Delete : -1 , Time : 30 , status : enabled , Account : admin@local.neth.eu , Password : Nethesis,1234 , Retriever : SimpleIMAPRetriever , Username : giacomo , FilterCheck : enabled , name : external@my.remote.com , action : update }","title":"update"},{"location":"api/nethserver-mail/connectors/#create","text":"Create a new connector. Example: { Server : my.remote.com , Delete : -1 , Time : 30 , status : enabled , Account : admin@local.neth.eu , Password : Nethesis,1234 , Retriever : SimpleIMAPRetriever , Username : giacomo , FilterCheck : enabled , action : create } The database key is calculated by the server.","title":"create"},{"location":"api/nethserver-mail/connectors/#create_1","text":"Same input from validate API.","title":"create"},{"location":"api/nethserver-mail/connectors/#update_1","text":"Same input from validate API. Extra valid actions: enable : enable and existing connector disable : disable an existing connector Both enable and disable action return a standard event.","title":"update"},{"location":"api/nethserver-mail/connectors/#input_2","text":"","title":"Input"},{"location":"api/nethserver-mail/connectors/#enable","text":"Example: { action : enable , name : external@my.remote.com }","title":"enable"},{"location":"api/nethserver-mail/connectors/#disable","text":"Example: { action : disable , name : external@my.remote.com }","title":"disable"},{"location":"api/nethserver-mail/connectors/#delete","text":"Delete the given connector. Example: { name : external@my.remote.com }","title":"delete"},{"location":"api/nethserver-mail/connectors/#execute","text":"Execute the getmail process and return the unit name to inspect the log. Input example: { name : external@my.remote.com , action : run } Output example: { unit : cockpit-getmail-external@my.remote.com }","title":"execute"},{"location":"api/nethserver-mail/dashboard/","text":"dashboard NethServer mail server/filter basic statistics. read The read API requires an action field. Valid actions are: live logs Input example: { action : live } Output live Return basic statistics for the dashaboard reading the system status. Output example: { quota : { messages : 2130824 , status : enabled , size : 115853889 }, connections : { smtp : 0 , pop3 : 0 , submission : 0 , pop3s : 0 , imap : 98 , imaps : 6 }, statistics : { domains : 4 , pseudonyms : 149 , mailboxes : 83 , externals : 0 }, services : { postfix : 1 , rspamd : 1 , dovecot : 1 , clamd@rspamd : 1 , opendkim : 0 }, clamav-update : 1552309754 , rspamd : { version : 1.8.3 , learned : 10612 , clean : 537861 , scanned : 764908 , auth : ok , greylist : 6790 , read_only : false , uptime : 905285 , probable : 23171 , config_id : xxxx , reject : 197086 , soft_reject : 0 }, packages : { disclaimer : 0 , filter : 1 , getmail : 0 , server : 1 , p3scan : 0 }, domains : [ nethesis.it , nethserver.org , ], configuration : { VirusCheckStatus : enabled , BlockAttachmentStatus : enabled , SmartHostStatus : disabled , SpamCheckStatus : enabled }, queue : 0 } logs Analyze current /var/log/maillog using a modified version of pflogsum. The result is cached for one hour inside /var/spool/nethserver-cockpit/nethserver-mail/logs-cache.json . Output example: { recipients-size : [ { value : 134734818 , address : test@nethesis.it }, ... ], sending-domains : [ { bytes : 40948466 , count : 4462 , domain : nethserver.orf }, ... ], messages : { discarded : 0 , held : null , senders : 1781 , bytes_delivered : 932202864 , rejected_percentage : 10 , discarded_percentage : 0 , delivered : 13859 , recipient_hosts : 253 , forwarded : 1 , reject_warnings : null , received : 16084 , recipients : 431 , rejected : 1570 , bytes_received : 518048313 , bounced : 11 , deferred : 18 , sending_hosts : 721 }, senders-size : [ { value : 36427852 , address : muyser@nethserver.org }, ... ], recipients-count : [ { value : 1757 , address : test3@nethserver.org }, ... ], senders-count : [ { value : 448 , address : test4@nethserver.org }, ... ], smtpd : { hosts : 0 , connections : 0 , avg_conn_sec : 0 }, day-stats : { data : [ [ 1553986800 , 890 , 279 , 0 , 0 , 150 ], ... ], labels : [ day , received , delivered , deferred , bounced , rejected ] }, recipient-domains : [ { bytes : 726568488 , domain : nethserver.org , sent : 11739 , defers : null , max_daily : 181 , avg_daily : 1.26683959451403 }, ... ], hour-stats : { data : [ [ 0 , 52.1666666666667 , 21.8333333333333 , 0.666666666666667 , 0.5 , 6.66666666666667 ], ... ], labels : [ hour , received , delivered , deferred , bounced , rejected ] } }","title":"dashboard"},{"location":"api/nethserver-mail/dashboard/#dashboard","text":"NethServer mail server/filter basic statistics.","title":"dashboard"},{"location":"api/nethserver-mail/dashboard/#read","text":"The read API requires an action field. Valid actions are: live logs Input example: { action : live }","title":"read"},{"location":"api/nethserver-mail/dashboard/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/dashboard/#live","text":"Return basic statistics for the dashaboard reading the system status. Output example: { quota : { messages : 2130824 , status : enabled , size : 115853889 }, connections : { smtp : 0 , pop3 : 0 , submission : 0 , pop3s : 0 , imap : 98 , imaps : 6 }, statistics : { domains : 4 , pseudonyms : 149 , mailboxes : 83 , externals : 0 }, services : { postfix : 1 , rspamd : 1 , dovecot : 1 , clamd@rspamd : 1 , opendkim : 0 }, clamav-update : 1552309754 , rspamd : { version : 1.8.3 , learned : 10612 , clean : 537861 , scanned : 764908 , auth : ok , greylist : 6790 , read_only : false , uptime : 905285 , probable : 23171 , config_id : xxxx , reject : 197086 , soft_reject : 0 }, packages : { disclaimer : 0 , filter : 1 , getmail : 0 , server : 1 , p3scan : 0 }, domains : [ nethesis.it , nethserver.org , ], configuration : { VirusCheckStatus : enabled , BlockAttachmentStatus : enabled , SmartHostStatus : disabled , SpamCheckStatus : enabled }, queue : 0 }","title":"live"},{"location":"api/nethserver-mail/dashboard/#logs","text":"Analyze current /var/log/maillog using a modified version of pflogsum. The result is cached for one hour inside /var/spool/nethserver-cockpit/nethserver-mail/logs-cache.json . Output example: { recipients-size : [ { value : 134734818 , address : test@nethesis.it }, ... ], sending-domains : [ { bytes : 40948466 , count : 4462 , domain : nethserver.orf }, ... ], messages : { discarded : 0 , held : null , senders : 1781 , bytes_delivered : 932202864 , rejected_percentage : 10 , discarded_percentage : 0 , delivered : 13859 , recipient_hosts : 253 , forwarded : 1 , reject_warnings : null , received : 16084 , recipients : 431 , rejected : 1570 , bytes_received : 518048313 , bounced : 11 , deferred : 18 , sending_hosts : 721 }, senders-size : [ { value : 36427852 , address : muyser@nethserver.org }, ... ], recipients-count : [ { value : 1757 , address : test3@nethserver.org }, ... ], senders-count : [ { value : 448 , address : test4@nethserver.org }, ... ], smtpd : { hosts : 0 , connections : 0 , avg_conn_sec : 0 }, day-stats : { data : [ [ 1553986800 , 890 , 279 , 0 , 0 , 150 ], ... ], labels : [ day , received , delivered , deferred , bounced , rejected ] }, recipient-domains : [ { bytes : 726568488 , domain : nethserver.org , sent : 11739 , defers : null , max_daily : 181 , avg_daily : 1.26683959451403 }, ... ], hour-stats : { data : [ [ 0 , 52.1666666666667 , 21.8333333333333 , 0.666666666666667 , 0.5 , 6.66666666666667 ], ... ], labels : [ hour , received , delivered , deferred , bounced , rejected ] } }","title":"logs"},{"location":"api/nethserver-mail/domains/","text":"domains Configure email domains read The read API accepts an action field. list-domains , default if action is not provided network-checks Input list-domains Query the current email domains configuration Example: { action : list-domains } network-checks Runs remote network checks for the given domain attribute (mandatory), invoking public DNS servers and the ifconfig.co website. Example: { action : network-checks , domain : example.com } Output list-domains The list-domains action returns a rich description of the email domains configuration. Example: { dkimTxtRecord : ... , dkimRawData : ... , isServerAvailable : true , isDisclaimerAvailable : true , defaultRecipientMailbox : { name : root , type : builtin }, domains : [ { UnknownRecipientsActionDeliverMailbox : root , name : dpnet.nethesis.it , TransportType : LocalDelivery , unknownRecipientMailbox : { name : root , type : builtin }, DisclaimerText : , OpenDkimStatus : enabled , AlwaysBccStatus : disabled , DisclaimerStatus : disabled , RelayHost : 1.2.3.4 , isPrimaryDomain : true , type : domain , AlwaysBccAddress : , Description : , UnknownRecipientsActionType : deliver } ] } network-checks If the input is not correct the output status attribute is error . Other output attributes correspond to specific remote network checks. Each entry has always the following attributes: status represents the remote call status that can be either success or failure . A failed status indicates some kind of error has occurred. The error is detailed by response and message contents response : if the call status is success it represents the check status . If the check was successful the response value must be ok , otherwise a check-specific error string is set, indicating the error reason message is an additional information for the response, always set for exit-code and internal-error responses. See also the table below This is a table of possible response values with message meaning between parenthesis where relevant: check name success failure port-25 ok, unreachable exit-code, internal-error dkim-record ok, missing, mismatch exit-code, internal-error mx-record ok(MX value), missing, mxbad(MX value) exit-code, internal-error iprev-check ok, iprevbad exit-code, internal-error, precondition-failed Example: { port-25 : { response : unreachable , status : success , message : }, dkim-record : { response : mismatch , status : success , message : }, mx-record : { response : ok , status : success , message : nethservice.nethesis.it }, status : success , iprev-check : { response : ok , status : success , message : } } validate The validate API requires and action and a domain field. Valid actions are: create delete edit edit-dkim The domain field contains the data to validate. Constraints Calculated domain fields: name is the domain name and unique identifier unknownRecipientMailbox is an object representing a Mailbox DisclaimerText free text, max length 2048 domain fields directly mapped to DB props: DisclaimerStatus = {enabled,disabled} TransportType = {Relay,LocalDelivery} RelayHost = host name or IP address (if TransportType is Relay ) Description = free text AlwaysBccStatus = {enabled,disabled} AlwaysBccAddress = email address (if AlwaysBccStatus is enabled ) UnknownRecipientsActionType = {delivery,bounce} OpenDkimStatus = {enabled,disabled} Unrecognized fields are ignored. Input create The domain must not exist. { action : create , domain : { DisclaimerStatus : disabled , TransportType : Relay , RelayHost : , name : new.tld , Description : , AlwaysBccStatus : disabled , AlwaysBccAddress : , UnknownRecipientsActionType : bounce , DisclaimerText : , unknownRecipientMailbox : { name : root , type : builtin } } } delete The domain must exist. { action : delete , domain : ... } edit The domain must exist. { action : edit , domain : ... } edit-dkim The domain must exist. { action : edit-dkim , domain : { name : dpnet.nethesis.it , OpenDkimStatus : disabled } } update See the validate input format.","title":"domains"},{"location":"api/nethserver-mail/domains/#domains","text":"Configure email domains","title":"domains"},{"location":"api/nethserver-mail/domains/#read","text":"The read API accepts an action field. list-domains , default if action is not provided network-checks","title":"read"},{"location":"api/nethserver-mail/domains/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/domains/#list-domains","text":"Query the current email domains configuration Example: { action : list-domains }","title":"list-domains"},{"location":"api/nethserver-mail/domains/#network-checks","text":"Runs remote network checks for the given domain attribute (mandatory), invoking public DNS servers and the ifconfig.co website. Example: { action : network-checks , domain : example.com }","title":"network-checks"},{"location":"api/nethserver-mail/domains/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/domains/#list-domains_1","text":"The list-domains action returns a rich description of the email domains configuration. Example: { dkimTxtRecord : ... , dkimRawData : ... , isServerAvailable : true , isDisclaimerAvailable : true , defaultRecipientMailbox : { name : root , type : builtin }, domains : [ { UnknownRecipientsActionDeliverMailbox : root , name : dpnet.nethesis.it , TransportType : LocalDelivery , unknownRecipientMailbox : { name : root , type : builtin }, DisclaimerText : , OpenDkimStatus : enabled , AlwaysBccStatus : disabled , DisclaimerStatus : disabled , RelayHost : 1.2.3.4 , isPrimaryDomain : true , type : domain , AlwaysBccAddress : , Description : , UnknownRecipientsActionType : deliver } ] }","title":"list-domains"},{"location":"api/nethserver-mail/domains/#network-checks_1","text":"If the input is not correct the output status attribute is error . Other output attributes correspond to specific remote network checks. Each entry has always the following attributes: status represents the remote call status that can be either success or failure . A failed status indicates some kind of error has occurred. The error is detailed by response and message contents response : if the call status is success it represents the check status . If the check was successful the response value must be ok , otherwise a check-specific error string is set, indicating the error reason message is an additional information for the response, always set for exit-code and internal-error responses. See also the table below This is a table of possible response values with message meaning between parenthesis where relevant: check name success failure port-25 ok, unreachable exit-code, internal-error dkim-record ok, missing, mismatch exit-code, internal-error mx-record ok(MX value), missing, mxbad(MX value) exit-code, internal-error iprev-check ok, iprevbad exit-code, internal-error, precondition-failed Example: { port-25 : { response : unreachable , status : success , message : }, dkim-record : { response : mismatch , status : success , message : }, mx-record : { response : ok , status : success , message : nethservice.nethesis.it }, status : success , iprev-check : { response : ok , status : success , message : } }","title":"network-checks"},{"location":"api/nethserver-mail/domains/#validate","text":"The validate API requires and action and a domain field. Valid actions are: create delete edit edit-dkim The domain field contains the data to validate.","title":"validate"},{"location":"api/nethserver-mail/domains/#constraints","text":"Calculated domain fields: name is the domain name and unique identifier unknownRecipientMailbox is an object representing a Mailbox DisclaimerText free text, max length 2048 domain fields directly mapped to DB props: DisclaimerStatus = {enabled,disabled} TransportType = {Relay,LocalDelivery} RelayHost = host name or IP address (if TransportType is Relay ) Description = free text AlwaysBccStatus = {enabled,disabled} AlwaysBccAddress = email address (if AlwaysBccStatus is enabled ) UnknownRecipientsActionType = {delivery,bounce} OpenDkimStatus = {enabled,disabled} Unrecognized fields are ignored.","title":"Constraints"},{"location":"api/nethserver-mail/domains/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/domains/#create","text":"The domain must not exist. { action : create , domain : { DisclaimerStatus : disabled , TransportType : Relay , RelayHost : , name : new.tld , Description : , AlwaysBccStatus : disabled , AlwaysBccAddress : , UnknownRecipientsActionType : bounce , DisclaimerText : , unknownRecipientMailbox : { name : root , type : builtin } } }","title":"create"},{"location":"api/nethserver-mail/domains/#delete","text":"The domain must exist. { action : delete , domain : ... }","title":"delete"},{"location":"api/nethserver-mail/domains/#edit","text":"The domain must exist. { action : edit , domain : ... }","title":"edit"},{"location":"api/nethserver-mail/domains/#edit-dkim","text":"The domain must exist. { action : edit-dkim , domain : { name : dpnet.nethesis.it , OpenDkimStatus : disabled } }","title":"edit-dkim"},{"location":"api/nethserver-mail/domains/#update","text":"See the validate input format.","title":"update"},{"location":"api/nethserver-mail/feature/","text":"feature Check if a feature is installed. read The API takes a name field with the name of the feature to check. Input Input example: { name : mailboxes } Output Fields: installed : it's true if the feature is installed, false otherwise packages: list of packages to install to enable the function Output example: { packages : [ nethserver-mail-server ], installed : true } update If not already installed, it installs all packages to enable the feature. Input example: { name : mailboxes } The output is a success message or output from pkgaction command.","title":"feature"},{"location":"api/nethserver-mail/feature/#feature","text":"Check if a feature is installed.","title":"feature"},{"location":"api/nethserver-mail/feature/#read","text":"The API takes a name field with the name of the feature to check.","title":"read"},{"location":"api/nethserver-mail/feature/#input","text":"Input example: { name : mailboxes }","title":"Input"},{"location":"api/nethserver-mail/feature/#output","text":"Fields: installed : it's true if the feature is installed, false otherwise packages: list of packages to install to enable the function Output example: { packages : [ nethserver-mail-server ], installed : true }","title":"Output"},{"location":"api/nethserver-mail/feature/#update","text":"If not already installed, it installs all packages to enable the feature. Input example: { name : mailboxes } The output is a success message or output from pkgaction command.","title":"update"},{"location":"api/nethserver-mail/filter/","text":"filter Manage antispam and antivirus filter. read The read API requires and action field. Valid actions are: stats configuration Input stats It requires also a timespan field. Valid values for timespan are: hourly daily weekly monthly Example: { action : stats , timespan : hourly } configuration Example: { action : configuration } Output stats Return rspmad statistics invoking stat and stat HTTP API. Output example: { info : { version : 1.8.3 , learned : 0 , clean : 1 , scanned : 1 , auth : ok , greylist : 0 , read_only : false , uptime : 6633 , probable : 0 , config_id : thdng6ppt1d4paeuq4rtboqdbakcjy7mcnow44oakzq6qstm1ipk9ehu8dg87ifp6dhyoi6txfm4c3rt8n8xwnkkwcgnfaiqe57ab1b , reject : 0 , soft_reject : 0 }, counters : { bytes_allocated : 19572392 , actions : { rewrite subject : 0 , add header : 0 , soft reject : 0 , greylist : 0 , no action : 1 , reject : 0 }, connections : 0 , spam_count : 0 , learned : 0 , fragmented : 0 , scanned : 1 , ham_count : 1 , read_only : false , chunks_oversized : 1 , chunks_allocated : 122 , total_learns : 0 , pools_freed : 15 , fuzzy_hashes : { rspamd.com : 487938756 , local : 0 }, statfiles : [ { symbol : BAYES_SPAM , users : 0 , total : 0 , size : 0 , revision : 0 , languages : 0 , used : 0 , type : redis }, { symbol : BAYES_HAM , users : 0 , total : 0 , size : 0 , revision : 0 , languages : 0 , used : 0 , type : redis } ], chunks_freed : 0 , shared_chunks_allocated : 17 , control_connections : 11 , pools_allocated : 47 } } configuration Display configuration for rspmad key from configuration database. Example: { props : { SpamTag2Level : 6 , SenderBlackList : [ baduser@domain.org ], SpamGreyLevel : , status : enabled , RecipientWhiteList : [], Password : xxxxxxxxxxxxxxxx , VirusAction : reject , SpamKillLevel : 15 , VirusCheckStatus : enabled , BlockAttachmentCustomStatus : disabled , SpamSubjectPrefixString : ***SPAM*** , VirusScanSize : 20000000 , BlockAttachmentCustomList : [ doc , odt ], VirusScanOnlyAttachment : false , BlockAttachmentStatus : enabled , SpamSubjectPrefixStatus : disabled , type : service , SpamCheckStatus : enabled , BlockAttachmentClassList : [ Exec ], SenderWhiteList : [ good@nethserver.org ] }, name : rspamd , type : service } validate The validate API requires and action field. Valid actions are: filter rule Constraints Constraints for action rule : value: can be a mail address or a domain Constraints for action filter : VirusCheckStatus, SpamCheckStatus, BlockAttachmentStatus, SpamSubjectPrefixStatus, BlockAttachmentCustomStatus: can be enabled or disabled VirusScanOnlyAttachment: can be true or false SpamSubjectPrefixString: lenght between 1 and 16 SpamKillLevel: between 0 and 25 SpamTag2Level: between 0 and 25, less then SpamKillLevel SpamGreyLevel: if set, between 0 and 25, less then SpamTag2Level BlockAttachmentCustomList: a list of file extensions BlockAttachmentClassList: a list containing values between 'Arch' and 'Exec' Input filter It takes the same format used as output from read API. Ignored fields: props.Password name type Example: { props : { SpamTag2Level : 6 , SenderBlackList : [], SpamGreyLevel : 2 , status : disabled , RecipientWhiteList : [], VirusAction : reject , SpamKillLevel : 20 , VirusCheckStatus : enabled , BlockAttachmentCustomStatus : disabled , SpamSubjectPrefixString : ***SPAM*** , VirusScanSize : 20000000 , BlockAttachmentCustomList : [ doc , odt ], VirusScanOnlyAttachment : false , BlockAttachmentStatus : enabled , SpamSubjectPrefixStatus : disabled , type : service , SpamCheckStatus : enabled , BlockAttachmentClassList : [ Exec ], SenderWhiteList : [ a@a.com ] }, name : rspamd , type : service , action : filter } rule Validate a single whitelist/blacklist rule. The value field must contains the mail or domain to be validated. Example: { action : rule , value : test@mail.org } update Same input as validate.","title":"filter"},{"location":"api/nethserver-mail/filter/#filter","text":"Manage antispam and antivirus filter.","title":"filter"},{"location":"api/nethserver-mail/filter/#read","text":"The read API requires and action field. Valid actions are: stats configuration","title":"read"},{"location":"api/nethserver-mail/filter/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/filter/#stats","text":"It requires also a timespan field. Valid values for timespan are: hourly daily weekly monthly Example: { action : stats , timespan : hourly }","title":"stats"},{"location":"api/nethserver-mail/filter/#configuration","text":"Example: { action : configuration }","title":"configuration"},{"location":"api/nethserver-mail/filter/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/filter/#stats_1","text":"Return rspmad statistics invoking stat and stat HTTP API. Output example: { info : { version : 1.8.3 , learned : 0 , clean : 1 , scanned : 1 , auth : ok , greylist : 0 , read_only : false , uptime : 6633 , probable : 0 , config_id : thdng6ppt1d4paeuq4rtboqdbakcjy7mcnow44oakzq6qstm1ipk9ehu8dg87ifp6dhyoi6txfm4c3rt8n8xwnkkwcgnfaiqe57ab1b , reject : 0 , soft_reject : 0 }, counters : { bytes_allocated : 19572392 , actions : { rewrite subject : 0 , add header : 0 , soft reject : 0 , greylist : 0 , no action : 1 , reject : 0 }, connections : 0 , spam_count : 0 , learned : 0 , fragmented : 0 , scanned : 1 , ham_count : 1 , read_only : false , chunks_oversized : 1 , chunks_allocated : 122 , total_learns : 0 , pools_freed : 15 , fuzzy_hashes : { rspamd.com : 487938756 , local : 0 }, statfiles : [ { symbol : BAYES_SPAM , users : 0 , total : 0 , size : 0 , revision : 0 , languages : 0 , used : 0 , type : redis }, { symbol : BAYES_HAM , users : 0 , total : 0 , size : 0 , revision : 0 , languages : 0 , used : 0 , type : redis } ], chunks_freed : 0 , shared_chunks_allocated : 17 , control_connections : 11 , pools_allocated : 47 } }","title":"stats"},{"location":"api/nethserver-mail/filter/#configuration_1","text":"Display configuration for rspmad key from configuration database. Example: { props : { SpamTag2Level : 6 , SenderBlackList : [ baduser@domain.org ], SpamGreyLevel : , status : enabled , RecipientWhiteList : [], Password : xxxxxxxxxxxxxxxx , VirusAction : reject , SpamKillLevel : 15 , VirusCheckStatus : enabled , BlockAttachmentCustomStatus : disabled , SpamSubjectPrefixString : ***SPAM*** , VirusScanSize : 20000000 , BlockAttachmentCustomList : [ doc , odt ], VirusScanOnlyAttachment : false , BlockAttachmentStatus : enabled , SpamSubjectPrefixStatus : disabled , type : service , SpamCheckStatus : enabled , BlockAttachmentClassList : [ Exec ], SenderWhiteList : [ good@nethserver.org ] }, name : rspamd , type : service }","title":"configuration"},{"location":"api/nethserver-mail/filter/#validate","text":"The validate API requires and action field. Valid actions are: filter rule","title":"validate"},{"location":"api/nethserver-mail/filter/#constraints","text":"Constraints for action rule : value: can be a mail address or a domain Constraints for action filter : VirusCheckStatus, SpamCheckStatus, BlockAttachmentStatus, SpamSubjectPrefixStatus, BlockAttachmentCustomStatus: can be enabled or disabled VirusScanOnlyAttachment: can be true or false SpamSubjectPrefixString: lenght between 1 and 16 SpamKillLevel: between 0 and 25 SpamTag2Level: between 0 and 25, less then SpamKillLevel SpamGreyLevel: if set, between 0 and 25, less then SpamTag2Level BlockAttachmentCustomList: a list of file extensions BlockAttachmentClassList: a list containing values between 'Arch' and 'Exec'","title":"Constraints"},{"location":"api/nethserver-mail/filter/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/filter/#filter_1","text":"It takes the same format used as output from read API. Ignored fields: props.Password name type Example: { props : { SpamTag2Level : 6 , SenderBlackList : [], SpamGreyLevel : 2 , status : disabled , RecipientWhiteList : [], VirusAction : reject , SpamKillLevel : 20 , VirusCheckStatus : enabled , BlockAttachmentCustomStatus : disabled , SpamSubjectPrefixString : ***SPAM*** , VirusScanSize : 20000000 , BlockAttachmentCustomList : [ doc , odt ], VirusScanOnlyAttachment : false , BlockAttachmentStatus : enabled , SpamSubjectPrefixStatus : disabled , type : service , SpamCheckStatus : enabled , BlockAttachmentClassList : [ Exec ], SenderWhiteList : [ a@a.com ] }, name : rspamd , type : service , action : filter }","title":"filter"},{"location":"api/nethserver-mail/filter/#rule","text":"Validate a single whitelist/blacklist rule. The value field must contains the mail or domain to be validated. Example: { action : rule , value : test@mail.org }","title":"rule"},{"location":"api/nethserver-mail/filter/#update","text":"Same input as validate.","title":"update"},{"location":"api/nethserver-mail/mailbox/","text":"mailbox Manage mail server destinations like user and shared mailboxes. read The read API requires an action field: list aliases Input list Return the list of all configured destinations. Input example: { action : list , expand : 1 } aliases Return the list of all aliases for the given destination. Input example: { action : aliases , name : mydestination@nethserver.org , type : user } Output list Return the list of all destinations with current quota. If expand is set to 1, the list will contains all extra info, like quota, acls, etc. If expand is set to 0, return only the list with name and type, useful for form usage inside the UI. Output example with expand set to 0: { builtin : [ { name : root , type : bultin , displayname : root , } ], public : [ { name : share1 , displayname : share1 , type : public }, ... ], groups : [ { name : g1@nethserver.org , displayname : g1 , type : group }, ... ], users : [ { name : user1@nethserver.org , type : user , displayname : user1 }, ... ] } Output example with expand set to 1: { builtin : [ { name : root , type : bultin , displayname : root } ], public : [ { acls : [ { right : custom , global : , rawrights : expunge read , name : giacomo@local.neth.eu , displayname : giacomo , type : user , id : user=giacomo@local.neth.eu } ], name : public4 , displayname : public4 , type : public }, { acls : [ { right : read-write , global : , rawrights : create insert lookup read write write-deleted write-seen , name : giacomo@local.neth.eu , displayname : giacomo , type : user , id : user=giacomo@local.neth.eu } ], name : public2 , displayname : public2 , type : public }, ... ], groups : [ { { props : { MailStatus : enabled }, name : mygroup@nethserver.org , type : group , displayname : mygroup }, ... ], users : [ { quota : { maximum : 20971520 , messages : 58501 , percentage : 5 , size : 1126126 }, connectors : [ { props : { Server : 1.2.3.4 , Delete : 0 , Time : 30 , status : enabled , Password : test , Retriever : SimplePOP3Retriever , Username : test , type : getmail , FilterCheck : enabled }, name : a@a.com , type : getmail } ], props : { MailForwardAddress : , EmailAddress : , MailSpamRetentionStatus : disabled , MailQuotaCustom : 15 , MailForwardKeepMessageCopy : no , Phone : , MailQuotaType : default , MailAccess : public , MailForwardStatus : disabled , Dept : , MailSpamRetentionTime : 15d , type : user , MailStatus : enabled }, name : myuser@nethserver.org , type : user , displayname : myuser }, { props : { MailStatus : enabled }, name : redmine@nethserver.org , type : group , displayname : redmine }, ... ] } aliases Return the list of all aliases for the given destination. Output example: { aliases : [ abuse@nethesis.it , abuse@nethserver.com , abuse@nethserver.org , abuse@nethspot.com , myuser@nethserver.org , ... ] } validate The validate API requires an action field. Valid actions are: configuration update-group update-user create-public update-public Constraints for configuration action: DeletedToTrash, LogActions, DynamicGroupAlias, PopStatus, QuotaStatus, MaxUserConnectionsPerIp, AdminIsMaster, ImapStatus, TlsSecurity, SpamFolder: can be enabled or disabled SpamRetentionTime: a number representing days between -1 and 365, if set to -1 the retention is disabled QuotaDefaultSize, MaxUserConnectionsPerIp: positive integer Constraints for update-group action: MailStatus: can be enabled or disabled Constraints for update-user action: MailForwardStatus, MailStatus: can be enabled or disabled MailForwardKeepMessageCopy: can be yes or no MailSpamRetentionTime: a number representing days between -1 and 365, if set to -1 the retention is disabled MailQuotaType: can be default or custom MailQuotaCustom: positive integer MailForwardAddress: an array of valid mail addresses or empty Constraints for create-public action: name: name for non existing public folder rights: valid values are read , read-write , full Constraints for update-public action: name: name of an existing public folder rights: valid values are read , read-write , full Input configuration Update general configuration. Example: { DeletedToTrash : disabled , LogActions : disabled , SpamRetentionTime : 60 , DynamicGroupAlias : enabled , TlsSecurity : enabled , PopStatus : enabled , SpamFolder : enabled , QuotaStatus : enabled , QuotaDefaultSize : 20 , MaxUserConnectionsPerIp : 12 , AdminIsMaster : disabled , ImapStatus : enabled , action : configuration } update-group Update group mailbox. Example: { MailStatus : enabled , name : g1@local.neth.eu , action : update-group } update-user Update user mailbox. Example: { MailForwardAddress : [], MailSpamRetentionStatus : disabled , MailQuotaCustom : 20 , MailForwardKeepMessageCopy : no , MailQuotaType : default , MailForwardStatus : disabled , MailSpamRetentionTime : 60 , MailStatus : enabled , name : giacomo@local.neth.eu , action : update-user } create-public Create a public mailbox. Example: { action : create-public , acls : [ { name : giacomo@local.neth.eu , type : user , right : read } ], name : public1 } update-public Update an existing public mailbox. If newname field is set, also rename the public folder. Example: { action : create-public , acls : [ { name : giacomo@local.neth.eu , type : user , right : read-write } ], name : public1 , newname : public2 } update Same input from validate API. Valid actions: configuration update-group update-user update-public create Same input from validate API, valid only for public folder creation. Valid actions: create-public delete Delete the given public mailbox. Example: { name : public1 }","title":"mailbox"},{"location":"api/nethserver-mail/mailbox/#mailbox","text":"Manage mail server destinations like user and shared mailboxes.","title":"mailbox"},{"location":"api/nethserver-mail/mailbox/#read","text":"The read API requires an action field: list aliases","title":"read"},{"location":"api/nethserver-mail/mailbox/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/mailbox/#list","text":"Return the list of all configured destinations. Input example: { action : list , expand : 1 }","title":"list"},{"location":"api/nethserver-mail/mailbox/#aliases","text":"Return the list of all aliases for the given destination. Input example: { action : aliases , name : mydestination@nethserver.org , type : user }","title":"aliases"},{"location":"api/nethserver-mail/mailbox/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/mailbox/#list_1","text":"Return the list of all destinations with current quota. If expand is set to 1, the list will contains all extra info, like quota, acls, etc. If expand is set to 0, return only the list with name and type, useful for form usage inside the UI. Output example with expand set to 0: { builtin : [ { name : root , type : bultin , displayname : root , } ], public : [ { name : share1 , displayname : share1 , type : public }, ... ], groups : [ { name : g1@nethserver.org , displayname : g1 , type : group }, ... ], users : [ { name : user1@nethserver.org , type : user , displayname : user1 }, ... ] } Output example with expand set to 1: { builtin : [ { name : root , type : bultin , displayname : root } ], public : [ { acls : [ { right : custom , global : , rawrights : expunge read , name : giacomo@local.neth.eu , displayname : giacomo , type : user , id : user=giacomo@local.neth.eu } ], name : public4 , displayname : public4 , type : public }, { acls : [ { right : read-write , global : , rawrights : create insert lookup read write write-deleted write-seen , name : giacomo@local.neth.eu , displayname : giacomo , type : user , id : user=giacomo@local.neth.eu } ], name : public2 , displayname : public2 , type : public }, ... ], groups : [ { { props : { MailStatus : enabled }, name : mygroup@nethserver.org , type : group , displayname : mygroup }, ... ], users : [ { quota : { maximum : 20971520 , messages : 58501 , percentage : 5 , size : 1126126 }, connectors : [ { props : { Server : 1.2.3.4 , Delete : 0 , Time : 30 , status : enabled , Password : test , Retriever : SimplePOP3Retriever , Username : test , type : getmail , FilterCheck : enabled }, name : a@a.com , type : getmail } ], props : { MailForwardAddress : , EmailAddress : , MailSpamRetentionStatus : disabled , MailQuotaCustom : 15 , MailForwardKeepMessageCopy : no , Phone : , MailQuotaType : default , MailAccess : public , MailForwardStatus : disabled , Dept : , MailSpamRetentionTime : 15d , type : user , MailStatus : enabled }, name : myuser@nethserver.org , type : user , displayname : myuser }, { props : { MailStatus : enabled }, name : redmine@nethserver.org , type : group , displayname : redmine }, ... ] }","title":"list"},{"location":"api/nethserver-mail/mailbox/#aliases_1","text":"Return the list of all aliases for the given destination. Output example: { aliases : [ abuse@nethesis.it , abuse@nethserver.com , abuse@nethserver.org , abuse@nethspot.com , myuser@nethserver.org , ... ] }","title":"aliases"},{"location":"api/nethserver-mail/mailbox/#validate","text":"The validate API requires an action field. Valid actions are: configuration update-group update-user create-public update-public Constraints for configuration action: DeletedToTrash, LogActions, DynamicGroupAlias, PopStatus, QuotaStatus, MaxUserConnectionsPerIp, AdminIsMaster, ImapStatus, TlsSecurity, SpamFolder: can be enabled or disabled SpamRetentionTime: a number representing days between -1 and 365, if set to -1 the retention is disabled QuotaDefaultSize, MaxUserConnectionsPerIp: positive integer Constraints for update-group action: MailStatus: can be enabled or disabled Constraints for update-user action: MailForwardStatus, MailStatus: can be enabled or disabled MailForwardKeepMessageCopy: can be yes or no MailSpamRetentionTime: a number representing days between -1 and 365, if set to -1 the retention is disabled MailQuotaType: can be default or custom MailQuotaCustom: positive integer MailForwardAddress: an array of valid mail addresses or empty Constraints for create-public action: name: name for non existing public folder rights: valid values are read , read-write , full Constraints for update-public action: name: name of an existing public folder rights: valid values are read , read-write , full","title":"validate"},{"location":"api/nethserver-mail/mailbox/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/mailbox/#configuration","text":"Update general configuration. Example: { DeletedToTrash : disabled , LogActions : disabled , SpamRetentionTime : 60 , DynamicGroupAlias : enabled , TlsSecurity : enabled , PopStatus : enabled , SpamFolder : enabled , QuotaStatus : enabled , QuotaDefaultSize : 20 , MaxUserConnectionsPerIp : 12 , AdminIsMaster : disabled , ImapStatus : enabled , action : configuration }","title":"configuration"},{"location":"api/nethserver-mail/mailbox/#update-group","text":"Update group mailbox. Example: { MailStatus : enabled , name : g1@local.neth.eu , action : update-group }","title":"update-group"},{"location":"api/nethserver-mail/mailbox/#update-user","text":"Update user mailbox. Example: { MailForwardAddress : [], MailSpamRetentionStatus : disabled , MailQuotaCustom : 20 , MailForwardKeepMessageCopy : no , MailQuotaType : default , MailForwardStatus : disabled , MailSpamRetentionTime : 60 , MailStatus : enabled , name : giacomo@local.neth.eu , action : update-user }","title":"update-user"},{"location":"api/nethserver-mail/mailbox/#create-public","text":"Create a public mailbox. Example: { action : create-public , acls : [ { name : giacomo@local.neth.eu , type : user , right : read } ], name : public1 }","title":"create-public"},{"location":"api/nethserver-mail/mailbox/#update-public","text":"Update an existing public mailbox. If newname field is set, also rename the public folder. Example: { action : create-public , acls : [ { name : giacomo@local.neth.eu , type : user , right : read-write } ], name : public1 , newname : public2 }","title":"update-public"},{"location":"api/nethserver-mail/mailbox/#update","text":"Same input from validate API. Valid actions: configuration update-group update-user update-public","title":"update"},{"location":"api/nethserver-mail/mailbox/#create","text":"Same input from validate API, valid only for public folder creation. Valid actions: create-public","title":"create"},{"location":"api/nethserver-mail/mailbox/#delete","text":"Delete the given public mailbox. Example: { name : public1 }","title":"delete"},{"location":"api/nethserver-mail/pseudonym/","text":"pseudonym Manage mail server psuedonyms. read The read API requires an action field: list destinations Input list Return the list of all configured and built-in aliases. Input example: { action : list } destinations Return the list of all destinations for the given alias. Input example: { action : destinations , name : mydestination@nethserver.org , type : user } Output list Return the list of all aliases. Output example: { pseudonyms : [ { builtin : 1 , props : { Account : [ { name : user1@nethesis.it , displayname : user1 , type : user } ], Description : , Access : public }, name : matteo@nethesis.it , type : user , wildcard : 0 }, { builtin : 0 , props : { Account : [ { name : external@test.org , type : external }, { name : mygroup , type : group }, { name : shared1 , type : public } ], type : pseudonym , Description : , Access : public }, name : abuse@ , type : pseudonym , wildcard : 1 }, ... ] } destinations Return the list of all destinations for the given alias. Output example: { destinations : [ test1@nethserver.org , ... ] } validate The validate API requires an action field: create-pseudonym update-pseudonym update-builtin Constraints for create-pseudonym action: name: must be a non-existing pseudonym inside the accounts database and not reserved for builtin domains: can be empty, otherwise every listed domain must already exists inside the domains database Account: must be a list of users, shared mailboxes, groups or extrenal addresses Access: can be public or private Constraints for update-pseudonym action: name: must be an existing pseudonym inside the accounts database Account: must be a list of users, shared mailboxes, groups or extrenal addresses Access: can be public or private Constraints for update-builtin action: MailAccess: can be public or private Input create-pseudonym Create the pseudonym specified inside the name field. If domains is empty, it creates a wildcard alias, otherwise it creates a pseudonym record for each given domain. Example: { action : create-pseudonym , domains : [], Description : my desc , Access : public , Account : [ { name : giacomo@my.domain.loc , type : user } ], name : info } update-pseudonym Update the pseudonym specified inside the name field. Example: { action : update-pseudonym , Description : my desc , Access : public , Account : [ { name : giacomo@my.domain.loc , type : user } ], name : info } update-builtin Update the builtin pseudonym specified inside the name field. Example: { action : update-builtin , Access : public , name : info } create Same input for validate API. update Same input for validate API. delete Delete the pseudonym given in the name field. Input example: { name : info@ }","title":"pseudonym"},{"location":"api/nethserver-mail/pseudonym/#pseudonym","text":"Manage mail server psuedonyms.","title":"pseudonym"},{"location":"api/nethserver-mail/pseudonym/#read","text":"The read API requires an action field: list destinations","title":"read"},{"location":"api/nethserver-mail/pseudonym/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/pseudonym/#list","text":"Return the list of all configured and built-in aliases. Input example: { action : list }","title":"list"},{"location":"api/nethserver-mail/pseudonym/#destinations","text":"Return the list of all destinations for the given alias. Input example: { action : destinations , name : mydestination@nethserver.org , type : user }","title":"destinations"},{"location":"api/nethserver-mail/pseudonym/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/pseudonym/#list_1","text":"Return the list of all aliases. Output example: { pseudonyms : [ { builtin : 1 , props : { Account : [ { name : user1@nethesis.it , displayname : user1 , type : user } ], Description : , Access : public }, name : matteo@nethesis.it , type : user , wildcard : 0 }, { builtin : 0 , props : { Account : [ { name : external@test.org , type : external }, { name : mygroup , type : group }, { name : shared1 , type : public } ], type : pseudonym , Description : , Access : public }, name : abuse@ , type : pseudonym , wildcard : 1 }, ... ] }","title":"list"},{"location":"api/nethserver-mail/pseudonym/#destinations_1","text":"Return the list of all destinations for the given alias. Output example: { destinations : [ test1@nethserver.org , ... ] }","title":"destinations"},{"location":"api/nethserver-mail/pseudonym/#validate","text":"The validate API requires an action field: create-pseudonym update-pseudonym update-builtin Constraints for create-pseudonym action: name: must be a non-existing pseudonym inside the accounts database and not reserved for builtin domains: can be empty, otherwise every listed domain must already exists inside the domains database Account: must be a list of users, shared mailboxes, groups or extrenal addresses Access: can be public or private Constraints for update-pseudonym action: name: must be an existing pseudonym inside the accounts database Account: must be a list of users, shared mailboxes, groups or extrenal addresses Access: can be public or private Constraints for update-builtin action: MailAccess: can be public or private","title":"validate"},{"location":"api/nethserver-mail/pseudonym/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/pseudonym/#create-pseudonym","text":"Create the pseudonym specified inside the name field. If domains is empty, it creates a wildcard alias, otherwise it creates a pseudonym record for each given domain. Example: { action : create-pseudonym , domains : [], Description : my desc , Access : public , Account : [ { name : giacomo@my.domain.loc , type : user } ], name : info }","title":"create-pseudonym"},{"location":"api/nethserver-mail/pseudonym/#update-pseudonym","text":"Update the pseudonym specified inside the name field. Example: { action : update-pseudonym , Description : my desc , Access : public , Account : [ { name : giacomo@my.domain.loc , type : user } ], name : info }","title":"update-pseudonym"},{"location":"api/nethserver-mail/pseudonym/#update-builtin","text":"Update the builtin pseudonym specified inside the name field. Example: { action : update-builtin , Access : public , name : info }","title":"update-builtin"},{"location":"api/nethserver-mail/pseudonym/#create","text":"Same input for validate API.","title":"create"},{"location":"api/nethserver-mail/pseudonym/#update","text":"Same input for validate API.","title":"update"},{"location":"api/nethserver-mail/pseudonym/#delete","text":"Delete the pseudonym given in the name field. Input example: { name : info@ }","title":"delete"},{"location":"api/nethserver-mail/queue/","text":"queue Manage Postfix queue. read The read API requires and action field. Valid actions are: stats list Input stats Return statistics about queue mail messages and queue size. Accept an extra time parameters in seconds. Example: { action : stats , time : 900 } list Example: { action : list } Output stats Queue timeseries. { mails : { data : [ [ 1553883500 , 12 ], [ 1553883490 , 11 ], ... ], labels : [ time , mails ] }, size : { data : [ [ 1553883500 , 851 ], [ 1553883490 , 851 ], ... ], labels : [ time , size ] } } list Display the content of Postfix queue. Example: { C79C310DB011 : { status : deferred , sender : MAILER-DAEMON , rawdate : Tue Mar 26 09:28:07 , reason : delivery temporarily suspended: connect to local.net[69.172.201.153]:25: Connection refused , recipient : test@local.net , size : 2996 }, 6791E10FC63B : { status : deferred , sender : MAILER-DAEMON , rawdate : Tue Mar 26 20:28:09 , reason : delivery temporarily suspended: connect to local.net[69.172.201.153]:25: Connection refused , recipient : test@local.net , size : 2997 }, ... } update Available actions: send : try to send a specific message send-all : try to send all mail in queue Input example for send : { action : send , name : C79C310DB011 } Input example for send-all : { action : send-all } All calls return a standard error or success message. delete Available actions: delete : delete a specific message delete-all : delete all message in queue Input example for delete : { action : delete , name : C79C310DB011 } Input example for delete-all : { action : delete-all } All calls return a standard error or success message.","title":"queue"},{"location":"api/nethserver-mail/queue/#queue","text":"Manage Postfix queue.","title":"queue"},{"location":"api/nethserver-mail/queue/#read","text":"The read API requires and action field. Valid actions are: stats list","title":"read"},{"location":"api/nethserver-mail/queue/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/queue/#stats","text":"Return statistics about queue mail messages and queue size. Accept an extra time parameters in seconds. Example: { action : stats , time : 900 }","title":"stats"},{"location":"api/nethserver-mail/queue/#list","text":"Example: { action : list }","title":"list"},{"location":"api/nethserver-mail/queue/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/queue/#stats_1","text":"Queue timeseries. { mails : { data : [ [ 1553883500 , 12 ], [ 1553883490 , 11 ], ... ], labels : [ time , mails ] }, size : { data : [ [ 1553883500 , 851 ], [ 1553883490 , 851 ], ... ], labels : [ time , size ] } }","title":"stats"},{"location":"api/nethserver-mail/queue/#list_1","text":"Display the content of Postfix queue. Example: { C79C310DB011 : { status : deferred , sender : MAILER-DAEMON , rawdate : Tue Mar 26 09:28:07 , reason : delivery temporarily suspended: connect to local.net[69.172.201.153]:25: Connection refused , recipient : test@local.net , size : 2996 }, 6791E10FC63B : { status : deferred , sender : MAILER-DAEMON , rawdate : Tue Mar 26 20:28:09 , reason : delivery temporarily suspended: connect to local.net[69.172.201.153]:25: Connection refused , recipient : test@local.net , size : 2997 }, ... }","title":"list"},{"location":"api/nethserver-mail/queue/#update","text":"Available actions: send : try to send a specific message send-all : try to send all mail in queue Input example for send : { action : send , name : C79C310DB011 } Input example for send-all : { action : send-all } All calls return a standard error or success message.","title":"update"},{"location":"api/nethserver-mail/queue/#delete","text":"Available actions: delete : delete a specific message delete-all : delete all message in queue Input example for delete : { action : delete , name : C79C310DB011 } Input example for delete-all : { action : delete-all } All calls return a standard error or success message.","title":"delete"},{"location":"api/nethserver-mail/send/","text":"send Manage mail sending policies. read The read API requires an action field: configuration list check-credentials Input configuration Return current global configuration. Input example: { action : configuration } list Return the list of current configured smarthost (except the default one): Input example: { action : list } check-credentials Check cre { action : check-credentials , Host : my.remotehost.com , Password : Nethesis,1234 , Username : giacomo , Port : 587 } Output configuration Output example: { AccessBypassList : [ 1.2.3.4 ], SenderValidation : disabled , AccessPoliciesSmtpauth : enabled , AccessPoliciesTrustednetworks : disabled , HeloHost : } list List configured smarthosts per sender. Example: { smarthosts : [ { props : { Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : localhost }, name : test1@nethserver.org , type : sender }, ... ] } check-credentials Return standard success or error message. Example: { action : check-credentials , Username : myuser , Password : mypass , Host : localhost , TlsStatus : disabled , Port : 587 } validate Valid actions: configuration : validate global configuration update : update an existing smart host create : create a new smart host Constraints Constraints for configuration action: AccessBypassList: a list of valid mail IP address or empty AccessPoliciesSmtpauth SenderValidation AccessPoliciesTrustednetworks: can be enabled or disabled HeloHost: a valid FQDN or empty Constraints for update action: name: must be an existing key, it can be a valid mail address or a domain starting with \"@\" symbol Host: valid hostname Port: valid port TlsStatus: can be enabled or disabled Constraints for create action: name: must be a non-existing key, it can be a valid mail address or a domain starting with \"@\" symbol Host: valid hostname Port: valid port TlsStatus: can be enabled or disabled Input configuration Use tha same format as read API. Example: { AccessBypassList : [ 1.2.3.4 ], SenderValidation : disabled , AccessPoliciesSmtpauth : enabled , AccessPoliciesTrustednetworks : disabled , HeloHost : nethserver.org , action : configuration } update Example: { action : update , Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : smtp.test.org , name : test3@nethserver.org } create Example: { action : create , Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : smtp.test.org , name : 3@nethserver.org } update Same input as validate. Extra valid actions: enable : enable given smarthost disable : disable given smarthost Input enable Example: { action : enable , name : sender1@nethserver.org } disable Example: { action : disable , name : sender1@nethserver.org } delete Delete the given smarthost. Example: { name : sender1@nethserver.org }","title":"send"},{"location":"api/nethserver-mail/send/#send","text":"Manage mail sending policies.","title":"send"},{"location":"api/nethserver-mail/send/#read","text":"The read API requires an action field: configuration list check-credentials","title":"read"},{"location":"api/nethserver-mail/send/#input","text":"","title":"Input"},{"location":"api/nethserver-mail/send/#configuration","text":"Return current global configuration. Input example: { action : configuration }","title":"configuration"},{"location":"api/nethserver-mail/send/#list","text":"Return the list of current configured smarthost (except the default one): Input example: { action : list }","title":"list"},{"location":"api/nethserver-mail/send/#check-credentials","text":"Check cre { action : check-credentials , Host : my.remotehost.com , Password : Nethesis,1234 , Username : giacomo , Port : 587 }","title":"check-credentials"},{"location":"api/nethserver-mail/send/#output","text":"","title":"Output"},{"location":"api/nethserver-mail/send/#configuration_1","text":"Output example: { AccessBypassList : [ 1.2.3.4 ], SenderValidation : disabled , AccessPoliciesSmtpauth : enabled , AccessPoliciesTrustednetworks : disabled , HeloHost : }","title":"configuration"},{"location":"api/nethserver-mail/send/#list_1","text":"List configured smarthosts per sender. Example: { smarthosts : [ { props : { Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : localhost }, name : test1@nethserver.org , type : sender }, ... ] }","title":"list"},{"location":"api/nethserver-mail/send/#check-credentials_1","text":"Return standard success or error message. Example: { action : check-credentials , Username : myuser , Password : mypass , Host : localhost , TlsStatus : disabled , Port : 587 }","title":"check-credentials"},{"location":"api/nethserver-mail/send/#validate","text":"Valid actions: configuration : validate global configuration update : update an existing smart host create : create a new smart host","title":"validate"},{"location":"api/nethserver-mail/send/#constraints","text":"Constraints for configuration action: AccessBypassList: a list of valid mail IP address or empty AccessPoliciesSmtpauth SenderValidation AccessPoliciesTrustednetworks: can be enabled or disabled HeloHost: a valid FQDN or empty Constraints for update action: name: must be an existing key, it can be a valid mail address or a domain starting with \"@\" symbol Host: valid hostname Port: valid port TlsStatus: can be enabled or disabled Constraints for create action: name: must be a non-existing key, it can be a valid mail address or a domain starting with \"@\" symbol Host: valid hostname Port: valid port TlsStatus: can be enabled or disabled","title":"Constraints"},{"location":"api/nethserver-mail/send/#input_1","text":"","title":"Input"},{"location":"api/nethserver-mail/send/#configuration_2","text":"Use tha same format as read API. Example: { AccessBypassList : [ 1.2.3.4 ], SenderValidation : disabled , AccessPoliciesSmtpauth : enabled , AccessPoliciesTrustednetworks : disabled , HeloHost : nethserver.org , action : configuration }","title":"configuration"},{"location":"api/nethserver-mail/send/#update","text":"Example: { action : update , Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : smtp.test.org , name : test3@nethserver.org }","title":"update"},{"location":"api/nethserver-mail/send/#create","text":"Example: { action : create , Password : mypass , TlsStatus : enabled , Username : test1 , status : enabled , Port : 587 , Host : smtp.test.org , name : 3@nethserver.org }","title":"create"},{"location":"api/nethserver-mail/send/#update_1","text":"Same input as validate. Extra valid actions: enable : enable given smarthost disable : disable given smarthost","title":"update"},{"location":"api/nethserver-mail/send/#input_2","text":"","title":"Input"},{"location":"api/nethserver-mail/send/#enable","text":"Example: { action : enable , name : sender1@nethserver.org }","title":"enable"},{"location":"api/nethserver-mail/send/#disable","text":"Example: { action : disable , name : sender1@nethserver.org }","title":"disable"},{"location":"api/nethserver-mail/send/#delete","text":"Delete the given smarthost. Example: { name : sender1@nethserver.org }","title":"delete"},{"location":"api/nethserver-mail/settings/","text":"settings Manage general mail settings. read Output Return current configuration. Output example: { AlwaysBccStatus : disabled , AlwaysBccAddress : , MessageSizeMax : 20 , MessageQueueLifetime : 4 , AlwaysBccAddress : } validate Constraints AlwaysBccStatus: can be enabled or disabled AlwaysBccAddress: must be a valid email address, if AlwaysBccStatus is enabled MessageSizeMax: positive integer, less than 1001 MessageQueueLifetime: positive integer, less than 31 Input Use tha same format as read API. Example: { AlwaysBccStatus : enabled , AlwaysBccAddress : spy@nethserver.org , MessageSizeMax : 20 , MessageQueueLifetime : 4 , AlwaysBccAddress : } update Same input as validate.","title":"settings"},{"location":"api/nethserver-mail/settings/#settings","text":"Manage general mail settings.","title":"settings"},{"location":"api/nethserver-mail/settings/#read","text":"","title":"read"},{"location":"api/nethserver-mail/settings/#output","text":"Return current configuration. Output example: { AlwaysBccStatus : disabled , AlwaysBccAddress : , MessageSizeMax : 20 , MessageQueueLifetime : 4 , AlwaysBccAddress : }","title":"Output"},{"location":"api/nethserver-mail/settings/#validate","text":"","title":"validate"},{"location":"api/nethserver-mail/settings/#constraints","text":"AlwaysBccStatus: can be enabled or disabled AlwaysBccAddress: must be a valid email address, if AlwaysBccStatus is enabled MessageSizeMax: positive integer, less than 1001 MessageQueueLifetime: positive integer, less than 31","title":"Constraints"},{"location":"api/nethserver-mail/settings/#input","text":"Use tha same format as read API. Example: { AlwaysBccStatus : enabled , AlwaysBccAddress : spy@nethserver.org , MessageSizeMax : 20 , MessageQueueLifetime : 4 , AlwaysBccAddress : }","title":"Input"},{"location":"api/nethserver-mail/settings/#update","text":"Same input as validate.","title":"update"}]}