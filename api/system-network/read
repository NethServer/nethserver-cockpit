#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require "/usr/libexec/nethserver/api/lib/helper_functions.pl";

use warnings;
use strict;
use esmith::NetworksDB;
use JSON;

my $ret = {"status" => undef, "configuration" => {'green' => [], 'red' => [] , 'orange' => [], 'blue' => [], 'hotspot' => [], 'free' => [], 'other' => [], 'missing' => [] }};
our $ndb = esmith::NetworksDB->open_ro();

sub is_valid_interface
{
    my $type = shift;
    if ($type =~ m/zone|xdsl|provider|network/) {
        return 0;
    } else {
        return 1;
    }
}

sub interface_exists
{
    my $interface = shift;
    return (-e "/sys/class/net/$interface");
}

sub cat
{
    my $file = shift;
    my $ret = '';
    open my $fh, '<', $file or return $ret;
    $ret = do { local $/; <$fh> };
    close $fh;
    if ($ret) {
        chomp $ret;
    }
    return $ret;
}

my $input = readInput();
my $cmd = $input->{'action'};
my $host = $input->{'host'};

if($cmd eq 'list') {
    my %interfaces;
    my %info;
    my %aliases;
    my %bridges;
    my %bonds;
    my %status;

    # Read hardware info
    open my $in, "/usr/libexec/nethserver/nic-info |";
    while (my $line = <$in>)
    {
        chomp $line;
        my ($name,$mac,$bus,$model,$driver,$speed,$link) = split(",",$line);
        $info{$name} = {
            "mac" => $mac,
            "bus" => $bus,
            "model" => $model,
            "driver" => $driver,
            "speed" => $speed,
            "link" => $link
        };
    }
    close($in);

    # Prepare children maps
    foreach my $n ($ndb->get_all()) {
        my $parent = '';
        my $name = $n->key;
        my $role = $n->prop('role') || next;
        # handle aliases
        if ($name =~ /(.*):(.*)/) {
            $parent = $1;
            my $ip = $n->prop('ipaddr') || next;
            my $net = $n->prop('netmask') || next;
            if (!exists($aliases{$parent})) { # initialize alias array
                $aliases{$parent} = [];
            }
            push($aliases{$parent}, $name);
            next;
        }
        if ($role eq 'bridged') {
            $parent = $n->prop('bridge') || next;
            if (!exists($bridges{$parent})) { # initialize bridge array
                $bridges{$parent} = [];
            }
            push($bridges{$parent}, $name);
        }
        if ($role eq 'slave') {
            $parent = $n->prop('master') || next;
            if (!exists($bonds{$parent})) { # initialize bonds array
                $bonds{$parent} = [];
            }
            push($bonds{$parent}, $name);
        }
    }

    # prepare interface map with hardware info
    foreach my $n ($ndb->interfaces()) {
        my %props = $n->props;
        my $iname = $n->key;
        if ($props{'type'} eq 'vlan') {
            my @tmp = split(/\./,$n->key);
            $props{'parent'} = $tmp[0];
            $props{'tag'} = $tmp[1];
        }
        $props{'name'} = $n->key;
        my $role = $props{'role'} || '';
        if ($props{'type'} eq 'ethernet') {
            $props{'virtual'} = 0;
            $props{'existing'} = exists($info{$n->key}) ? 1 : 0;
        } else {
            $props{'virtual'} = 1;
        }

        $interfaces{$n->key} = \%props;

        # add hardware info
        if (exists($info{$n->key})) {
            my $i = $info{$n->key};
            foreach my $k (keys(%$i)) {
                 $status{$n->key}{$k} = $i->{$k};
            }
        } else {
            # retrieve carrier for virtual interfaces
            my $carrier_file = "/sys/class/net/".$n->key."/carrier";
            if (-f $carrier_file) {
                $status{$n->key}{'link'} = cat($carrier_file);
            }
            # retrieve mac address for virtual interfaces
            my $mac_file = "/sys/class/net/".$n->key."/address";
            if (-f $mac_file) {
                $status{$n->key}{'mac'} = cat($mac_file);
            }
        }

        # read address in cidr format
        my $cidr = `/sbin/ip -o -4 address show $iname primary 2>/dev/null| head -1 | awk '{print \$4}'`;
        chomp $cidr;
        $props{'cidr'} = $cidr;
        $cidr =~ /^(.*)\/(.*)$/;
        my $dynamic_ip = $1;
        my $gw;

        # Retrieve IP address of DHCP interfaces and PPPoE
        if ($n->key eq 'ppp0' ) {
            $gw = `/sbin/ip -4 route show dev ppp0 | /usr/bin/grep src | /usr/bin/awk '{print \$1}'`;
            chomp $gw;
            $status{$iname}{'gateway'} = $gw;
            $status{$iname}{'ipaddr'} = $dynamic_ip;
        } elsif (exists($props{'bootproto'}) && $props{'bootproto'} eq 'dhcp') {
            $gw = `/usr/bin/grep routers /var/lib/dhclient/dhclient--$iname.lease | /usr/bin/tail -n 1 | /usr/bin/awk '{print \$3}' | /usr/bin/cut -d ';' -f 1`;
            chomp $gw;
            $status{$iname}{'gateway'} = $gw;
            $status{$iname}{'ipaddr'} = $dynamic_ip;
        }
        $ret->{'status'} = \%status;
    }

    foreach my $k (keys(%interfaces)) {
        my $interface = $interfaces{$k};
        my $role = $interface->{'role'} || 'free';
        my $type = $interface->{'type'};

        # safe-guard: skip non-interfaces
        next if ($type =~ m/zone|provider|network/);
        # children will be handled later
        next if ($role eq 'alias' || $role eq 'pppoe' || $type eq 'provider');

        $interface->{'aliases'} = [];
        $interface->{'devices'} = [];

        # add alias children
        if (exists($aliases{$k})) {
            my $aliases = $aliases{$k};
            foreach my $a (@$aliases) {
                push($interface->{'aliases'}, $interfaces{$a});
            }
        }

        # add bridge children
        if (exists($bridges{$k})) {
            my $bridges = $bridges{$k};
            foreach my $a (@$bridges) {
                push($interface->{'devices'}, $interfaces{$a});
            }
        }

        # add bond children
        if (exists($bonds{$k})) {
            my $bonds = $bonds{$k};
            foreach my $a (@$bonds) {
                push($interface->{'devices'}, $interfaces{$a});
            }
        }

        # handle special case of virtual interfaces with virtual parents
        if ($role eq 'bridged' || $role eq 'slave') {
            next;
        }

        # pppoe is enabled, set connected ethernet interface as device
        if ($k eq 'ppp0' && $interface->{'type'} eq 'xdsl') {
            my @tmp = $ndb->get_all_by_prop('role','pppoe');
            if (@tmp) {
                push($interface->{'devices'}, $interfaces{$tmp[0]->key});
            }
        }

        if (interface_exists($k)) {
            if (exists($ret->{'configuration'}{$role})) {
                 push($ret->{'configuration'}{$role}, $interface);
            } else {
                push($ret->{'configuration'}{'other'}, $interface);
            }
        } else {
            push($ret->{'configuration'}{'missing'}, $interface);
        }
    }

    foreach my $krole (keys %{$ret->{'configuration'}}) {
        $ret->{'configuration'}{$krole} = [sort { $a->{'name'} cmp $b->{'name'} } @{$ret->{'configuration'}{$krole}}];
    }

    # add free interfaces not already listed inside the db
    # this could happen after a restor from cockpit
    foreach my $i (keys %info) {
        my $found = 0;
        next if ($ndb->get($i)); # skip existing interface inside the db
        foreach my $config_arr (keys $ret->{'configuration'}) {
            foreach (@{$ret->{'configuration'}{$config_arr}}) {
                if ($_->{'name'} eq $i) {
                    $found = 1;
                }
            }
        }
        if (!$found) {
            push(@{$ret->{'configuration'}{'free'}}, {
                    exisiting => 1,
                    name => $i,
                    cidr => '',
                    devices => [],
                    virtual => 0,
                    aliases => [],
                    type => 'ethernet',
                    role => ''

                });
        }
    }

    my $ppp0 = $ndb->get('ppp0');
    if($ppp0->prop('type') eq 'xdsl-disabled') {
        $ret->{'configuration'}{'pppoe'} = 0;
    } else {
        $ret->{'configuration'}{'pppoe'} = 1;
    }

} elsif ($cmd eq 'heirs') {

    my $parent = $input->{'parent'};
    my @interfaces;
    foreach my $n ($ndb->get_all()) {
        my %props = $n->props;
        my $role = $props{'role'} || '';
        next if(!is_valid_interface($props{'type'}));
        if ($role eq '') {
            push(@interfaces, $n->key);
            next;
        }
        if (defined($props{'master'}) && $props{'master'} eq $parent) {
            push(@interfaces, $n->key);
            next;
        }
        if (defined($props{'bridge'}) && $props{'bridge'} eq $parent) {
            push(@interfaces, $n->key);
            next;
        }
    }

    # add free interfaces not already listed inside the db
    # this could happen after a restor from cockpit
    open my $in, "/usr/libexec/nethserver/nic-info |";
    while (my $line = <$in>)
    {
        chomp $line;
        my ($name,$mac,$bus,$model,$driver,$speed,$link) = split(",",$line);

        if ($ndb->get($name)) {
            next;
        } else {
            push(@interfaces, $name);
        }
    }
    close($in);

    $ret = \@interfaces;

} elsif ($cmd eq 'available') {

    $ret = {};

    my @vlan;
    foreach my $n ($ndb->get_all()) {
        next if ($n->prop('type') eq 'ethernet' && !interface_exists($n->key));
        if(is_valid_interface($n->prop('type')) && $n->prop('type') !~ m/vlan|alias/) {
            push(@vlan, $n->key);
        }
    }
    $ret->{'vlan'} = \@vlan;

    my @bridge;
    foreach my $n ($ndb->get_all()) {
        next if ($n->prop('type') eq 'ethernet' && !interface_exists($n->key));
        if(is_valid_interface($n->prop('type')) && $n->prop('type') !~ m/bridge|alias/ && $n->prop('role') !~ m/bridged/) {
            push(@bridge, $n->key);
        }
    }
    $ret->{'bridge'} = \@bridge;

    my @bond;
    foreach my $n ($ndb->get_all()) {
        next if ($n->prop('type') ne 'ethernet');
        if (interface_exists($n->key) && $n->prop('role') !~ m/slave/) {
            push(@bond, $n->key);
        }
    }
    $ret->{'bond'} = \@bond;

} elsif ($cmd eq 'bond-types') {

    my %types = ( "balance-rr" => 0, "active-backup" => 1, "balance-xor" => 2, "broadcast" => 3, "802.3ad" => 4, "balance-tlb" => 5, "balance-alb" => 6 );
    my @tmp;
    foreach (keys(%types)) {
        push(@tmp, { "name" => $_, "value" => $types{$_} });
    }
    $ret = \@tmp;
} elsif ($cmd eq 'routing') {

   $ret = undef;
   $ret->{'data'} = `route -n`;
   
} elsif ($cmd eq 'traceroute') {

   $ret = undef;
   error('MissingHost','The host is a mandatory argument') if (! $host);
   $ret->{'data'} = `traceroute -I -n $host 2>&1`;
   $ret->{'result'} = ($? > 0) ? JSON::false : JSON::true;

} elsif ($cmd eq 'ping') {

   $ret = undef;
   error('MissingHost','The host is a mandatory argument') if (! $host);
   $ret->{'data'} = `ping -n -c4 $host 2>&1`;
   $ret->{'result'} = ($? > 0) ? JSON::false : JSON::true;

} elsif ($cmd eq 'nslookup') {

   $ret = undef;
   my $nameServer = $input->{'nameServer'} || '127.0.0.1';
   error('MissingHost','The host is a mandatory argument') if (! $host);
   $ret->{'data'} = `nslookup $host $nameServer 2>&1`;
   $ret->{'result'} = ($? > 0) ? JSON::false : JSON::true;

} elsif ($cmd eq 'info') {

   my $i = $input->{'name'};
   $ret = {};
   my $out = `curl -L --connect-timeout 5 --interface $i ifconfig.co/json 2>/dev/null`;
   if ($out) {
       $ret = decode_json($out);
   }
} else {
    error();
}

# JSON output
print encode_json($ret); 
