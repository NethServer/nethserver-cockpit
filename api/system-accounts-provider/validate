#!/usr/bin/php
<?php
/*
 * Copyright (C) 2018 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/

/** Include helper functions **/

require_once("/usr/libexec/nethserver/api/lib/Helpers.php");

function validate_remoteldap($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('LdapURI', Validate::ANYTHING);
    $v->declareParameter('BindDN', Validate::ANYTHING);
    $v->declareParameter('BindPassword', Validate::ANYTHING);
    $v->declareParameter('BaseDN', Validate::ANYTHING);
    $v->declareParameter('UserDN', Validate::ANYTHING);
    $v->declareParameter('GroupDN', Validate::ANYTHING);
    $v->declareParameter('StartTls', $v->createValidator()->memberOf('', 'enabled', 'disabled'));

    $errors = 0;

    if($data['StartTls'] === 'enabled' && substr($data['LdapURI'], 0, 6) === 'ldaps:') {
        $errors++;
        $v->addValidationError('StartTls', 'starttls_conflict');
    }

    $credentialsValidator = $v->createValidator()->platform('ldap-credentials', $data['BaseDN'], $data['LdapURI'], $data['StartTls'] === 'enabled' ? '1' : '', $data['BindDN']);
    if( ! $credentialsValidator->evaluate($data['BindPassword'])) {
        $errors++;
        $v->addValidationError('BindDN', $credentialsValidator->getFailureInfo());
    }

    if (!$v->validate() || $errors > 0) {
        error($v);
    } else {
        success();
    }
}

function validate_localad($data) {
    $v = new LegacyValidator($data);
    $workgroupValidator = $v->createValidator(Validate::HOSTNAME_SIMPLE)->maxLength(15);
    $realmValidator = $v->createValidator(Validate::HOSTNAME_FQDN)->platform('dcrealm');
    $ipAddressValidator = $v->createValidator(Validate::IP)->platform('dcipaddr');
    if (!$realmValidator->evaluate($data['Realm'])) {
        $v->addValidationError('Realm', 'dcrealm_validation_error');
    }
    if (!$workgroupValidator->evaluate($data['Workgroup'])) {
        $v->addValidationError('Workgroup', 'workgroup_simple_hostname_max_15');
    }
    $parts = explode('.',$data['IpAddress']); # IP address can't be a network or a broadcast address
    if ($parts[3] == "0" || $parts[3] == "255" || !$ipAddressValidator->evaluate($data['IpAddress'])) {
        $v->addValidationError('IpAddress', 'dcipaddr_validation_error');
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_remotead($data) {
    $v = new LegacyValidator($data);
    $workgroupValidator = $v->createValidator(Validate::HOSTNAME_SIMPLE)->maxLength(15);
    $realmValidator = $v->createValidator(Validate::HOSTNAME_FQDN);
    $v->declareParameter('AdDns', Validate::IP_OR_EMPTY);
    $v->declareParameter('AdRealm', $realmValidator);
    $v->declareParameter('AdUsername', Validate::NOTEMPTY);
    $v->declareParameter('AdPassword', Validate::NOTEMPTY);
    $dnsValidator = $v->createValidator()->platform('ad-dns', strtolower($data['AdRealm']));
    if( ! $dnsValidator->evaluate(isset($data['AdDns']) ? $data['AdDns'] : '')) {
        $v->addValidationError( 'AdDns', $dnsValidator);
    }

    if (!$v->validate()) {
        error($v);
    }

    validate_adcredentials($data);
}


function validate_adcredentials($data) {
    if (!array_key_exists('AdDns', $data)) {
        $db = new EsmithDatabase('configuration');
        $nameServers = explode(",", $db->getProp('dns', 'NameServers'));
        if (isset($nameServers[0]) && $nameServers[0]) {
            $data['AdDns'] = $nameServers[0];
        } else {
            $data['AdDns'] = "127.0.0.1";
        }
    }
    $output = shell_exec("/usr/sbin/account-provider-test probead ".escapeshellarg($data['AdRealm'])." ".escapeshellarg($data['AdDns']));

    if (!$output) {
        error();
    }
    $probe = json_decode($output, TRUE);

    $cmd = "/usr/bin/ldapsearch ";
    if ($probe['StartTls']) {
        $cmd .= " -ZZ ";
    }
    $host = parse_url($probe['LdapURI'], PHP_URL_HOST);
    $addr = trim(shell_exec("dig -t A +short $host ".escapeshellarg($data['AdDns']." | head -n 1"))); # grab only the first result
    $uri = str_replace($host, $addr, $probe['LdapURI']);
    $cmd .= "-H ".escapeshellarg($uri)." -x -D ".escapeshellarg($data['AdUsername'])." -w ".escapeshellarg($data['AdPassword'])." -s base -b ".escapeshellarg($probe['BaseDN'])." '(objectClass=*)' 2>&1";
    exec($cmd, $output, $ret);
    if ($ret > 0) {
        error(array('type' => 'NotValid','message' => implode("\n",$output)));
    } else {
        success();
    }
}

function validate_changeadip($data) {
    $v = new LegacyValidator($data);
    $ipAddressValidator = $v->createValidator(Validate::IP)->platform('dcipaddr');
    $parts = explode('.',$data['IpAddress']); # IP address can't be a network or a broadcast address
    if ($parts[3] == "0" || $parts[3] == "255" || !$ipAddressValidator->evaluate($data['IpAddress'])) {
        $v->addValidationError('IpAddress', 'dcipaddr_validation_error');
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_credentials($data) {
    $v = new LegacyValidator($data);
    $db = new EsmithDatabase('configuration');
    $v->declareParameter('StartTls', Validate::SERVICESTATUS);

    if ($data['BindDN']) {
        $cmd = "/sbin/e-smith/validate ldap-credentials {$data['BaseDN']} {$data['LdapURI']} ".($data['StartTls'] === 'enabled' ? '1' : '""')." {$data['BindDN']} {$data['BindPassword']} 2>/dev/null";
        exec($cmd, $out, $ret);
        if ($ret > 0) {
            $v->addValidationError('BindDN', implode("",$out));
        }
    } else {
        # check if credentials are required
        $bindPassword = $db->getProp('sssd', 'BindPassword');
        $bindDn = $db->getProp('sssd', 'BindDn');
        if (!$bindPassword && !$bindDn) {
            exec("/usr/libexec/nethserver/ldap-credentials-optional", $output, $exit_code);
            if ($exit_code == 2) {
                $v->addValidationError('BindDN', "valid_adldapcredentials_required");
            }
        }
    }

    if($data['StartTls'] === 'enabled' && substr($data['LdapURI'], 0, 6) === 'ldaps:') {
        $v->addValidationError('StartTls', 'valid_starttls_urischeme');
    }    

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}


$data = readInput();

if($data['action'] == 'remote-ldap') {
    validate_remoteldap($data);
} else if($data['action'] == 'local-ad') {
    validate_localad($data);
} else if($data['action'] == 'remote-ad') {
    validate_remotead($data);
} else if($data['action'] == 'change-ad-ip') {
    validate_changeadip($data);
} else if($data['action'] == 'bind-credentials') {
    validate_credentials($data);
} else {
    error();
}

