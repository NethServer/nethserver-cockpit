#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require "/usr/libexec/nethserver/api/lib/helper_functions.pl";

use warnings;
use strict;
use JSON;
use esmith::ConfigDB;
use File::Basename;

our $path = "/usr/share/cockpit/nethserver/applications/";
my $ret = {};
my $input = readInput();
my $cmd = $input->{'action'};

sub read_json
{
    my $file = shift;
    my $json;
    {
        local $/; #Enable 'slurp' mode
        open my $fh, "<", $file;
        $json = <$fh>;
        close $fh;
    }
    return decode_json($json);
}

sub invoke_info_api
{
    use IPC::Open2;
    my $helper_path = shift;
    my $helper_input = shift;
    my($chld_out, $chld_in, $pid);

    $helper_input = {%$input, 'action' => 'app-info', %$helper_input}; # merges the input hashes
    $pid = open2($chld_out, $chld_in, $helper_path);
    print $chld_in encode_json($helper_input);
    close($chld_in);
    my $raw_response = <$chld_out>;
    close($chld_out);
    waitpid( $pid, 0 );
    return safe_decode_json($raw_response);
}

sub app_info
{
    my $app = shift;
    my $shortcuts = shift;
    my $file = "$path$app.json";
    my $data = read_json($file);
    my $extended_data = {};

    # If available, invoke the infoapi provider
    # to extend the manifest data dynamically
    if($data->{'infoapi'}) {
        if(-x '/usr/libexec/nethserver/api/' . $data->{'infoapi'}->{'path'}) {
            $extended_data = invoke_info_api(
                '/usr/libexec/nethserver/api/' . $data->{'infoapi'}->{'path'},
                safe_decode_json($data->{'infoapi'}->{'input'})
            );
        } else {
            warn "[ERROR] missing executable script! Actual `infoapi.path` value: " . $data->{'infoapi'}->{'path'} . "\n";
        }
    }
    $data = {%$data, %$extended_data}; # merges the input hashes

    # Set hardcoded attributes:
    $data->{'shortcut'} = defined($shortcuts->{$app}) ? 1 : 0;
    $data->{'editable'} = 1;
    return $data;
}

sub authorized_apps
{
    my $out = `/usr/libexec/nethserver/api/system-authorization/read`;
    if ($out ne '') {
        my $data = decode_json($out) || return ();
        return $data->{'applications'}
    } else {
        return ();
    }
}

sub is_installed
{
    my $app = shift;
    my $installed = shift;
    foreach (@$installed) {
        return 1 if ($app eq $_);
    }
    return 0;
}

sub has_cockpit_support
{
    my $app = shift;
    return (-f "$path$app.json");
}

if($cmd eq 'list') {

    my @apps;
    my %shortcuts;
    if ($< == 0) { # non-root users can't access the config db
        my $db = esmith::ConfigDB->open_ro();
        my $shortcuts = $db->get_prop('cockpit.socket', 'Shortcuts') || '';
        foreach (split(",",$shortcuts)) {
            $shortcuts{$_} = 1;
        }
    }

    my $authorized = authorized_apps();


    foreach my $f (glob("$path*.json")) {
        my ($name,$path,$suffix) = fileparse($f,(".json"));
        if (grep(/^$name$/, @$authorized)) {
            my $data = app_info($name, \%shortcuts) || next;
            push(@apps, $data);
        }
    }

    print encode_json(\@apps);

} elsif ($cmd eq 'info') {

    print encode_json(app_info($input->{'name'}));

} elsif ($cmd eq 'hide-uninstall') {

    my $hide_uninstall = 'enabled';
    if ($< == 0) { # non-root users can't access the config db
        my $db = esmith::ConfigDB->open_ro();
        $hide_uninstall = $db->get_prop('cockpit.socket', 'HideUninstall') || 'disabled';
    }

    print encode_json({ 'HideUninstall' => $hide_uninstall });
    
} else {
    error();
}
