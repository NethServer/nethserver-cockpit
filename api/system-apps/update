#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use NethServer::ApiTools qw(hints success error readInput safe_decode_json invoke_info_api);
use warnings;
use strict;
use JSON;
use esmith::ConfigDB;
use File::Basename;
use File::Path qw( make_path );
use MIME::Base64;

our $path = "/usr/share/cockpit/nethserver/applications/";
my $pinned_apps_file_path = "/etc/nethserver/pinned_apps.json";
my $cockpit_path = "/usr/share/cockpit/";
my $ret = {};
my $input = readInput();
my $cmd = $input->{'action'};

sub read_json
{
    my $file = shift;
    my $json;
    {
        local $/; #Enable 'slurp' mode
        open my $fh, "<", $file;
        $json = <$fh>;
        close $fh;
    }
    return decode_json($json);
}


sub has_shortcut
{
    my $app = shift;
    my $db = shift;
    my $shortcuts = $db->get_prop('cockpit.socket', 'Shortcuts') || '';
    foreach (split(",",$shortcuts)) {
        return 1 if ($_ eq $app);
    }
    return 0;
}

sub has_pin
{
    my $app = shift;
    my $db = shift;
    my $pins = $db->get_prop('cockpit.socket', 'Pins') || '';
    foreach (split(",",$pins)) {
        return 1 if ($_ eq $app);
    }
    return 0;
}

sub update_pins_file
{
    my @pinned_apps;
    my @pinned_apps_names;
    my %shortcuts;
    my %pins;
    my $pinned_apps_file;

    if ($< == 0) { # non-root users can't access the config db
        my $db = esmith::ConfigDB->open_ro();

        my $shortcuts = $db->get_prop('cockpit.socket', 'Shortcuts') || '';
        foreach (split(",",$shortcuts)) {
            $shortcuts{$_} = 1;
        }

        my $pins = $db->get_prop('cockpit.socket', 'Pins') || '';
        foreach (split(",",$pins)) {
            $pins{$_} = 1;
            push(@pinned_apps_names, $_);
        }
    }

    foreach my $f (glob("$path*.json")) {
        my ($name,$path,$suffix) = fileparse($f,(".json"));
        if (grep(/^$name$/, @pinned_apps_names)) {
            my $data = app_info($name, \%shortcuts, \%pins) || next;
            push(@pinned_apps, $data);
        }
    }

    # Check that pinned apps directory exists
    my ( $file, $directories ) = fileparse $pinned_apps_file_path;

    if ( !-d $directories ) {
        make_path $directories or die "Failed to create path: $directories";
    }

    # Create the file
    unless(open $pinned_apps_file, '>'.$pinned_apps_file_path) {
        # Die with error message if we can't open it
        die "\nUnable to create $pinned_apps_file_path\n";
    }
    print $pinned_apps_file encode_json(\@pinned_apps);
    close $pinned_apps_file;
}

sub app_info
{
    my $app = shift;
    my $shortcuts = shift;
    my $pins = shift;
    my $file = "$path$app.json";
    my $data = read_json($file);
    my $extended_data = {};
    my $encoded;
    my $raw_string;

    # If available, invoke the infoapi provider
    # to extend the manifest data dynamically
    if($data->{'infoapi'}) {
        if(-x '/usr/libexec/nethserver/api/' . $data->{'infoapi'}->{'path'}) {
            $extended_data = invoke_info_api(
                '/usr/libexec/nethserver/api/' . $data->{'infoapi'}->{'path'},
                safe_decode_json($data->{'infoapi'}->{'input'}),
                $input
            );
        } else {
            warn "[ERROR] missing executable script! Actual `infoapi.path` value: " . $data->{'infoapi'}->{'path'} . "\n";
        }
    }
    $data = {%$data, %$extended_data}; # merges the input hashes

    # Set hardcoded attributes:
    $data->{'shortcut'} = defined($shortcuts->{$app}) ? 1 : 0;
    $data->{'pin'} = defined($pins->{$app}) ? 1 : 0;
    $data->{'editable'} = 1;
    # Base64 icon
    open (my $image, "$cockpit_path$app/" . $data->{'icon'}) or die "$!";
    $raw_string = do{ local $/ = undef; <$image>; };
    $encoded = encode_base64($raw_string);
    $encoded =~ s/\R//g;
    $data->{'iconBase64'} = $encoded;
    return $data;
}

sub apply
{
    my $out = `/sbin/e-smith/expand-template /usr/share/cockpit/nethserver/manifest.json`;
    if ($? > 0) {
        error("EventFailed", "");
    } else {
        success();
    }
}

if ($< != 0) {
    error()
}

my $db = esmith::ConfigDB->open();
if($cmd eq 'remove-shortcut') {

    my $app = $input->{'name'};
    if (has_shortcut($app, $db)) {
        my $shortcuts = $db->get_prop('cockpit.socket', 'Shortcuts') || '';
        my @tmp = split(",",$shortcuts);
        @tmp = grep(!/^$app$/, @tmp);
        $db->set_prop('cockpit.socket', 'Shortcuts', join(",",@tmp));
    }
    apply();

} elsif ($cmd eq 'add-shortcut') {

    my $app = $input->{'name'};
    if (!has_shortcut($app, $db)) {
        my $shortcuts = $db->get_prop('cockpit.socket', 'Shortcuts') || '';
        my @tmp = split(",",$shortcuts);
        push(@tmp, $app);
        $db->set_prop('cockpit.socket', 'Shortcuts', join(",",@tmp));
    }
    apply();
} elsif($cmd eq 'remove-pin') {

    my $app = $input->{'name'};
    if (has_pin($app, $db)) {
        my $pins = $db->get_prop('cockpit.socket', 'Pins') || '';
        my @tmp = split(",",$pins);
        @tmp = grep(!/^$app$/, @tmp);
        $db->set_prop('cockpit.socket', 'Pins', join(",",@tmp));
    }
    update_pins_file();
    apply();

} elsif ($cmd eq 'add-pin') {

    my $app = $input->{'name'};
    if (!has_pin($app, $db)) {
        my $pins = $db->get_prop('cockpit.socket', 'Pins') || '';
        my @tmp = split(",",$pins);
        push(@tmp, $app);
        $db->set_prop('cockpit.socket', 'Pins', join(",",@tmp));
    }
    update_pins_file();
    apply();

} else {
    error();
}
