#!/bin/bash

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Functions for BASH helpers
#

#
# Print an InvalidInput error and exit 1
#
function invalid_error {
        error "InvalidInput" "no_json_data_available"
}

#
# Print a JSON error and exit 1
# Takes 2 arguments:
#   - the error type (default: GenericError)
#   - a message (default "Generic error")
#
function error {
    type=${1:-"GenericError"}
    message=${2-"generic_error"}

    printf '{"id":"%s","type":"%s","message":"%s"}' "$(date +%s)" "$type" "$message"
    exit 1
}

#
# Check exit status of last command and possibly exit with error
# Optionally takes 2 arguments:
#   - the error type (default: EventFailed)
#   - a message (default "Action failed")
#
function check_exit_status {
    if [ $? -gt 0 ]; then
        type=${1:-"EventFailed"}
        message=${2-"Action failed"}
        error "$type" "$message"
    fi
}

#
# Print a success JSON object and exit 0
#
function success {
    printf '{"state":"success"}'
    exit 0
}


#
# Print a hint in JSON format
# Takes 4 parameters:
#  - a general message
#  - a details map in json format
#  - the number of element inside the details map
#  - a link to an external doc
# 
# If details is empty, print an empty hint
function hints {
    message=$1
    details=${2-null}
    count=${3-0}
    link=$4

    status=$(/sbin/e-smith/config getprop cockpit.socket ShowHints 2>/dev/null)
    if [ -z "$status" ] || [ "$status" == "disabled" ]; then
        printf '{"count": 0, "message": null, "details": null, "link": null}'
        exit 0
    fi

    if [ -z "$message" ]; then
        message="null"
    else
        message="\"$message\""
        if [ $count -eq 0 ]; then
            count=1
        fi
    fi

    if [ -z "$link" ]; then
        link="null"
    else
        link="\"$link\""
    fi 

    printf '{"count":%s, "message": %s, "details": %s, "link": %s}' "$count" "$message" "$details" "$link"
    exit 0
}
