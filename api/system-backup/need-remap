#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;
use esmith::NetworksDB;
use JSON;

require '/usr/libexec/nethserver/api/lib/helper_functions.pl';

our $tmpdir = "/tmp/cockpit-restore-".time();
our $db_file = "var/lib/nethserver/db/networks";
my $file = $ARGV[0] || error();

sub cleanup
{
    system("rm -rf $tmpdir 2>/dev/null");
}


sub get_available_interfaces
{
    my $interfaces;
    # Read hardware info
    open my $in, "/usr/libexec/nethserver/nic-info |";
    while (my $line = <$in>)
    {
        chomp $line;
        my ($name,$mac,$bus,$model,$driver,$speed,$link) = split(",",$line);
        $interfaces->{$name} = $link;
    }
    close($in);
    return $interfaces;
}

sub get_nic_info
{
    my $db = shift;
    my $interface = shift;

    my $ret = {'name' => $interface};
    my $i = $db->get($interface) || return $ret;
    my $bootproto = $i->prop('bootproto') || '';
    $ret->{'ipaddr'} = $i->prop('ipaddr') || uc($bootproto);
    $ret->{'role'} = $i->prop('role') || '';
    $ret->{'nslabel'} = $i->prop('nslabel') || '';
    my $parent = undef;
    if ($ret->{'role'} eq 'bridged') {
        $parent = $db->get($i->prop('bridge'))
    }
    if ($ret->{'role'} eq 'slave') {
        $parent = $db->get($i->prop('master'));
    }

    if ($parent) {
        $ret->{'ipaddr'} = $parent->prop('ipaddr') || uc($parent->prop('bootproto'));
        $ret->{'ipaddr'} .= " - ".$parent->key;
        $ret->{'role'} = $parent->prop('role') || '';
        $ret->{'nslabel'} = $parent->prop('nslabel') || '';
    }
    if ($ret->{'role'} eq '') {
        $ret->{'ipaddr'} = '';
        $ret->{'nslabel'} = '';
    }

    return $ret;
}

if ( ! -e $file) {
    error();
} else {
    mkdir($tmpdir);
    system("tar xf $file -C $tmpdir $db_file 2>/dev/null");
    if ($? > 0) {
        cleanup();
        error();
    }
}

my $ret = { "remap" => 0, "restore" => (), "current" => () };
my $restore_db = esmith::NetworksDB->open_ro($tmpdir."/".$db_file);

my $available_interfaces = get_available_interfaces();
foreach ($restore_db->ethernets) {
    # check if interface from restore is present
    if (!grep(/^$_->key$/, keys $available_interfaces)) {
        $ret->{'remap'} = 1;
    }
}
if ($ret->{'remap'}) {
    my @restore;
    my @current;
    foreach ($restore_db->ethernets) {
        my $info = get_nic_info($restore_db, $_->key);
        push(@restore, $info);
    }
    my $ndb = esmith::NetworksDB->open_ro();
    foreach (keys $available_interfaces) {
        my $info = get_nic_info($ndb, $_);
        $info->{'link'} = $available_interfaces->{$_};
        push(@current, $info);
    }
    $ret->{'restore'} = \@restore;
    $ret->{'current'} = \@current;

    print encode_json($ret);
}

cleanup();
