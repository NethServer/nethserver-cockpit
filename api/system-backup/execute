#!/bin/bash

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

. /usr/libexec/nethserver/api/lib/helper_functions

data=$(cat /dev/stdin)
action=$(echo $data | jq -r '.action')

function _get
{
    field=$1
    echo $data | jq -r ".$field"
}

function _restore
{
    id=$1
    # transform remap map to a comma-separated list
    remap=$(echo $2 | jq -r ". | to_entries[] | [.key, .value] | join(\",\")" | tr '\n' , | sed 's/,$//')
    if [ ! -z $remap ]; then
        remap="--remap-interfaces $remap"
    fi

    # check reinstall option
    reinstall=""
    if [ "$3" == "disabled" ]; then
        reinstall="--noreinstall"
    fi

    # Simulate json event output
    echo '{"steps":2,"pid":"","args":"","event":"restore-config"}'
    echo '{"step":1,"pid":"","action":"Pulling from history","event":"restore-config","state":"running"}'
    /usr/libexec/nethserver/backup-config-history pull -i $id
    sleep 2
    echo '{"progress":"0.50","time":"2.00","exit":0,"event":"restore-config","state":"done","step":1,"pid":"","action":"Pulling from history"}';

    echo '{"step":2,"pid":"","action":"Restoring configuration","event":"restore-config","state":"running"}'
    /sbin/e-smith/restore-config $remap $reinstall &>/dev/null
    ret=$?
    echo "{\"progress\":\"1.00\",\"time\":\"\",\"exit\":$ret,\"event\":\"restore-config\",\"state\":\"done\",\"step\":2,\"pid\":\"\",\"action\":\"Restoring configuration\"}"
    if [ $ret -gt 0 ]; then
        echo '{"pid":"","status":"failed","event":"restore-config"}'
        exit 1
    else
        echo '{"pid":"","status":"success","event":"restore-config"}'
        exit 0
    fi
}

case $action in

    "format-disk")
        /usr/libexec/nethserver/api/system-backup/format-disk "$(_get name)"
        ;;

    "run-backup-data")
        unit=cockpit-backup-data-"$(_get name)"

        # Skip double execution
        systemctl is-active $unit >/dev/null
        if [ $? -eq 0 ]; then
            exit 0
        else
            systemctl reset-failed $unit >/dev/null
        fi

        systemd-run --setenv=HOME=/root --unit=$unit /sbin/e-smith/backup-data-wrapper "$(_get name)"
        ;;

    "run-backup-config")
        /sbin/e-smith/backup-config -f
        if [ $? -gt 0 ]; then
            error
        else
            /usr/libexec/nethserver/backup-config-history push -t snapshot -d "$(_get name)"
        fi
        ;;

    "download-backup-config")
        tmp=$(mktemp)
        # the file must be inside /tmp and must already exists
        /usr/libexec/nethserver/backup-config-history pull -i "$(_get name)" -f $tmp
        cat $tmp | base64 -w 0
        rm -f $tmp
        ;;

    "restore-backup-config")
        _restore "$(_get data)" "$(_get remap)" $(_get InstallPackages)
        ;;

    "restore-backup-data")
        unit=cockpit-restore-data-"$(_get name)"

        # Skip double execution
        systemctl is-active $unit >/dev/null
        if [ $? -eq 0 ]; then
            exit 0
        else
            systemctl reset-failed $name >/dev/null
        fi

        systemd-run --unit=$unit  /sbin/e-smith/restore-data -b "$(_get name)"  >/dev/null
        ;;
esac
