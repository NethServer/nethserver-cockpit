#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Return current ssh connections and sshd configuration
#

use strict;
use NethServer::ApiTools qw(readInput error);

use JSON;
use esmith::ConfigDB;
my %ret;

my $input = readInput();
my $cmd = $input->{'action'};

if($cmd eq 'hints') {
    my %r;
    my $db = esmith::ConfigDB->open("configuration");
    $r{'hints'} = $db->get_prop('cockpit.socket', 'ShowHints') || 'disabled';
    print encode_json(\%r);
    exit(0);

} elsif ($cmd eq 'settings') {

    my $nsdc = system("/usr/bin/systemctl status nsdc &>/dev/null");
    my $ldap = system("/usr/bin/systemctl status slapd &>/dev/null");
    my $is_root = ($< == 0);
    if ($nsdc > 0 && $ldap > 0 && !$is_root) { # sssd is configured for remote account provider, root is always local
        $ret{'status'}{'canChangePassword'} = 0; 
    } else {
        $ret{'status'}{'canChangePassword'} = 1;
    }
    my $db = esmith::ConfigDB->open("configuration");
    my $postfix = $db->get('postfix');
    my %smarthost = (
        SmartHostStatus => $postfix->prop('SmartHostStatus'),
        SmartHostName => $postfix->prop('SmartHostName'),
        SmartHostPort => $postfix->prop('SmartHostPort'),
        SmartHostUsername => $postfix->prop('SmartHostUsername'),
        SmartHostPassword => $postfix->prop('SmartHostPassword'),
        SmartHostTlsStatus => $postfix->prop('SmartHostTlsStatus'),
    );

    my @addresses = ();
    my $email_address = $db->get_prop('root', 'EmailAddress');
    if ($email_address) {
        @addresses = split(",",$email_address);
    }

    if ($email_address) {
        @addresses = split(",",$email_address);
    }
    my %root = (
        EmailAddress => \@addresses,
        KeepMessageCopy => $db->get_prop('root', 'KeepMessageCopy'),
        SenderAddress => $db->get_prop('root', 'SenderAddress')
    );

    my %cockpit = (
        access => $db->get_prop('cockpit.socket', 'access'),
        LimitAccess => $db->get_prop('cockpit.socket', 'LimitAccess'),
        ShowHints => $db->get_prop('cockpit.socket', 'ShowHints')
    );

    my %user_settings_page = (
        UserSettingsPage => $db->get_prop('cockpit.socket', 'UserSettingsPage'),
        UserSettingsGrantAccess => $db->get_prop('cockpit.socket', 'UserSettingsGrantAccess'),
        UserSettingsPageAlias => $db->get_prop('cockpit.socket', 'UserSettingsPageAlias')
    );

    my $logrotate = $db->get('logrotate') ||
    $db->new_record('logrotate', { type => "configuration" });

    my %logrotate = (
        Compression => $logrotate->prop('Compression'),
        Rotate => $logrotate->prop('Rotate'),
        Times => $logrotate->prop('Times')
    );

    my $shellPolicy = $db->get_prop('sssd', 'ShellOverrideStatus');
    
    $ret{'configuration'}{'smarthost'} = \%smarthost;
    $ret{'configuration'}{'cockpit'} = \%cockpit;
    $ret{'configuration'}{'root'} = \%root;
    $ret{'configuration'}{'logrotate'} = \%logrotate;
    $ret{'configuration'}{'shellPolicy'} = $shellPolicy;
    $ret{'configuration'}{'userSettingsPage'} = \%user_settings_page;

    print encode_json(\%ret);
} else {
    error();
}
