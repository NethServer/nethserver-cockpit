#!/usr/bin/php
<?php

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require_once("/usr/libexec/nethserver/api/lib/dhcp_functions.php");

$data = readInput();
$action = $data['action'];

function not_expired($r)
{
    if (time() > $r['expire']) {
    print $r['expire']."\n";
    }
    return time() < $r['expire'];
}

$ret = array();
$ranges = array();
$leases = array();
$reservations = array();

if ($action === 'list') {
    # List current leases
    if (file_exists("/var/lib/dnsmasq/dnsmasq.leases")) {
        $output = shell_exec("/usr/libexec/nethserver/read-dhcp-leases");
        foreach (json_decode($output, TRUE) as $lease) {
            if (time() > $lease['expire']) {
                continue;
            }
            if (!$lease['name']) {
                $tmp = explode(".",$lease['ip']);
                $lease['name'] = "host-".$tmp[3];
            }
            $leases[] = $lease;
        }
    }
    $ret['status'] = $leases;

    # Merge list of available interfaces with dhcp configuration
    $dhcp_db = new EsmithDatabase('dhcp');
    $ndb = new EsmithDatabase('networks');
    foreach (getNetworkInterfaces() as $i => $props) {
        $range = $dhcp_db->getKey($i);
        $nslabel = $ndb->getProp($i, 'nslabel');
        $record = array("name" => $i ,"type" => "range", "nslabel" => $nslabel);
        if ($range) {
            foreach (array('DhcpDNS', 'DhcpWINS', 'DhcpNTP', 'DhcpTFTP') as $field) {
                if (isset($range[$field])) {
                    if ($range[$field]) {
                        $range[$field] = explode(",", $range[$field]);
                    } else {
                        $range[$field] = array();
                    }
                }
            }
            $record['props'] = $range;
        } else {
            $record['props'] = getDefaults($props);
        }
        $ranges[] = $record;
    }
    $ret['configuration']['ranges'] = $ranges;

    $hosts_db = new  EsmithDatabase('hosts');
    foreach ($hosts_db->getAll("local") as $key => $props) {
        $record = array("name" => $key ,"type" => "local", "props" => $props);
        $reservations[] = $record;
    }
    $ret['configuration']['reservations'] = $reservations;

    # JSON output
    print json_encode($ret); 
}

elseif ($action === 'scan') {
    # scan the nic, check if the mac address is not already reserved
    $nic = $data['nic'];
    $hosts_db = new  EsmithDatabase('hosts');
    $macs = array();

    foreach ($hosts_db->getAll("local") as $key => $props) {
        if (@$props['MacAddress']) {
            $macs[] = strtolower($props['MacAddress']);
        }
    }

    exec("arp-scan -lx -I ".escapeshellarg($nic), $output, $ret);
    $data = array();
    if ($ret == 0) {
        foreach ($output as $line) {
            $tmp = explode("\t", $line);
            # Find if the mac address is not already reserved
            $reserved = false;
            if (in_array($tmp[1], $macs)) { # assume mac is always lower case
                $reserved = true;
            }
            $data[] = array( "ip" => $tmp[0], "mac" => $tmp[1], "name" => $tmp[2], "reserved" => $reserved );
        }
    }
    echo json_encode($data);
}