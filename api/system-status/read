#!/usr/bin/php
<?php
#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

function readMemory()
{
    $fields = array();
    $f = file('/proc/meminfo');
    foreach ($f as $line) {
        $tmp = explode(':',$line);
        $tmp2 = explode(' ', trim($tmp[1]));
        $fields[trim($tmp[0])] = $tmp2[0];
    }
    return $fields; 
}

function readUptime() {
    $data = file_get_contents('/proc/uptime');
    $upsecs = (int)substr($data, 0, strpos($data, ' '));
    $uptime = array (
        'days' => floor($upsecs/60/60/24),
        'hours' => $upsecs/60/60%24,
        'minutes' => $upsecs/60%60,
        'seconds' => $upsecs%60
    );
    return $uptime;
}

function readCPU() 
{
    $ret = 0;
    $f = file('/proc/cpuinfo');
    foreach ($f as $line) {
        if (strpos($line, 'processor') === 0) {
            $ret++;
        }
    }
    $tmp = explode(':',$f[4]);
    return array('model' => trim($tmp[1]), 'n' => $ret);
}

function readLoad()
{
     return sys_getloadavg();
}

function readDMI()
{
    return trim(@file_get_contents("/sys/devices/virtual/dmi/id/sys_vendor"))." ".@trim(@file_get_contents("/sys/devices/virtual/dmi/id/product_name"));
}

function readRelease()
{
    return @trim(file_get_contents("/etc/nethserver-release"));
}

function readKernel()
    {
        $tmp = @explode(' ',file_get_contents("/proc/version"));
        return  @trim($tmp[2]);
    }


print json_encode(array(
    "status" => array(
        "memory" => readMemory(),
        "uptime" => readUptime(),
        "cpu" => readCPU(),
        "kernel" => readKernel(),
        "hardware" => readDMI(),
        "release" => readRelease(),
        "load" => readLoad()
    ),
    "configuration" => ''
));
