#!/usr/bin/php
<?php
#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

function readMemory()
{
    $fields = array();
    $f = file('/proc/meminfo');
    foreach ($f as $line) {
        $tmp = explode(':',$line);
        $tmp2 = explode(' ', trim($tmp[1]));
        $fields[trim($tmp[0])] = $tmp2[0];
    }
    return $fields;
}

function readDisk()
{
    $out = array();
    $ret = array();
    exec('/bin/df -P /', $out);
    # Filesystem Size  Used Avail Use% Mount
    for ($i=0; $i<count($out); $i++) {
        if ($i == 0) {
            continue;
        }
        $tmp = explode(" ", preg_replace('/\s+/', ' ', $out[$i]));
        // skip fs ($tmp[0]) and perc_used ($tmp[4])
        if ($tmp[5] == "/") {
          $tmp[5] = "root";
        }
        $ret[$tmp[5]] = array('total' => intval($tmp[1]), 'used' => intval($tmp[2]), 'free' => intval($tmp[3]));
    }
    return $ret; 
}

function readRaid()
{
    $ret = array();
    $out = array();
    exec('/usr/libexec/nethserver/raid-status', $out, $exit_code);
    $out = json_decode($out[0], true);
    $records = count($out["results"]);
    
    if ($records > 0) {
      if ($exit_code == 0) {
        $ret['status'] = 'ok';
      } else {
        $ret['status'] = 'error';
      }
    } else {
      $ret['status'] = null;
    }
    return $ret;
}

function readUptime() 
{
    $data = file_get_contents('/proc/uptime');
    $upsecs = (int)substr($data, 0, strpos($data, ' '));
    $uptime = array (
        'days' => floor($upsecs/60/60/24),
        'hours' => $upsecs/60/60%24,
        'minutes' => $upsecs/60%60,
        'seconds' => $upsecs%60
    );
    return $uptime;
}

function readCPU()
{
    $ret = 0;
    $f = file('/proc/cpuinfo');
    foreach ($f as $line) {
        if (strpos($line, 'processor') === 0) {
            $ret++;
        }
    }
    # find cpu model name (x86_64 4th, arm 2th line)
    foreach ($f as $linenumber => $line) {
        if (strpos($line, 'model name') !== false) {
            $linenumber++;
        break;
        }
    }
    $tmp = explode(':',$f[$linenumber-1]);
    return array('model' => trim($tmp[1]), 'n' => $ret);
}

function readLoad()
{
     return sys_getloadavg();
}

function readDMI()
{
    if (file_exists("/sys/devices/virtual/dmi/id/")) {
    return trim(@file_get_contents("/sys/devices/virtual/dmi/id/sys_vendor"))." ".@trim(@file_get_contents("/sys/devices/virtual/dmi/id/product_name"));
    // also try to fetch info for devicetree based (arm)devices
    } elseif (file_exists("/sys/firmware/devicetree/base/model")) {
    return trim(@file_get_contents("/sys/firmware/devicetree/base/model"));
    } else {
        return "-";
    }
}

function readRelease()
{
    return @trim(file_get_contents("/etc/nethserver-release"));
}

function readKernel()
    {
        $tmp = @explode(' ',file_get_contents("/proc/version"));
        return  @trim($tmp[2]);
    }


print json_encode(array(
    "status" => array(
        "memory" => readMemory(),
        "uptime" => readUptime(),
        "cpu" => readCPU(),
        "kernel" => readKernel(),
        "hardware" => readDMI(),
        "release" => readRelease(),
        "load" => readLoad(),
        "disk" => readDisk(),
        "raid" => readRaid()
    ),
    "configuration" => ''
));
