#!/usr/bin/php
<?php
/*
 * Copyright (C) 2018 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/

/** Include common functions **/

require_once("/usr/libexec/nethserver/api/system-users/functions.php");

function check_password($data, $v) {
    if (!isset($data['newPassword']) || !isset($data['confirmNewPassword'])) {
        return;
    }

    if ($data['newPassword'] !== $data['confirmNewPassword']) {
        $v->addValidationError('confirmNewPassword','password_no_match');
        error($v);
    }

    if ($data['newPassword'] && $data['confirmNewPassword']) {
        $tmpFilePath = @tempnam(sys_get_temp_dir(), 'ng-');
        $tmpFile = fopen($tmpFilePath, 'w');
        fwrite($tmpFile, $data['newPassword']);
        fclose($tmpFile);

        $passwordValidator = $v->createValidator()->platform('password-strength', 'Users');
        if (!$passwordValidator->evaluate($tmpFilePath)) {
            $v->addValidationError('newPassword', 'weak_password');
            unlink($tmpFilePath);
            error($v);
        }
        unlink($tmpFilePath);
    }
}

function validate_group_create($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('name', Validate::USERNAME);
    $v->declareParameter('members', Validate::ANYTHING);
    if (in_array($data['name'],list_groups())) {
        $v->addValidationError('name', 'group_exists');
    }

    $users = list_users();
    foreach ($data['members'] as $m) {
        if (!in_array($m, $users)) {
            $v->addValidationError('members','non_exiting_user');
            error($v);
        }
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_group_update($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('members', Validate::ANYTHING);
    $v->declareParameter('name', $v->createValidator()->memberOf(list_groups()));

    $users = list_users();
    foreach ($data['members'] as $m) {
        if (!in_array($m, $users)) {
            $v->addValidationError('members','non_exiting_user');
            error($v);
        }
    }


    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_group_delete($data) {
    $v = new LegacyValidator($data);
    $deleteValidator = $v->createValidator()->platform('group-delete');
    if( ! $deleteValidator->evaluate($data['name'])) {
        $v->addValidationError('name', 'not_removable');
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_user_create($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('name', Validate::USERNAME);
    $v->declareParameter('groups', Validate::ANYTHING);
    $v->declareParameter('gecos', Validate::NOTEMPTY);
    $v->declareParameter('expires', $v->createValidator()->memberOf('yes', 'no'));
    $v->declareParameter('shell', $v->createValidator()->memberOf('/bin/bash', '/usr/libexec/openssh/sftp-server'));
    $v->declareParameter('newPassword', Validate::ANYTHING);
    $v->declareParameter('confirmNewPassword', Validate::ANYTHING);
    if (in_array($data['name'],list_users())) {
        $v->addValidationError('name', 'user_exists');
    }

    $groups = list_groups();
    foreach ($data['groups'] as $g) {
        if (!in_array($g, $groups)) {
            $v->addValidationError('groups','non_exiting_group');
            error($v);
        }
    }

    check_password($data, $v);

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_user_update($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('name', $v->createValidator()->memberOf(list_users()));
    $v->declareParameter('groups', Validate::ANYTHING);
    $v->declareParameter('gecos', Validate::NOTEMPTY);
    $v->declareParameter('expires', $v->createValidator()->memberOf('yes', 'no'));
    $v->declareParameter('shell', $v->createValidator()->memberOf('/bin/bash', '/usr/libexec/openssh/sftp-server'));
    
    $groups = list_groups();
    foreach ($data['groups'] as $g) {
        if (!in_array($g, $groups)) {
            $v->addValidationError('groups','non_exiting_group');
            error($v);
        }
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_user_delete($data) {
    $v = new LegacyValidator($data);
    $deleteValidator = $v->createValidator()->platform('user-delete');
    if( ! $deleteValidator->evaluate($data['name'])) {
        $v->addValidationError('name', 'not_removable');
    }

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

function validate_change_password($data) {
    $v = new LegacyValidator($data);
    $v->declareParameter('name', $v->createValidator()->memberOf(list_users()));
    if (!isset($data['newPassword'])) {
        $v->addValidationError('newPassword','not_empty');
        error($v);
    }
    if (!isset($data['confirmNewPassword'])) {
        $v->addValidationError('confirmNewPassword','not_empty');
        error($v);
    }

    check_password($data, $v);

    if (!$v->validate()) {
        error($v);
    } else {
        success();
    }
}

$data = readInput();

if($data['action'] == 'user-create') {
    validate_user_create($data);
} else if($data['action'] == 'user-update') {
    validate_user_update($data);
} else if($data['action'] == 'user-delete') {
    validate_user_delete($data);
} else if($data['action'] == 'group-create') {
    validate_group_create($data);
} else if($data['action'] == 'group-update') {
    validate_group_update($data);
} else if($data['action'] == 'group-delete') {
    validate_group_delete($data);
} else if($data['action'] == 'change-password') {
    validate_change_password($data);
} else {
    error();
}

