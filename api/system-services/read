#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require "/usr/libexec/nethserver/api/lib/helper_functions.pl";

use strict;
use warnings;

use esmith::ConfigDB;
use NethServer::Service;
use JSON;


sub ports_to_array
{
    my $ret;
    my $ports = shift;

    if (!$ports) {
        return [];
    }
    if ($ports =~ ',') {
        my @tmp = split(',',$ports);
        $ret = \@tmp;
    } else {
        $ret = [$ports]
    }
    return $ret;
}

my @status;
my @configuration;

my $input = readInput();
my $cmd = $input->{'action'};

if($cmd eq 'list') {
    my $confDb = esmith::ConfigDB->open_ro();
    foreach ($confDb->get_all_by_prop('type' => 'service')) {
        my $key = $_->key;
        my $custom = ( -e "/etc/e-smith/db/configuration/defaults/$key/status" ) ? 0 : 1;
        my $s = NethServer::Service->new($key, $confDb);
        my %props = $_->props();
        my %ports;
        my $desc = `systemctl show --property=Description $key`;
        $desc =~ s/.*=//;
        chomp $desc;
        my $tcpPorts = $props{'TCPPorts'} || $props{'TCPPort'} || "";
        my $udpPorts = $props{'UDPPorts'} || $props{'UDPPort'} || "";
        $ports{'access'} = $props{'access'} || '';
        delete($props{'status'}); 
        delete($props{'access'}); 
        delete($props{'type'});
        delete($props{'TCPPort'});
        delete($props{'UDPPort'});
        delete($props{'UDPPorts'});
        delete($props{'TCPPorts'});

        $ports{'TCP'} = ports_to_array($tcpPorts);
        $ports{'UDP'} = ports_to_array($udpPorts);

        my $service_status = {
            'name' => $key,
            'status' => $s->is_enabled() ? 1 : 0,
            'running' => $s->is_running() ? 1 : 0,
        };
        my $service_configuration = {
            'name' => $key,
            'description' => $desc,
            'ports' => \%ports,
            'props' => \%props,
            'custom' => $custom
        };

        push(@status,$service_status);
        push(@configuration,$service_configuration);
    }

    print JSON::to_json({ status => \@status, configuration => \@configuration });

} elsif($cmd eq 'status') {
    my $unit = $input->{'name'};
    # LANG=C make sure output contains readable characters
    my $status = `LANG=C /usr/bin/systemctl status --full --no-pager $unit`;
    print encode_json({'data' => $status});
}
exit(0);

