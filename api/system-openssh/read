#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

#
# Return current ssh connections and sshd configuration
#

use JSON;
use esmith::db;
use NethServer::ApiTools;

my $db = esmith::db->open("configuration");
my $port = $db->get_prop('sshd', 'TCPPort');
my $provider = $db->get_prop('sssd', 'Provider') || 'none';
my @connections;

sub listGroups {
  my $groups = `/usr/libexec/nethserver/list-groups -s`;
  my %groups =  %{ NethServer::ApiTools::safe_decode_json(($groups), {}) };
  delete ($groups{'domain admins'});
  return [ keys %groups];
}
open(H, "ss -Hn state established '( dport = $port or sport = $port )'|");

while (<H>) {
  ($netid,$recvq,$sendq,$local,$peer) = split;
  push(@connections, {'local' => $local, 'peer' => $peer});
}
close(H);
my %out = (
    'status' => { 'connections' => \@connections },
    'configuration' => $db->prepare_json('sshd'),
    'groups' => [@{listGroups()}],
    'ShellOverrideStatus' => ($db->get_prop('sssd','ShellOverrideStatus') 
            || 'disabled') eq 'enabled' ? JSON::true : JSON::false,
    'Provider' => $provider
);

my %allow = ();
foreach my $g (split(',',$out{'configuration'}{'props'}{'AllowGroups'})) {
  my ($group,$sftp) = split (':',$g);
  if (!$group) {
    next;
  }
  if ($sftp eq 'sftp') {
    $allow{$group} = 'sftp';
  } else {
    $allow{$group} = 'ssh';
  }
}
$out{'configuration'}{'props'}{'AllowGroups'} = \%allow;


print to_json(\%out, {utf8 => 1, pretty => 0, allow_nonref => 1});
