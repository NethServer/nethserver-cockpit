#!/usr/bin/php
<?php
/*
 * Copyright (C) 2018 Nethesis S.r.l.
 * http://www.nethesis.it - nethserver@nethesis.it
 *
 * This script is part of NethServer.
 *
 * NethServer is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or any later version.
 *
 * NethServer is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with NethServer.  If not, see COPYING.
*/

/** Include helper functions **/

require_once("/usr/libexec/nethserver/api/lib/Helpers.php");

/**

Read input 

**/

$data = readInput();

/** Declare parameters reusing the old code 

1. Create the validator (calling it $v)
2. Copy all declareParameters invocation from the old Module
   Parameters with ANYTHING validator could be omitted
3. Replace all call to "$this" with "$v"
4. Make sure the first parameter of declareParameter is the name of the prop inside the db
5. (Optional) Remove the 3rd argument from declareParameter calls
6. If present, copy validate function.
   It should be enough to copy the code inside "if ($this->getRequest()->isMutation()) {" condition.
   Replace all "$this" with "$v"
7. Invoke the validate method 

**/

# Create the validator
$v = new LegacyValidator($data['props']);

# Declare all parameters
$v->declareParameter('PasswordAuthentication', Validate::BOOLEAN);
$v->declareParameter('PermitRootLogin', Validate::BOOLEAN);
$v->declareParameter('TCPPort', Validate::PORTNUMBER);
$v->declareParameter('status', Validate::SERVICESTATUS);
$v->declareParameter('AllowEveryone', $v->createValidator()->memberOf('none','sftp','sftp+ssh'));

$sftp= $v->createValidator()->memberOf('sftp','ssh');
foreach ($data['props']['AllowGroups'] as $name => $values) {
    if (!$sftp->evaluate($values)) {
        $v->addValidationError('AllowGroups','Not_the_expected_values');
    }
}

/** Validate the input

1. Validate the input calling $v->validate()
2. Invoke success() method if validate() return true
3. Otherwise invoke error and pass the validator object

**/

# Validate the input
if ($v->validate()) {
    success();
} else {
    error($v);
}
