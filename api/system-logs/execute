#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require "/usr/libexec/nethserver/api/lib/helper_functions.pl";

use warnings;
use strict;
use String::ShellQuote qw( shell_quote );

my $TIMEOUT=300;
my $input = readInput();
my $cmd = $input->{'action'};
my $lines = $input->{'lines'} || '50';
my $filter = $input->{'filter'} || '';
my $format_time = ($input->{'format_time'} || 'false') eq 'true' || 0;

sub dump_logs
{
    my $paths = shift;
    my $lines = shift;
    my $mode = shift;
    my $follow = shift;
    my $format_time = shift;
    my $cmd = '';
    my $args = '';
    my $watchdog = '';

    if ($mode eq 'systemd') {
        $cmd .= "journalctl ";
        $args = " -u ".shell_quote(join(" -u ",@$paths));
    } else {
        $cmd .= "tail ";
        $args = shell_quote(join(" ",@$paths));

        if ($format_time) {
            # $| = 1; force flush to console
            $args .= ' | perl -p -e \'$| = 1;s/^([0-9]*)(\.[0-9]*)?/"[".localtime($1)."]"/e\'';
        }
    }
    if ($follow) {
        $cmd .= " -f ";
        # Make sure process is killed after the timeout
        $watchdog= "timeout --foreground -k ".($TIMEOUT+5)." $TIMEOUT ";
    } else {
        $cmd .= " -n ".shell_quote($lines);
    }
    if ($filter ne '') {
        $args .= " | grep --line-buffered ".shell_quote($filter);
    }

    my @procs_to_kill = (
        "timeout .*@$paths[0]",
        "tail .*@$paths[0]",
        "grep --line-buffered",
        "journalctl .*@$paths[0]"
    );

    for (@procs_to_kill) {
        my @pids = `pgrep -f "$_"`;
        chomp @pids;

        foreach my $pid (@pids) {
            if ($pid ne "" && $pid != $$) {
                system("kill -9 $pid");
            }
        }
    }

    system("$watchdog $cmd $args");
}

if($cmd eq 'follow') {
    dump_logs($input->{'paths'}, $lines, $input->{'mode'}, 1, $format_time);
} elsif ($cmd eq 'dump') {
    dump_logs($input->{'paths'}, $lines, $input->{'mode'}, 0, $format_time);
} else {
    error();
}
