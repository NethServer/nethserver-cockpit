#!/usr/bin/perl

#
# Copyright (C) 2019 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use warnings;
use strict;
use JSON;
use NethServer::ApiTools;
use Convert::Base32;
use NethServer::Password;
use Sys::Hostname;

my %appRoutes = ();
my %sysRoutes = ();
my $hostname = Sys::Hostname::hostname();

# User Authentication
my $isAdmin = 0;
my $isRoot = $> eq 0 ? 1 : 0;
my ($username, $passwd, $uid, $gid, $quota, $comment, $gcos, $dir, $shell) = getpwuid($<);
$username =~ s/@.*//;

# Map of system modules that have a name different from their API path
# The key is the directory name suffix, the value is the corresponding UI route
# The dir name prefix is "system-".
my %pathMap = (
    "certificate" => "certificates",
    "users" => "users-groups",
    "openssh" => "ssh",
    "packages" => "software-center",
);

$ENV{'LANG'} = 'C';
my $skip = 1;
foreach my $line (split "\n", NethServer::ApiTools::exec_slurp('/usr/bin/sudo', '-ll')) {
    if($line =~ /^Sudoers entry:/) {
        $skip = 0;
        next;
    }
    if($skip) {
        next;
    }

    if($line =~ m|^\s+/usr/libexec/nethserver/api/system-([-\w]+)/([-\w]+/)*update|) {
        $sysRoutes{exists $pathMap{$1} ? $pathMap{$1} : $1} = 1;
    } elsif($line =~ m|^\s+/usr/libexec/nethserver/api/(nethserver-[-\w]+)(/[-\w]+)+|) {
        $appRoutes{$1} = 1;
    }

    # isAdmin assertion: true if ALL commands are enabled (wheel-like access)
    # or special system-apps/update is available
    if($line =~ m{^\s+(ALL|/usr/libexec/nethserver/api/system-apps/update)$}) {
        $isAdmin = 1;
    }
}

# Grant access to all known sys modules and apps to root and admins users
if($isRoot || $isAdmin) {
    %sysRoutes = (%sysRoutes, map { $_ => 1 } (
        "storage",
        "disk-usage",
        "certificates",
        "dns",
        "dhcp",
        "backup",
        "services",
        "users-groups",
        "network",
        "ssh",
        "tls-policy",
        "trusted-networks",
        "software-center",
        "subscription"
    ));
    %appRoutes = (%appRoutes, map { $_ => 1 } NethServer::ApiTools::list_applications());
}

# Terminal access is granted if a *sh shell is set for the user
if($shell =~ m/sh$/) {
    $sysRoutes{'terminal'} = 1;
}

# One time password for a two-factor authentication
my ($OtpStatus,$key,$OtpCockpit,$OtpSshd);
if (! -f "$dir/.2fa.secret") {
    $key = `/usr/bin/openssl rand -hex 20`;
    $OtpStatus = 'disabled';
    $OtpCockpit = 'enabled';
    $OtpSshd = 'disabled';
} else {
    $key = NethServer::Password->new('.2fa.secret',{'defaultDir' => $dir})->getAscii();
    $OtpStatus = 'enabled';
    $OtpCockpit = (-l "$dir/.2fa_cockpit.secret") ? "enabled":"disabled";
    $OtpSshd = (-l "$dir/.2fa_sshd.secret") ? "enabled":"disabled";
}

## clean up
$key  =~ s/\R//g;

# we need to convert the hex token to binary base32 
my $secret = uc encode_base32( pack("H*", $key) );

# we need to find the PIN for single use (recovery)
open(FH, "/usr/bin/oathtool  -w 4 $key|");
my @ret;
while (<FH>) {
    chomp;
    my ($code) = split('\n');
    push(@ret, $code);
}

# Output JSON
print encode_json({
    "system" => [sort keys %sysRoutes],
    "applications" => [sort keys %appRoutes],
    "status" => {
        "isRoot" => $isRoot,
        "isAdmin" => $isAdmin,
        "username" => $username
    },
    "Key" => $key,
    "Secret"=> $secret,
    "Code"=> \@ret,
    "OtpStatus" => $OtpStatus,
    "OtpCockpit" => $OtpCockpit,
    "OtpSshd" => $OtpSshd,
    "Token" => "otpauth://totp/$username\@$hostname?secret=$secret"
});
