#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

require "/usr/libexec/nethserver/api/lib/helper_functions.pl";

use warnings;
use strict;
use JSON;
use esmith::ConfigDB;

my $ret = {};
my $input = readInput();
my $cmd = $input->{'action'};

if($cmd eq 'list-updates') {

    my $centos_upgrade = 0;
    my $centos_cur_release = '';
    my $centos_new_release = '';
    my $nethserver_upgrade = 0;
    my $nethserver_cur_release = '';
    my $nethserver_new_release = '';
    my $out = `/usr/libexec/nethserver/api/system-packages/list-updates`;

    $ret = decode_json($out);
    my $tmp = $ret->{'updates'};

    # search for centos upgrade
    foreach my $group (@$tmp) {
        my $updates = $group->{updates};
        foreach my $package (@$updates) {
            if ($package->{'name'} eq 'centos-release') {
                my @installed = split('\.', $package->{'installed_release'});
                my @release = split('\.', $package->{'release'});
                $centos_cur_release = $package->{'installed_version'}.".".$installed[0].".".$installed[1];
                $centos_new_release = $package->{'version'}.".".$release[0].".".$release[1];
                if ($centos_cur_release ne $centos_new_release) {
                    $centos_upgrade = 1;
                }
           }
        }
    }

    # search for nethserver upgrade
    my $db = esmith::ConfigDB->open_ro();
    $nethserver_cur_release = $db->get_prop('sysconfig', 'Version');
    $nethserver_new_release = $db->get_prop('subscription', 'NsRelease') || '';
    my @nsVersion = split('\.', $nethserver_cur_release);
    my @sbVersion = split('\.', $nethserver_new_release);
    if (int($sbVersion[0].$sbVersion[1]) > int($nsVersion[0].$nsVersion[1])) {
        $nethserver_upgrade = 1;
    }

    $ret->{'hints'}{'count'} = $centos_upgrade + $nethserver_upgrade;
    if ($centos_upgrade) {
       $ret->{'hints'}{'details'}{'centos'} = {"current_release" => $centos_cur_release, "new_release" => $centos_new_release};
    }
    if ($nethserver_upgrade) {
       $ret->{'hints'}{'details'}{'nethserver'} = {"current_release" => $nethserver_cur_release, "new_release" => $nethserver_new_release};
    }
    print encode_json($ret);

} elsif ($cmd eq 'list-available') {

    my $out = `/usr/libexec/nethserver/api/system-packages/list-available`;
    # HACK: remove error output from yb.comps.get_groups() inside YUM wrapper
    if (index($out, '{') != 0) {
        $out = substr($out, index($out, '{'))
    }
    print $out;

} elsif ($cmd eq 'list-installed') {

    my $out = `/bin/rpm -qa --queryformat '%{NAME}:%{VERSION}:%{VERSION}-%{RELEASE}\n' | sort | column -t -s :`;
    print $out;

} elsif ($cmd eq 'list-removed') {

    my $packages = $input->{'packages'};
    $packages = join(" ", @$packages);
    my @data = `/usr/libexec/nethserver/yum-packages-to-remove $packages`;
    @data = map { $_ =~ s/\s$//; $_; } @data; # right trim each element
    print encode_json({"packages" => \@data});

} elsif ($cmd eq 'get-config') {

    my $editable = ($< == 0) ? 1 : 0;
    if ($editable) {
        my $db = esmith::ConfigDB->open_ro();
        my $yumcron = $db->get('yum-cron');
        print encode_json({
                'editable' => 1,
                'applyUpdate' => $db->get_prop('yum-cron', 'applyUpdate'),
                'download' => $db->get_prop('yum-cron', 'download'),
                'messages' => $db->get_prop('yum-cron', 'messages'),
            });
    } else {
        print encode_json({'editable' => 0, 'applyUpdate' => '', 'download' => '', 'messages' => ''});
    }


} elsif ($cmd eq 'changelog') {

    system("/usr/libexec/nethserver/api/system-packages/changelog");

} else {
    error();
}
