#!/usr/bin/perl

#
# Copyright (C) 2018 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

use strict;
use warnings;

use JSON;
use Net::LDAP;
use Net::LDAP::Extension::SetPassword;

sub read_json
{
    my $file = shift || undef;
    die("No such file or directory: $file") if (! -e $file);

    my $json;
    {
        local $/; #Enable 'slurp' mode
        open my $fh, "<", $file or return undef;
        $json = <$fh>;
        close $fh;
    }

    return decode_json($json);
}

# Read password file
# Expected format: one password per line, first line for old password, second line for the new one
my $passfile = shift || die("No passfile given");;
if (! -e $passfile) {
    die("No such file or directory: $passfile");
}
my $handle;
my @passwords;
open $handle, "<:encoding(utf8)", $passfile || die("Could not open file '$passfile': $!\n");
chomp(@passwords = <$handle>);
close $handle;

# Read sssd configuration
my $config = read_json("sssd.json");


my $ldap = Net::LDAP->new( $config->{'ldapURI'} );
my $user = getpwuid( $< );
$user =~ s/(@.*)//; # strip domain
my $dn;
my $ret = 0;

if ($config->{'isLdap'}) {
    $dn = "uid=$user,".$config->{'userDN'}.",".$config->{'baseDN'};
} elsif ($config->{'isAD'}) {
    # TODO ad
}

print "$dn\n";
# TODO: tls
$ldap->bind($dn, password => $passwords[0]);

my $mesg = $ldap->set_password( oldpasswd => $passwords[0], newpasswd => $passwords[1] );

if ($mesg->code()) {
    print STDERR "[ERROR] ".$mesg->error()."(".$mesg->code.")\n";
    $ret = 1;
}

#unlink($passfile);
exit($ret);